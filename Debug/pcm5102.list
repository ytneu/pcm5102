
pcm5102.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003790  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003924  08003924  00013924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800394c  0800394c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800394c  0800394c  0001394c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003954  08003954  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003954  08003954  00013954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800395c  0800395c  0001395c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003964  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001964  20000070  080039d4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200019d4  080039d4  000219d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec39  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002790  00000000  00000000  0002ecd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ca8  00000000  00000000  00031470  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b60  00000000  00000000  00032118  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019c21  00000000  00000000  00032c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c767  00000000  00000000  0004c899  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e099  00000000  00000000  00059000  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e7099  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003470  00000000  00000000  000e7114  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000070 	.word	0x20000070
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800390c 	.word	0x0800390c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000074 	.word	0x20000074
 80001d0:	0800390c 	.word	0x0800390c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <_ZN7KarplusC1Ev>:

#include "Karplus.h"

#include "wavetable.h"

Karplus::Karplus() {
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	4a40      	ldr	r2, [pc, #256]	; (80005e0 <_ZN7KarplusC1Ev+0x10c>)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	2200      	movs	r2, #0
 80004e6:	711a      	strb	r2, [r3, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	f04f 0200 	mov.w	r2, #0
 80004ee:	609a      	str	r2, [r3, #8]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	f04f 0200 	mov.w	r2, #0
 80004f6:	60da      	str	r2, [r3, #12]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	f04f 0200 	mov.w	r2, #0
 80004fe:	611a      	str	r2, [r3, #16]
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000506:	3314      	adds	r3, #20
 8000508:	2200      	movs	r2, #0
 800050a:	801a      	strh	r2, [r3, #0]
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000512:	3316      	adds	r3, #22
 8000514:	2200      	movs	r2, #0
 8000516:	801a      	strh	r2, [r3, #0]
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800051e:	3318      	adds	r3, #24
 8000520:	2200      	movs	r2, #0
 8000522:	801a      	strh	r2, [r3, #0]
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800052a:	331a      	adds	r3, #26
 800052c:	2200      	movs	r2, #0
 800052e:	801a      	strh	r2, [r3, #0]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000536:	331c      	adds	r3, #28
 8000538:	2200      	movs	r2, #0
 800053a:	801a      	strh	r2, [r3, #0]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8000542:	f04f 0200 	mov.w	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800054e:	3304      	adds	r3, #4
 8000550:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800055c:	3308      	adds	r3, #8
 800055e:	f04f 0200 	mov.w	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800056a:	330c      	adds	r3, #12
 800056c:	2200      	movs	r2, #0
 800056e:	801a      	strh	r2, [r3, #0]
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8000576:	3310      	adds	r3, #16
 8000578:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800057c:	601a      	str	r2, [r3, #0]
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8000584:	3314      	adds	r3, #20
 8000586:	4a17      	ldr	r2, [pc, #92]	; (80005e4 <_ZN7KarplusC1Ev+0x110>)
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8000590:	3318      	adds	r3, #24
 8000592:	f04f 0200 	mov.w	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800059e:	331c      	adds	r3, #28
 80005a0:	f04f 0200 	mov.w	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80005ac:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80005b0:	601a      	str	r2, [r3, #0]

	// one pole filter
	float out = 0.0f;
	float last_out = 0.0f;
	float a0 = 0.5f;
	float b1 = 1.0f - a0;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80005b8:	edd3 7a00 	vldr	s15, [r3]
 80005bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80005c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80005ca:	3304      	adds	r3, #4
 80005cc:	edc3 7a00 	vstr	s15, [r3]
	// TODO Auto-generated constructor stub

}
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	4618      	mov	r0, r3
 80005d4:	370c      	adds	r7, #12
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	0800392c 	.word	0x0800392c
 80005e4:	347f8cf0 	.word	0x347f8cf0

080005e8 <_ZN7KarplusD1Ev>:

Karplus::~Karplus() {
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	4a04      	ldr	r2, [pc, #16]	; (8000604 <_ZN7KarplusD1Ev+0x1c>)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	4618      	mov	r0, r3
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000602:	4770      	bx	lr
 8000604:	0800392c 	.word	0x0800392c

08000608 <_ZN7KarplusD0Ev>:
Karplus::~Karplus() {
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
}
 8000610:	6878      	ldr	r0, [r7, #4]
 8000612:	f7ff ffe9 	bl	80005e8 <_ZN7KarplusD1Ev>
 8000616:	f241 0148 	movw	r1, #4168	; 0x1048
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f003 f842 	bl	80036a4 <_ZdlPvj>
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	4618      	mov	r0, r3
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
	...

0800062c <_ZN7Karplus12restore_freqEt>:
	last = 0.0f;
	curr = 0.0f;
	last_out = 0.0f;
}

void Karplus::restore_freq(uint16_t freqq) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	460b      	mov	r3, r1
 8000636:	807b      	strh	r3, [r7, #2]
	freq = freqq;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800063e:	3316      	adds	r3, #22
 8000640:	887a      	ldrh	r2, [r7, #2]
 8000642:	801a      	strh	r2, [r3, #0]
	bound = (uint16_t)(42000.0f / (float)freq);
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800064a:	3316      	adds	r3, #22
 800064c:	881b      	ldrh	r3, [r3, #0]
 800064e:	ee07 3a90 	vmov	s15, r3
 8000652:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000656:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80006c8 <_ZN7Karplus12restore_freqEt+0x9c>
 800065a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800065e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000662:	ee17 3a90 	vmov	r3, s15
 8000666:	b29a      	uxth	r2, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800066e:	331a      	adds	r3, #26
 8000670:	801a      	strh	r2, [r3, #0]
	restore_noise();
 8000672:	6878      	ldr	r0, [r7, #4]
 8000674:	f000 f82a 	bl	80006cc <_ZN7Karplus13restore_noiseEv>
	locat = 0;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800067e:	3314      	adds	r3, #20
 8000680:	2200      	movs	r2, #0
 8000682:	801a      	strh	r2, [r3, #0]
	out = 0.0f;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800068a:	3318      	adds	r3, #24
 800068c:	f04f 0200 	mov.w	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
	last = 0.0f;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	f04f 0200 	mov.w	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
	curr = 0.0f;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	f04f 0200 	mov.w	r2, #0
 80006a0:	611a      	str	r2, [r3, #16]
	last_out = 0.0f;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80006a8:	331c      	adds	r3, #28
 80006aa:	f04f 0200 	mov.w	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
	decay = 1.0f;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80006b6:	3310      	adds	r3, #16
 80006b8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80006bc:	601a      	str	r2, [r3, #0]
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	47241000 	.word	0x47241000

080006cc <_ZN7Karplus13restore_noiseEv>:

void Karplus::restore_noise() {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < KARPLUS_DELAY_SIZE; i++) {
 80006d4:	2300      	movs	r3, #0
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80006de:	da37      	bge.n	8000750 <_ZN7Karplus13restore_noiseEv+0x84>
    	float rnd = static_cast <float> (rand()) / static_cast <float> (RAND_MAX);
 80006e0:	f003 f8ce 	bl	8003880 <rand>
 80006e4:	ee07 0a90 	vmov	s15, r0
 80006e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80006ec:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8000758 <_ZN7Karplus13restore_noiseEv+0x8c>
 80006f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006f4:	edc7 7a02 	vstr	s15, [r7, #8]
      accum = accum - (lowpass * (accum - rnd));
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80006fe:	ed93 7a00 	vldr	s14, [r3]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8000708:	3304      	adds	r3, #4
 800070a:	edd3 6a00 	vldr	s13, [r3]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8000714:	ed93 6a00 	vldr	s12, [r3]
 8000718:	edd7 7a02 	vldr	s15, [r7, #8]
 800071c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000720:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000724:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800072e:	edc3 7a00 	vstr	s15, [r3]
      delay_mem[i] = accum;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	6879      	ldr	r1, [r7, #4]
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	3304      	adds	r3, #4
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	440b      	add	r3, r1
 8000744:	3304      	adds	r3, #4
 8000746:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KARPLUS_DELAY_SIZE; i++) {
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	3301      	adds	r3, #1
 800074c:	60fb      	str	r3, [r7, #12]
 800074e:	e7c3      	b.n	80006d8 <_ZN7Karplus13restore_noiseEv+0xc>
    }
}
 8000750:	bf00      	nop
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	4f000000 	.word	0x4f000000

0800075c <_ZN7Karplus11get_karplusEf>:
void Karplus::get_karplus(float adsr_output) {
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	ed87 0a00 	vstr	s0, [r7]
	delay_mem[locat++] = out;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800076e:	3314      	adds	r3, #20
 8000770:	881a      	ldrh	r2, [r3, #0]
 8000772:	1c53      	adds	r3, r2, #1
 8000774:	b299      	uxth	r1, r3
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800077c:	3314      	adds	r3, #20
 800077e:	8019      	strh	r1, [r3, #0]
 8000780:	4610      	mov	r0, r2
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8000788:	3318      	adds	r3, #24
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	6879      	ldr	r1, [r7, #4]
 800078e:	1d03      	adds	r3, r0, #4
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	440b      	add	r3, r1
 8000794:	3304      	adds	r3, #4
 8000796:	601a      	str	r2, [r3, #0]
    if (locat >= bound) locat = 0;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800079e:	3314      	adds	r3, #20
 80007a0:	881a      	ldrh	r2, [r3, #0]
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007a8:	331a      	adds	r3, #26
 80007aa:	881b      	ldrh	r3, [r3, #0]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d305      	bcc.n	80007bc <_ZN7Karplus11get_karplusEf+0x60>
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007b6:	3314      	adds	r3, #20
 80007b8:	2200      	movs	r2, #0
 80007ba:	801a      	strh	r2, [r3, #0]
    curr = delay_mem[locat];
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007c2:	3314      	adds	r3, #20
 80007c4:	881b      	ldrh	r3, [r3, #0]
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	3304      	adds	r3, #4
 80007ca:	009b      	lsls	r3, r3, #2
 80007cc:	4413      	add	r3, r2
 80007ce:	3304      	adds	r3, #4
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	611a      	str	r2, [r3, #16]
//    val = adsr_output * 0.5 * (last + curr);
    val =  0.5 * (last + curr);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	ed93 7a03 	vldr	s14, [r3, #12]
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	edd3 7a04 	vldr	s15, [r3, #16]
 80007e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007e6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80007ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	edc3 7a02 	vstr	s15, [r3, #8]
    out = last_out + a0 * (val - last_out);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80007fa:	331c      	adds	r3, #28
 80007fc:	ed93 7a00 	vldr	s14, [r3]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8000806:	edd3 6a00 	vldr	s13, [r3]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	ed93 6a02 	vldr	s12, [r3, #8]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8000816:	331c      	adds	r3, #28
 8000818:	edd3 7a00 	vldr	s15, [r3]
 800081c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000820:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000824:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800082e:	3318      	adds	r3, #24
 8000830:	edc3 7a00 	vstr	s15, [r3]
    last = curr;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	691a      	ldr	r2, [r3, #16]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	60da      	str	r2, [r3, #12]
    last_out = out;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8000842:	3318      	adds	r3, #24
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800084c:	331c      	adds	r3, #28
 800084e:	601a      	str	r2, [r3, #0]

}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <MX_DMA_Init+0x3c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a0b      	ldr	r2, [pc, #44]	; (8000898 <MX_DMA_Init+0x3c>)
 800086c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b09      	ldr	r3, [pc, #36]	; (8000898 <MX_DMA_Init+0x3c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2100      	movs	r1, #0
 8000882:	200f      	movs	r0, #15
 8000884:	f000 fcef 	bl	8001266 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000888:	200f      	movs	r0, #15
 800088a:	f000 fd08 	bl	800129e <HAL_NVIC_EnableIRQ>

}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40023800 	.word	0x40023800

0800089c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	4b17      	ldr	r3, [pc, #92]	; (8000904 <MX_GPIO_Init+0x68>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a16      	ldr	r2, [pc, #88]	; (8000904 <MX_GPIO_Init+0x68>)
 80008ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_GPIO_Init+0x68>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <MX_GPIO_Init+0x68>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a0f      	ldr	r2, [pc, #60]	; (8000904 <MX_GPIO_Init+0x68>)
 80008c8:	f043 0302 	orr.w	r3, r3, #2
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <MX_GPIO_Init+0x68>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_GPIO_Init+0x68>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a08      	ldr	r2, [pc, #32]	; (8000904 <MX_GPIO_Init+0x68>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_GPIO_Init+0x68>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]

}
 80008f6:	bf00      	nop
 80008f8:	3714      	adds	r7, #20
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800

08000908 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0

  hi2s2.Instance = SPI2;
 800090c:	4b13      	ldr	r3, [pc, #76]	; (800095c <MX_I2S2_Init+0x54>)
 800090e:	4a14      	ldr	r2, [pc, #80]	; (8000960 <MX_I2S2_Init+0x58>)
 8000910:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <MX_I2S2_Init+0x54>)
 8000914:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000918:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <MX_I2S2_Init+0x54>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000920:	4b0e      	ldr	r3, [pc, #56]	; (800095c <MX_I2S2_Init+0x54>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000926:	4b0d      	ldr	r3, [pc, #52]	; (800095c <MX_I2S2_Init+0x54>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800092c:	4b0b      	ldr	r3, [pc, #44]	; (800095c <MX_I2S2_Init+0x54>)
 800092e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000932:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_I2S2_Init+0x54>)
 8000936:	2200      	movs	r2, #0
 8000938:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <MX_I2S2_Init+0x54>)
 800093c:	2200      	movs	r2, #0
 800093e:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_I2S2_Init+0x54>)
 8000942:	2200      	movs	r2, #0
 8000944:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000946:	4805      	ldr	r0, [pc, #20]	; (800095c <MX_I2S2_Init+0x54>)
 8000948:	f001 f9b4 	bl	8001cb4 <HAL_I2S_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000952:	f000 f9d6 	bl	8000d02 <Error_Handler>
  }

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20001944 	.word	0x20001944
 8000960:	40003800 	.word	0x40003800

08000964 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08a      	sub	sp, #40	; 0x28
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a31      	ldr	r2, [pc, #196]	; (8000a48 <HAL_I2S_MspInit+0xe4>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d15c      	bne.n	8000a40 <HAL_I2S_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	4b30      	ldr	r3, [pc, #192]	; (8000a4c <HAL_I2S_MspInit+0xe8>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	4a2f      	ldr	r2, [pc, #188]	; (8000a4c <HAL_I2S_MspInit+0xe8>)
 8000990:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000994:	6413      	str	r3, [r2, #64]	; 0x40
 8000996:	4b2d      	ldr	r3, [pc, #180]	; (8000a4c <HAL_I2S_MspInit+0xe8>)
 8000998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	4b29      	ldr	r3, [pc, #164]	; (8000a4c <HAL_I2S_MspInit+0xe8>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a28      	ldr	r2, [pc, #160]	; (8000a4c <HAL_I2S_MspInit+0xe8>)
 80009ac:	f043 0302 	orr.w	r3, r3, #2
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b26      	ldr	r3, [pc, #152]	; (8000a4c <HAL_I2S_MspInit+0xe8>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0302 	and.w	r3, r3, #2
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80009be:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80009c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c4:	2302      	movs	r3, #2
 80009c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009d0:	2305      	movs	r3, #5
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	4619      	mov	r1, r3
 80009da:	481d      	ldr	r0, [pc, #116]	; (8000a50 <HAL_I2S_MspInit+0xec>)
 80009dc:	f000 ffe8 	bl	80019b0 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80009e0:	4b1c      	ldr	r3, [pc, #112]	; (8000a54 <HAL_I2S_MspInit+0xf0>)
 80009e2:	4a1d      	ldr	r2, [pc, #116]	; (8000a58 <HAL_I2S_MspInit+0xf4>)
 80009e4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80009e6:	4b1b      	ldr	r3, [pc, #108]	; (8000a54 <HAL_I2S_MspInit+0xf0>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009ec:	4b19      	ldr	r3, [pc, #100]	; (8000a54 <HAL_I2S_MspInit+0xf0>)
 80009ee:	2240      	movs	r2, #64	; 0x40
 80009f0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009f2:	4b18      	ldr	r3, [pc, #96]	; (8000a54 <HAL_I2S_MspInit+0xf0>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009f8:	4b16      	ldr	r3, [pc, #88]	; (8000a54 <HAL_I2S_MspInit+0xf0>)
 80009fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009fe:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <HAL_I2S_MspInit+0xf0>)
 8000a02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a06:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <HAL_I2S_MspInit+0xf0>)
 8000a0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a0e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000a10:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <HAL_I2S_MspInit+0xf0>)
 8000a12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a16:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a18:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <HAL_I2S_MspInit+0xf0>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <HAL_I2S_MspInit+0xf0>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000a24:	480b      	ldr	r0, [pc, #44]	; (8000a54 <HAL_I2S_MspInit+0xf0>)
 8000a26:	f000 fc55 	bl	80012d4 <HAL_DMA_Init>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <HAL_I2S_MspInit+0xd0>
    {
      Error_Handler();
 8000a30:	f000 f967 	bl	8000d02 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4a07      	ldr	r2, [pc, #28]	; (8000a54 <HAL_I2S_MspInit+0xf0>)
 8000a38:	639a      	str	r2, [r3, #56]	; 0x38
 8000a3a:	4a06      	ldr	r2, [pc, #24]	; (8000a54 <HAL_I2S_MspInit+0xf0>)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000a40:	bf00      	nop
 8000a42:	3728      	adds	r7, #40	; 0x28
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40003800 	.word	0x40003800
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40020400 	.word	0x40020400
 8000a54:	200018e4 	.word	0x200018e4
 8000a58:	40026070 	.word	0x40026070

08000a5c <_Z10make_soundt>:

uint16_t audiobuff[BUFF_LEN];

uint16_t once = 1;

void make_sound(uint16_t index) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	80fb      	strh	r3, [r7, #6]
	uint16_t threshold = index + BUFF_LEN_DIV2;
 8000a66:	88fb      	ldrh	r3, [r7, #6]
 8000a68:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000a6c:	81fb      	strh	r3, [r7, #14]

	while(index <= threshold ) {
 8000a6e:	88fa      	ldrh	r2, [r7, #6]
 8000a70:	89fb      	ldrh	r3, [r7, #14]
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d82f      	bhi.n	8000ad6 <_Z10make_soundt+0x7a>
		karplus.get_karplus(0.5f);
 8000a76:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8000a7a:	4819      	ldr	r0, [pc, #100]	; (8000ae0 <_Z10make_soundt+0x84>)
 8000a7c:	f7ff fe6e 	bl	800075c <_ZN7Karplus11get_karplusEf>
		audiobuff[index] = (uint16_t)(karplus.out * 30000.0f);
 8000a80:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <_Z10make_soundt+0x84>)
 8000a82:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8000a86:	3318      	adds	r3, #24
 8000a88:	edd3 7a00 	vldr	s15, [r3]
 8000a8c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000ae4 <_Z10make_soundt+0x88>
 8000a90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a94:	88fb      	ldrh	r3, [r7, #6]
 8000a96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a9a:	ee17 2a90 	vmov	r2, s15
 8000a9e:	b291      	uxth	r1, r2
 8000aa0:	4a11      	ldr	r2, [pc, #68]	; (8000ae8 <_Z10make_soundt+0x8c>)
 8000aa2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		audiobuff[index+1] = (uint16_t)(karplus.out * 30000.0f);
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <_Z10make_soundt+0x84>)
 8000aa8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8000aac:	3318      	adds	r3, #24
 8000aae:	edd3 7a00 	vldr	s15, [r3]
 8000ab2:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000ae4 <_Z10make_soundt+0x88>
 8000ab6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000aba:	88fb      	ldrh	r3, [r7, #6]
 8000abc:	3301      	adds	r3, #1
 8000abe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ac2:	ee17 2a90 	vmov	r2, s15
 8000ac6:	b291      	uxth	r1, r2
 8000ac8:	4a07      	ldr	r2, [pc, #28]	; (8000ae8 <_Z10make_soundt+0x8c>)
 8000aca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		index += 2;
 8000ace:	88fb      	ldrh	r3, [r7, #6]
 8000ad0:	3302      	adds	r3, #2
 8000ad2:	80fb      	strh	r3, [r7, #6]
	while(index <= threshold ) {
 8000ad4:	e7cb      	b.n	8000a6e <_Z10make_soundt+0x12>
	}
}
 8000ad6:	bf00      	nop
 8000ad8:	3710      	adds	r7, #16
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	2000008c 	.word	0x2000008c
 8000ae4:	46ea6000 	.word	0x46ea6000
 8000ae8:	200010d8 	.word	0x200010d8

08000aec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000af0:	f000 fa6c 	bl	8000fcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000af4:	f000 f842 	bl	8000b7c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000af8:	f7ff fed0 	bl	800089c <MX_GPIO_Init>
  MX_DMA_Init();
 8000afc:	f7ff feae 	bl	800085c <MX_DMA_Init>
  MX_I2S2_Init();
 8000b00:	f7ff ff02 	bl	8000908 <MX_I2S2_Init>
  MX_TIM10_Init();
 8000b04:	f000 f9ec 	bl	8000ee0 <MX_TIM10_Init>
//  MX_TIM10_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim10);
 8000b08:	4816      	ldr	r0, [pc, #88]	; (8000b64 <main+0x78>)
 8000b0a:	f002 fbe2 	bl	80032d2 <HAL_TIM_Base_Start_IT>
  HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t *)audiobuff, BUFF_LEN);
 8000b0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b12:	4915      	ldr	r1, [pc, #84]	; (8000b68 <main+0x7c>)
 8000b14:	4815      	ldr	r0, [pc, #84]	; (8000b6c <main+0x80>)
 8000b16:	f001 fa0d 	bl	8001f34 <HAL_I2S_Transmit_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(ms_cnt > 20000) {
 8000b1a:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <main+0x84>)
 8000b1c:	881b      	ldrh	r3, [r3, #0]
 8000b1e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d9f9      	bls.n	8000b1a <main+0x2e>
		  ms_cnt = 0;
 8000b26:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <main+0x84>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	801a      	strh	r2, [r3, #0]
		  karplus.restore_freq((float)(rand() % 100 + 50));
 8000b2c:	f002 fea8 	bl	8003880 <rand>
 8000b30:	4602      	mov	r2, r0
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <main+0x88>)
 8000b34:	fb83 1302 	smull	r1, r3, r3, r2
 8000b38:	1159      	asrs	r1, r3, #5
 8000b3a:	17d3      	asrs	r3, r2, #31
 8000b3c:	1acb      	subs	r3, r1, r3
 8000b3e:	2164      	movs	r1, #100	; 0x64
 8000b40:	fb01 f303 	mul.w	r3, r1, r3
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	3332      	adds	r3, #50	; 0x32
 8000b48:	ee07 3a90 	vmov	s15, r3
 8000b4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b54:	ee17 3a90 	vmov	r3, s15
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4806      	ldr	r0, [pc, #24]	; (8000b78 <main+0x8c>)
 8000b5e:	f7ff fd65 	bl	800062c <_ZN7Karplus12restore_freqEt>
	  if(ms_cnt > 20000) {
 8000b62:	e7da      	b.n	8000b1a <main+0x2e>
 8000b64:	2000198c 	.word	0x2000198c
 8000b68:	200010d8 	.word	0x200010d8
 8000b6c:	20001944 	.word	0x20001944
 8000b70:	200010d4 	.word	0x200010d4
 8000b74:	51eb851f 	.word	0x51eb851f
 8000b78:	2000008c 	.word	0x2000008c

08000b7c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b098      	sub	sp, #96	; 0x60
 8000b80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b82:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b86:	2230      	movs	r2, #48	; 0x30
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f002 fdc8 	bl	8003720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b90:	f107 031c 	add.w	r3, r7, #28
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ba0:	f107 0308 	add.w	r3, r7, #8
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	607b      	str	r3, [r7, #4]
 8000bb4:	4b38      	ldr	r3, [pc, #224]	; (8000c98 <_Z18SystemClock_Configv+0x11c>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb8:	4a37      	ldr	r2, [pc, #220]	; (8000c98 <_Z18SystemClock_Configv+0x11c>)
 8000bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc0:	4b35      	ldr	r3, [pc, #212]	; (8000c98 <_Z18SystemClock_Configv+0x11c>)
 8000bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc8:	607b      	str	r3, [r7, #4]
 8000bca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000bcc:	2300      	movs	r3, #0
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	4b32      	ldr	r3, [pc, #200]	; (8000c9c <_Z18SystemClock_Configv+0x120>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bd8:	4a30      	ldr	r2, [pc, #192]	; (8000c9c <_Z18SystemClock_Configv+0x120>)
 8000bda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bde:	6013      	str	r3, [r2, #0]
 8000be0:	4b2e      	ldr	r3, [pc, #184]	; (8000c9c <_Z18SystemClock_Configv+0x120>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bec:	2301      	movs	r3, #1
 8000bee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bf0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bf4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bfa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c00:	2319      	movs	r3, #25
 8000c02:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c04:	23a8      	movs	r3, #168	; 0xa8
 8000c06:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c0c:	2304      	movs	r3, #4
 8000c0e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c14:	4618      	mov	r0, r3
 8000c16:	f001 fddf 	bl	80027d8 <HAL_RCC_OscConfig>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	bf14      	ite	ne
 8000c20:	2301      	movne	r3, #1
 8000c22:	2300      	moveq	r3, #0
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <_Z18SystemClock_Configv+0xb2>
  {
    Error_Handler();
 8000c2a:	f000 f86a 	bl	8000d02 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c2e:	230f      	movs	r3, #15
 8000c30:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c32:	2302      	movs	r3, #2
 8000c34:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c36:	2300      	movs	r3, #0
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c44:	f107 031c 	add.w	r3, r7, #28
 8000c48:	2102      	movs	r1, #2
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f002 f834 	bl	8002cb8 <HAL_RCC_ClockConfig>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	bf14      	ite	ne
 8000c56:	2301      	movne	r3, #1
 8000c58:	2300      	moveq	r3, #0
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <_Z18SystemClock_Configv+0xe8>
  {
    Error_Handler();
 8000c60:	f000 f84f 	bl	8000d02 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000c64:	2301      	movs	r3, #1
 8000c66:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000c68:	23c0      	movs	r3, #192	; 0xc0
 8000c6a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c70:	f107 0308 	add.w	r3, r7, #8
 8000c74:	4618      	mov	r0, r3
 8000c76:	f002 f9b7 	bl	8002fe8 <HAL_RCCEx_PeriphCLKConfig>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	bf14      	ite	ne
 8000c80:	2301      	movne	r3, #1
 8000c82:	2300      	moveq	r3, #0
 8000c84:	b2db      	uxtb	r3, r3
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <_Z18SystemClock_Configv+0x112>
  {
    Error_Handler();
 8000c8a:	f000 f83a 	bl	8000d02 <Error_Handler>
  }
}
 8000c8e:	bf00      	nop
 8000c90:	3760      	adds	r7, #96	; 0x60
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40007000 	.word	0x40007000

08000ca0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM10){
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a07      	ldr	r2, [pc, #28]	; (8000ccc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d105      	bne.n	8000cbe <HAL_TIM_PeriodElapsedCallback+0x1e>
		ms_cnt++;
 8000cb2:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000cb4:	881b      	ldrh	r3, [r3, #0]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	b29a      	uxth	r2, r3
 8000cba:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000cbc:	801a      	strh	r2, [r3, #0]

	}
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	40014400 	.word	0x40014400
 8000cd0:	200010d4 	.word	0x200010d4

08000cd4 <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  make_sound(0);
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f7ff febd 	bl	8000a5c <_Z10make_soundt>
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
  make_sound(BUFF_LEN_DIV2);
 8000cf2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000cf6:	f7ff feb1 	bl	8000a5c <_Z10make_soundt>
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <_Z41__static_initialization_and_destruction_0ii>:
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d107      	bne.n	8000d30 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d102      	bne.n	8000d30 <_Z41__static_initialization_and_destruction_0ii+0x20>
Karplus karplus;
 8000d2a:	4809      	ldr	r0, [pc, #36]	; (8000d50 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000d2c:	f7ff fbd2 	bl	80004d4 <_ZN7KarplusC1Ev>
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d107      	bne.n	8000d46 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d102      	bne.n	8000d46 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000d40:	4803      	ldr	r0, [pc, #12]	; (8000d50 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000d42:	f7ff fc51 	bl	80005e8 <_ZN7KarplusD1Ev>
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	2000008c 	.word	0x2000008c

08000d54 <_GLOBAL__sub_I_karplus>:
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	f7ff ffd7 	bl	8000d10 <_Z41__static_initialization_and_destruction_0ii>
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <_GLOBAL__sub_D_karplus>:
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	f7ff ffcf 	bl	8000d10 <_Z41__static_initialization_and_destruction_0ii>
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d82:	4a0f      	ldr	r2, [pc, #60]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d88:	6453      	str	r3, [r2, #68]	; 0x44
 8000d8a:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	603b      	str	r3, [r7, #0]
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	4a08      	ldr	r2, [pc, #32]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da4:	6413      	str	r3, [r2, #64]	; 0x40
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_MspInit+0x4c>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dae:	603b      	str	r3, [r7, #0]
 8000db0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	40023800 	.word	0x40023800

08000dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <HardFault_Handler+0x4>

08000dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <MemManage_Handler+0x4>

08000dde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <BusFault_Handler+0x4>

08000de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <UsageFault_Handler+0x4>

08000dea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e18:	f000 f92a 	bl	8001070 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000e24:	4802      	ldr	r0, [pc, #8]	; (8000e30 <DMA1_Stream4_IRQHandler+0x10>)
 8000e26:	f000 fb5b 	bl	80014e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200018e4 	.word	0x200018e4

08000e34 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000e38:	4802      	ldr	r0, [pc, #8]	; (8000e44 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000e3a:	f002 fa6e 	bl	800331a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	2000198c 	.word	0x2000198c

08000e48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e50:	4a14      	ldr	r2, [pc, #80]	; (8000ea4 <_sbrk+0x5c>)
 8000e52:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <_sbrk+0x60>)
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e5c:	4b13      	ldr	r3, [pc, #76]	; (8000eac <_sbrk+0x64>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d102      	bne.n	8000e6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e64:	4b11      	ldr	r3, [pc, #68]	; (8000eac <_sbrk+0x64>)
 8000e66:	4a12      	ldr	r2, [pc, #72]	; (8000eb0 <_sbrk+0x68>)
 8000e68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e6a:	4b10      	ldr	r3, [pc, #64]	; (8000eac <_sbrk+0x64>)
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4413      	add	r3, r2
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d207      	bcs.n	8000e88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e78:	f002 fc18 	bl	80036ac <__errno>
 8000e7c:	4602      	mov	r2, r0
 8000e7e:	230c      	movs	r3, #12
 8000e80:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e86:	e009      	b.n	8000e9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e88:	4b08      	ldr	r3, [pc, #32]	; (8000eac <_sbrk+0x64>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e8e:	4b07      	ldr	r3, [pc, #28]	; (8000eac <_sbrk+0x64>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	4a05      	ldr	r2, [pc, #20]	; (8000eac <_sbrk+0x64>)
 8000e98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3718      	adds	r7, #24
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20010000 	.word	0x20010000
 8000ea8:	00000400 	.word	0x00000400
 8000eac:	200018d8 	.word	0x200018d8
 8000eb0:	200019d8 	.word	0x200019d8

08000eb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <SystemInit+0x28>)
 8000eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ebe:	4a07      	ldr	r2, [pc, #28]	; (8000edc <SystemInit+0x28>)
 8000ec0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ec4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ec8:	4b04      	ldr	r3, [pc, #16]	; (8000edc <SystemInit+0x28>)
 8000eca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ece:	609a      	str	r2, [r3, #8]
#endif
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	e000ed00 	.word	0xe000ed00

08000ee0 <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0

  htim10.Instance = TIM10;
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <MX_TIM10_Init+0x40>)
 8000ee6:	4a0f      	ldr	r2, [pc, #60]	; (8000f24 <MX_TIM10_Init+0x44>)
 8000ee8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8000eea:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <MX_TIM10_Init+0x40>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	; (8000f20 <MX_TIM10_Init+0x40>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8400-1;
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <MX_TIM10_Init+0x40>)
 8000ef8:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000efc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000efe:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <MX_TIM10_Init+0x40>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <MX_TIM10_Init+0x40>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000f0a:	4805      	ldr	r0, [pc, #20]	; (8000f20 <MX_TIM10_Init+0x40>)
 8000f0c:	f002 f9b6 	bl	800327c <HAL_TIM_Base_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8000f16:	f7ff fef4 	bl	8000d02 <Error_Handler>
  }

}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	2000198c 	.word	0x2000198c
 8000f24:	40014400 	.word	0x40014400

08000f28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a0e      	ldr	r2, [pc, #56]	; (8000f70 <HAL_TIM_Base_MspInit+0x48>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d115      	bne.n	8000f66 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <HAL_TIM_Base_MspInit+0x4c>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	4a0c      	ldr	r2, [pc, #48]	; (8000f74 <HAL_TIM_Base_MspInit+0x4c>)
 8000f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f48:	6453      	str	r3, [r2, #68]	; 0x44
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <HAL_TIM_Base_MspInit+0x4c>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2100      	movs	r1, #0
 8000f5a:	2019      	movs	r0, #25
 8000f5c:	f000 f983 	bl	8001266 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000f60:	2019      	movs	r0, #25
 8000f62:	f000 f99c 	bl	800129e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40014400 	.word	0x40014400
 8000f74:	40023800 	.word	0x40023800

08000f78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fb0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f7e:	e003      	b.n	8000f88 <LoopCopyDataInit>

08000f80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f86:	3104      	adds	r1, #4

08000f88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f88:	480b      	ldr	r0, [pc, #44]	; (8000fb8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f90:	d3f6      	bcc.n	8000f80 <CopyDataInit>
  ldr  r2, =_sbss
 8000f92:	4a0b      	ldr	r2, [pc, #44]	; (8000fc0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f94:	e002      	b.n	8000f9c <LoopFillZerobss>

08000f96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f98:	f842 3b04 	str.w	r3, [r2], #4

08000f9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f9c:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fa0:	d3f9      	bcc.n	8000f96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fa2:	f7ff ff87 	bl	8000eb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fa6:	f002 fb87 	bl	80036b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000faa:	f7ff fd9f 	bl	8000aec <main>
  bx  lr    
 8000fae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fb0:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8000fb4:	08003964 	.word	0x08003964
  ldr  r0, =_sdata
 8000fb8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fbc:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000fc0:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000fc4:	200019d4 	.word	0x200019d4

08000fc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fc8:	e7fe      	b.n	8000fc8 <ADC_IRQHandler>
	...

08000fcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fd0:	4b0e      	ldr	r3, [pc, #56]	; (800100c <HAL_Init+0x40>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a0d      	ldr	r2, [pc, #52]	; (800100c <HAL_Init+0x40>)
 8000fd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fdc:	4b0b      	ldr	r3, [pc, #44]	; (800100c <HAL_Init+0x40>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a0a      	ldr	r2, [pc, #40]	; (800100c <HAL_Init+0x40>)
 8000fe2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fe6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe8:	4b08      	ldr	r3, [pc, #32]	; (800100c <HAL_Init+0x40>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a07      	ldr	r2, [pc, #28]	; (800100c <HAL_Init+0x40>)
 8000fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ff2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff4:	2003      	movs	r0, #3
 8000ff6:	f000 f92b 	bl	8001250 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f000 f808 	bl	8001010 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001000:	f7ff feb8 	bl	8000d74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40023c00 	.word	0x40023c00

08001010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <HAL_InitTick+0x54>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <HAL_InitTick+0x58>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	4619      	mov	r1, r3
 8001022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001026:	fbb3 f3f1 	udiv	r3, r3, r1
 800102a:	fbb2 f3f3 	udiv	r3, r2, r3
 800102e:	4618      	mov	r0, r3
 8001030:	f000 f943 	bl	80012ba <HAL_SYSTICK_Config>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
 800103c:	e00e      	b.n	800105c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2b0f      	cmp	r3, #15
 8001042:	d80a      	bhi.n	800105a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001044:	2200      	movs	r2, #0
 8001046:	6879      	ldr	r1, [r7, #4]
 8001048:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800104c:	f000 f90b 	bl	8001266 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001050:	4a06      	ldr	r2, [pc, #24]	; (800106c <HAL_InitTick+0x5c>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001056:	2300      	movs	r3, #0
 8001058:	e000      	b.n	800105c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
}
 800105c:	4618      	mov	r0, r3
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	20000000 	.word	0x20000000
 8001068:	20000008 	.word	0x20000008
 800106c:	20000004 	.word	0x20000004

08001070 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_IncTick+0x20>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	461a      	mov	r2, r3
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_IncTick+0x24>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4413      	add	r3, r2
 8001080:	4a04      	ldr	r2, [pc, #16]	; (8001094 <HAL_IncTick+0x24>)
 8001082:	6013      	str	r3, [r2, #0]
}
 8001084:	bf00      	nop
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	20000008 	.word	0x20000008
 8001094:	200019cc 	.word	0x200019cc

08001098 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return uwTick;
 800109c:	4b03      	ldr	r3, [pc, #12]	; (80010ac <HAL_GetTick+0x14>)
 800109e:	681b      	ldr	r3, [r3, #0]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	200019cc 	.word	0x200019cc

080010b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010c0:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <__NVIC_SetPriorityGrouping+0x44>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010cc:	4013      	ands	r3, r2
 80010ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010e2:	4a04      	ldr	r2, [pc, #16]	; (80010f4 <__NVIC_SetPriorityGrouping+0x44>)
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	60d3      	str	r3, [r2, #12]
}
 80010e8:	bf00      	nop
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	e000ed00 	.word	0xe000ed00

080010f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010fc:	4b04      	ldr	r3, [pc, #16]	; (8001110 <__NVIC_GetPriorityGrouping+0x18>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	0a1b      	lsrs	r3, r3, #8
 8001102:	f003 0307 	and.w	r3, r3, #7
}
 8001106:	4618      	mov	r0, r3
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001122:	2b00      	cmp	r3, #0
 8001124:	db0b      	blt.n	800113e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	f003 021f 	and.w	r2, r3, #31
 800112c:	4907      	ldr	r1, [pc, #28]	; (800114c <__NVIC_EnableIRQ+0x38>)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	095b      	lsrs	r3, r3, #5
 8001134:	2001      	movs	r0, #1
 8001136:	fa00 f202 	lsl.w	r2, r0, r2
 800113a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000e100 	.word	0xe000e100

08001150 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	6039      	str	r1, [r7, #0]
 800115a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800115c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001160:	2b00      	cmp	r3, #0
 8001162:	db0a      	blt.n	800117a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	b2da      	uxtb	r2, r3
 8001168:	490c      	ldr	r1, [pc, #48]	; (800119c <__NVIC_SetPriority+0x4c>)
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	0112      	lsls	r2, r2, #4
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	440b      	add	r3, r1
 8001174:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001178:	e00a      	b.n	8001190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4908      	ldr	r1, [pc, #32]	; (80011a0 <__NVIC_SetPriority+0x50>)
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	f003 030f 	and.w	r3, r3, #15
 8001186:	3b04      	subs	r3, #4
 8001188:	0112      	lsls	r2, r2, #4
 800118a:	b2d2      	uxtb	r2, r2
 800118c:	440b      	add	r3, r1
 800118e:	761a      	strb	r2, [r3, #24]
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000e100 	.word	0xe000e100
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b089      	sub	sp, #36	; 0x24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	f003 0307 	and.w	r3, r3, #7
 80011b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	f1c3 0307 	rsb	r3, r3, #7
 80011be:	2b04      	cmp	r3, #4
 80011c0:	bf28      	it	cs
 80011c2:	2304      	movcs	r3, #4
 80011c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	3304      	adds	r3, #4
 80011ca:	2b06      	cmp	r3, #6
 80011cc:	d902      	bls.n	80011d4 <NVIC_EncodePriority+0x30>
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	3b03      	subs	r3, #3
 80011d2:	e000      	b.n	80011d6 <NVIC_EncodePriority+0x32>
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	fa02 f303 	lsl.w	r3, r2, r3
 80011e2:	43da      	mvns	r2, r3
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	401a      	ands	r2, r3
 80011e8:	697b      	ldr	r3, [r7, #20]
 80011ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	fa01 f303 	lsl.w	r3, r1, r3
 80011f6:	43d9      	mvns	r1, r3
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011fc:	4313      	orrs	r3, r2
         );
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3724      	adds	r7, #36	; 0x24
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
	...

0800120c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	3b01      	subs	r3, #1
 8001218:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800121c:	d301      	bcc.n	8001222 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800121e:	2301      	movs	r3, #1
 8001220:	e00f      	b.n	8001242 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001222:	4a0a      	ldr	r2, [pc, #40]	; (800124c <SysTick_Config+0x40>)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3b01      	subs	r3, #1
 8001228:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800122a:	210f      	movs	r1, #15
 800122c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001230:	f7ff ff8e 	bl	8001150 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <SysTick_Config+0x40>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800123a:	4b04      	ldr	r3, [pc, #16]	; (800124c <SysTick_Config+0x40>)
 800123c:	2207      	movs	r2, #7
 800123e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001240:	2300      	movs	r3, #0
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	e000e010 	.word	0xe000e010

08001250 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f7ff ff29 	bl	80010b0 <__NVIC_SetPriorityGrouping>
}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001266:	b580      	push	{r7, lr}
 8001268:	b086      	sub	sp, #24
 800126a:	af00      	add	r7, sp, #0
 800126c:	4603      	mov	r3, r0
 800126e:	60b9      	str	r1, [r7, #8]
 8001270:	607a      	str	r2, [r7, #4]
 8001272:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001278:	f7ff ff3e 	bl	80010f8 <__NVIC_GetPriorityGrouping>
 800127c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	68b9      	ldr	r1, [r7, #8]
 8001282:	6978      	ldr	r0, [r7, #20]
 8001284:	f7ff ff8e 	bl	80011a4 <NVIC_EncodePriority>
 8001288:	4602      	mov	r2, r0
 800128a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800128e:	4611      	mov	r1, r2
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff ff5d 	bl	8001150 <__NVIC_SetPriority>
}
 8001296:	bf00      	nop
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	4603      	mov	r3, r0
 80012a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff31 	bl	8001114 <__NVIC_EnableIRQ>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff ffa2 	bl	800120c <SysTick_Config>
 80012c8:	4603      	mov	r3, r0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80012e0:	f7ff feda 	bl	8001098 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d101      	bne.n	80012f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e099      	b.n	8001424 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2202      	movs	r2, #2
 80012fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f022 0201 	bic.w	r2, r2, #1
 800130e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001310:	e00f      	b.n	8001332 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001312:	f7ff fec1 	bl	8001098 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b05      	cmp	r3, #5
 800131e:	d908      	bls.n	8001332 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2220      	movs	r2, #32
 8001324:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2203      	movs	r2, #3
 800132a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e078      	b.n	8001424 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1e8      	bne.n	8001312 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001348:	697a      	ldr	r2, [r7, #20]
 800134a:	4b38      	ldr	r3, [pc, #224]	; (800142c <HAL_DMA_Init+0x158>)
 800134c:	4013      	ands	r3, r2
 800134e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800135e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800136a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001376:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800137e:	697a      	ldr	r2, [r7, #20]
 8001380:	4313      	orrs	r3, r2
 8001382:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001388:	2b04      	cmp	r3, #4
 800138a:	d107      	bne.n	800139c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001394:	4313      	orrs	r3, r2
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	4313      	orrs	r3, r2
 800139a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	697a      	ldr	r2, [r7, #20]
 80013a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	f023 0307 	bic.w	r3, r3, #7
 80013b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b8:	697a      	ldr	r2, [r7, #20]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c2:	2b04      	cmp	r3, #4
 80013c4:	d117      	bne.n	80013f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d00e      	beq.n	80013f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f000 fa6f 	bl	80018bc <DMA_CheckFifoParam>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d008      	beq.n	80013f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2240      	movs	r2, #64	; 0x40
 80013e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2201      	movs	r2, #1
 80013ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80013f2:	2301      	movs	r3, #1
 80013f4:	e016      	b.n	8001424 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f000 fa26 	bl	8001850 <DMA_CalcBaseAndBitshift>
 8001404:	4603      	mov	r3, r0
 8001406:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800140c:	223f      	movs	r2, #63	; 0x3f
 800140e:	409a      	lsls	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2201      	movs	r2, #1
 800141e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001422:	2300      	movs	r3, #0
}
 8001424:	4618      	mov	r0, r3
 8001426:	3718      	adds	r7, #24
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	f010803f 	.word	0xf010803f

08001430 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
 800143c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800143e:	2300      	movs	r3, #0
 8001440:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001446:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800144e:	2b01      	cmp	r3, #1
 8001450:	d101      	bne.n	8001456 <HAL_DMA_Start_IT+0x26>
 8001452:	2302      	movs	r3, #2
 8001454:	e040      	b.n	80014d8 <HAL_DMA_Start_IT+0xa8>
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2201      	movs	r2, #1
 800145a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b01      	cmp	r3, #1
 8001468:	d12f      	bne.n	80014ca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2202      	movs	r2, #2
 800146e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2200      	movs	r2, #0
 8001476:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	68b9      	ldr	r1, [r7, #8]
 800147e:	68f8      	ldr	r0, [r7, #12]
 8001480:	f000 f9b8 	bl	80017f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001488:	223f      	movs	r2, #63	; 0x3f
 800148a:	409a      	lsls	r2, r3
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f042 0216 	orr.w	r2, r2, #22
 800149e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d007      	beq.n	80014b8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f042 0208 	orr.w	r2, r2, #8
 80014b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f042 0201 	orr.w	r2, r2, #1
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	e005      	b.n	80014d6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80014d2:	2302      	movs	r3, #2
 80014d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80014d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b086      	sub	sp, #24
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80014e8:	2300      	movs	r3, #0
 80014ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80014ec:	4b92      	ldr	r3, [pc, #584]	; (8001738 <HAL_DMA_IRQHandler+0x258>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a92      	ldr	r2, [pc, #584]	; (800173c <HAL_DMA_IRQHandler+0x25c>)
 80014f2:	fba2 2303 	umull	r2, r3, r2, r3
 80014f6:	0a9b      	lsrs	r3, r3, #10
 80014f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800150a:	2208      	movs	r2, #8
 800150c:	409a      	lsls	r2, r3
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	4013      	ands	r3, r2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d01a      	beq.n	800154c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0304 	and.w	r3, r3, #4
 8001520:	2b00      	cmp	r3, #0
 8001522:	d013      	beq.n	800154c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f022 0204 	bic.w	r2, r2, #4
 8001532:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001538:	2208      	movs	r2, #8
 800153a:	409a      	lsls	r2, r3
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001544:	f043 0201 	orr.w	r2, r3, #1
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001550:	2201      	movs	r2, #1
 8001552:	409a      	lsls	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4013      	ands	r3, r2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d012      	beq.n	8001582 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	695b      	ldr	r3, [r3, #20]
 8001562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001566:	2b00      	cmp	r3, #0
 8001568:	d00b      	beq.n	8001582 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800156e:	2201      	movs	r2, #1
 8001570:	409a      	lsls	r2, r3
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800157a:	f043 0202 	orr.w	r2, r3, #2
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001586:	2204      	movs	r2, #4
 8001588:	409a      	lsls	r2, r3
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	4013      	ands	r3, r2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d012      	beq.n	80015b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00b      	beq.n	80015b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a4:	2204      	movs	r2, #4
 80015a6:	409a      	lsls	r2, r3
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b0:	f043 0204 	orr.w	r2, r3, #4
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015bc:	2210      	movs	r2, #16
 80015be:	409a      	lsls	r2, r3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4013      	ands	r3, r2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d043      	beq.n	8001650 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0308 	and.w	r3, r3, #8
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d03c      	beq.n	8001650 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015da:	2210      	movs	r2, #16
 80015dc:	409a      	lsls	r2, r3
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d018      	beq.n	8001622 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d108      	bne.n	8001610 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	2b00      	cmp	r3, #0
 8001604:	d024      	beq.n	8001650 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	4798      	blx	r3
 800160e:	e01f      	b.n	8001650 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001614:	2b00      	cmp	r3, #0
 8001616:	d01b      	beq.n	8001650 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	4798      	blx	r3
 8001620:	e016      	b.n	8001650 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800162c:	2b00      	cmp	r3, #0
 800162e:	d107      	bne.n	8001640 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 0208 	bic.w	r2, r2, #8
 800163e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001644:	2b00      	cmp	r3, #0
 8001646:	d003      	beq.n	8001650 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001654:	2220      	movs	r2, #32
 8001656:	409a      	lsls	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	4013      	ands	r3, r2
 800165c:	2b00      	cmp	r3, #0
 800165e:	f000 808e 	beq.w	800177e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 0310 	and.w	r3, r3, #16
 800166c:	2b00      	cmp	r3, #0
 800166e:	f000 8086 	beq.w	800177e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001676:	2220      	movs	r2, #32
 8001678:	409a      	lsls	r2, r3
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b05      	cmp	r3, #5
 8001688:	d136      	bne.n	80016f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 0216 	bic.w	r2, r2, #22
 8001698:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	695a      	ldr	r2, [r3, #20]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d103      	bne.n	80016ba <HAL_DMA_IRQHandler+0x1da>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d007      	beq.n	80016ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 0208 	bic.w	r2, r2, #8
 80016c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ce:	223f      	movs	r2, #63	; 0x3f
 80016d0:	409a      	lsls	r2, r3
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d07d      	beq.n	80017ea <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016f2:	6878      	ldr	r0, [r7, #4]
 80016f4:	4798      	blx	r3
        }
        return;
 80016f6:	e078      	b.n	80017ea <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d01c      	beq.n	8001740 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001710:	2b00      	cmp	r3, #0
 8001712:	d108      	bne.n	8001726 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001718:	2b00      	cmp	r3, #0
 800171a:	d030      	beq.n	800177e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	4798      	blx	r3
 8001724:	e02b      	b.n	800177e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800172a:	2b00      	cmp	r3, #0
 800172c:	d027      	beq.n	800177e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	4798      	blx	r3
 8001736:	e022      	b.n	800177e <HAL_DMA_IRQHandler+0x29e>
 8001738:	20000000 	.word	0x20000000
 800173c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800174a:	2b00      	cmp	r3, #0
 800174c:	d10f      	bne.n	800176e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 0210 	bic.w	r2, r2, #16
 800175c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2201      	movs	r2, #1
 800176a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001782:	2b00      	cmp	r3, #0
 8001784:	d032      	beq.n	80017ec <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	2b00      	cmp	r3, #0
 8001790:	d022      	beq.n	80017d8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2205      	movs	r2, #5
 8001796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 0201 	bic.w	r2, r2, #1
 80017a8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	3301      	adds	r3, #1
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	697a      	ldr	r2, [r7, #20]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	d307      	bcc.n	80017c6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1f2      	bne.n	80017aa <HAL_DMA_IRQHandler+0x2ca>
 80017c4:	e000      	b.n	80017c8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80017c6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d005      	beq.n	80017ec <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	4798      	blx	r3
 80017e8:	e000      	b.n	80017ec <HAL_DMA_IRQHandler+0x30c>
        return;
 80017ea:	bf00      	nop
    }
  }
}
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop

080017f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
 8001800:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001810:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	2b40      	cmp	r3, #64	; 0x40
 8001820:	d108      	bne.n	8001834 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001832:	e007      	b.n	8001844 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	68ba      	ldr	r2, [r7, #8]
 800183a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	60da      	str	r2, [r3, #12]
}
 8001844:	bf00      	nop
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	b2db      	uxtb	r3, r3
 800185e:	3b10      	subs	r3, #16
 8001860:	4a14      	ldr	r2, [pc, #80]	; (80018b4 <DMA_CalcBaseAndBitshift+0x64>)
 8001862:	fba2 2303 	umull	r2, r3, r2, r3
 8001866:	091b      	lsrs	r3, r3, #4
 8001868:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800186a:	4a13      	ldr	r2, [pc, #76]	; (80018b8 <DMA_CalcBaseAndBitshift+0x68>)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4413      	add	r3, r2
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	461a      	mov	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2b03      	cmp	r3, #3
 800187c:	d909      	bls.n	8001892 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001886:	f023 0303 	bic.w	r3, r3, #3
 800188a:	1d1a      	adds	r2, r3, #4
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	659a      	str	r2, [r3, #88]	; 0x58
 8001890:	e007      	b.n	80018a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800189a:	f023 0303 	bic.w	r3, r3, #3
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	aaaaaaab 	.word	0xaaaaaaab
 80018b8:	08003944 	.word	0x08003944

080018bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018c4:	2300      	movs	r3, #0
 80018c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d11f      	bne.n	8001916 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	2b03      	cmp	r3, #3
 80018da:	d855      	bhi.n	8001988 <DMA_CheckFifoParam+0xcc>
 80018dc:	a201      	add	r2, pc, #4	; (adr r2, 80018e4 <DMA_CheckFifoParam+0x28>)
 80018de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e2:	bf00      	nop
 80018e4:	080018f5 	.word	0x080018f5
 80018e8:	08001907 	.word	0x08001907
 80018ec:	080018f5 	.word	0x080018f5
 80018f0:	08001989 	.word	0x08001989
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d045      	beq.n	800198c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001904:	e042      	b.n	800198c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800190e:	d13f      	bne.n	8001990 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001914:	e03c      	b.n	8001990 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800191e:	d121      	bne.n	8001964 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	2b03      	cmp	r3, #3
 8001924:	d836      	bhi.n	8001994 <DMA_CheckFifoParam+0xd8>
 8001926:	a201      	add	r2, pc, #4	; (adr r2, 800192c <DMA_CheckFifoParam+0x70>)
 8001928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800192c:	0800193d 	.word	0x0800193d
 8001930:	08001943 	.word	0x08001943
 8001934:	0800193d 	.word	0x0800193d
 8001938:	08001955 	.word	0x08001955
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	73fb      	strb	r3, [r7, #15]
      break;
 8001940:	e02f      	b.n	80019a2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001946:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d024      	beq.n	8001998 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001952:	e021      	b.n	8001998 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001958:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800195c:	d11e      	bne.n	800199c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001962:	e01b      	b.n	800199c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	2b02      	cmp	r3, #2
 8001968:	d902      	bls.n	8001970 <DMA_CheckFifoParam+0xb4>
 800196a:	2b03      	cmp	r3, #3
 800196c:	d003      	beq.n	8001976 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800196e:	e018      	b.n	80019a2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	73fb      	strb	r3, [r7, #15]
      break;
 8001974:	e015      	b.n	80019a2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d00e      	beq.n	80019a0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	73fb      	strb	r3, [r7, #15]
      break;
 8001986:	e00b      	b.n	80019a0 <DMA_CheckFifoParam+0xe4>
      break;
 8001988:	bf00      	nop
 800198a:	e00a      	b.n	80019a2 <DMA_CheckFifoParam+0xe6>
      break;
 800198c:	bf00      	nop
 800198e:	e008      	b.n	80019a2 <DMA_CheckFifoParam+0xe6>
      break;
 8001990:	bf00      	nop
 8001992:	e006      	b.n	80019a2 <DMA_CheckFifoParam+0xe6>
      break;
 8001994:	bf00      	nop
 8001996:	e004      	b.n	80019a2 <DMA_CheckFifoParam+0xe6>
      break;
 8001998:	bf00      	nop
 800199a:	e002      	b.n	80019a2 <DMA_CheckFifoParam+0xe6>
      break;   
 800199c:	bf00      	nop
 800199e:	e000      	b.n	80019a2 <DMA_CheckFifoParam+0xe6>
      break;
 80019a0:	bf00      	nop
    }
  } 
  
  return status; 
 80019a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b089      	sub	sp, #36	; 0x24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019be:	2300      	movs	r3, #0
 80019c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019c6:	2300      	movs	r3, #0
 80019c8:	61fb      	str	r3, [r7, #28]
 80019ca:	e159      	b.n	8001c80 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019cc:	2201      	movs	r2, #1
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	697a      	ldr	r2, [r7, #20]
 80019dc:	4013      	ands	r3, r2
 80019de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	f040 8148 	bne.w	8001c7a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d00b      	beq.n	8001a0a <HAL_GPIO_Init+0x5a>
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d007      	beq.n	8001a0a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019fe:	2b11      	cmp	r3, #17
 8001a00:	d003      	beq.n	8001a0a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b12      	cmp	r3, #18
 8001a08:	d130      	bne.n	8001a6c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	2203      	movs	r2, #3
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	68da      	ldr	r2, [r3, #12]
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a40:	2201      	movs	r2, #1
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	091b      	lsrs	r3, r3, #4
 8001a56:	f003 0201 	and.w	r2, r3, #1
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	2203      	movs	r2, #3
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	689a      	ldr	r2, [r3, #8]
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d003      	beq.n	8001aac <HAL_GPIO_Init+0xfc>
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b12      	cmp	r3, #18
 8001aaa:	d123      	bne.n	8001af4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	08da      	lsrs	r2, r3, #3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3208      	adds	r2, #8
 8001ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	220f      	movs	r2, #15
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	691a      	ldr	r2, [r3, #16]
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	08da      	lsrs	r2, r3, #3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3208      	adds	r2, #8
 8001aee:	69b9      	ldr	r1, [r7, #24]
 8001af0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	2203      	movs	r2, #3
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f003 0203 	and.w	r2, r3, #3
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 80a2 	beq.w	8001c7a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	4b56      	ldr	r3, [pc, #344]	; (8001c94 <HAL_GPIO_Init+0x2e4>)
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3e:	4a55      	ldr	r2, [pc, #340]	; (8001c94 <HAL_GPIO_Init+0x2e4>)
 8001b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b44:	6453      	str	r3, [r2, #68]	; 0x44
 8001b46:	4b53      	ldr	r3, [pc, #332]	; (8001c94 <HAL_GPIO_Init+0x2e4>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b4e:	60fb      	str	r3, [r7, #12]
 8001b50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b52:	4a51      	ldr	r2, [pc, #324]	; (8001c98 <HAL_GPIO_Init+0x2e8>)
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	089b      	lsrs	r3, r3, #2
 8001b58:	3302      	adds	r3, #2
 8001b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	220f      	movs	r2, #15
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43db      	mvns	r3, r3
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	4013      	ands	r3, r2
 8001b74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a48      	ldr	r2, [pc, #288]	; (8001c9c <HAL_GPIO_Init+0x2ec>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d019      	beq.n	8001bb2 <HAL_GPIO_Init+0x202>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4a47      	ldr	r2, [pc, #284]	; (8001ca0 <HAL_GPIO_Init+0x2f0>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d013      	beq.n	8001bae <HAL_GPIO_Init+0x1fe>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a46      	ldr	r2, [pc, #280]	; (8001ca4 <HAL_GPIO_Init+0x2f4>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d00d      	beq.n	8001baa <HAL_GPIO_Init+0x1fa>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a45      	ldr	r2, [pc, #276]	; (8001ca8 <HAL_GPIO_Init+0x2f8>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d007      	beq.n	8001ba6 <HAL_GPIO_Init+0x1f6>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a44      	ldr	r2, [pc, #272]	; (8001cac <HAL_GPIO_Init+0x2fc>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d101      	bne.n	8001ba2 <HAL_GPIO_Init+0x1f2>
 8001b9e:	2304      	movs	r3, #4
 8001ba0:	e008      	b.n	8001bb4 <HAL_GPIO_Init+0x204>
 8001ba2:	2307      	movs	r3, #7
 8001ba4:	e006      	b.n	8001bb4 <HAL_GPIO_Init+0x204>
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e004      	b.n	8001bb4 <HAL_GPIO_Init+0x204>
 8001baa:	2302      	movs	r3, #2
 8001bac:	e002      	b.n	8001bb4 <HAL_GPIO_Init+0x204>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <HAL_GPIO_Init+0x204>
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	69fa      	ldr	r2, [r7, #28]
 8001bb6:	f002 0203 	and.w	r2, r2, #3
 8001bba:	0092      	lsls	r2, r2, #2
 8001bbc:	4093      	lsls	r3, r2
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bc4:	4934      	ldr	r1, [pc, #208]	; (8001c98 <HAL_GPIO_Init+0x2e8>)
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	089b      	lsrs	r3, r3, #2
 8001bca:	3302      	adds	r3, #2
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bd2:	4b37      	ldr	r3, [pc, #220]	; (8001cb0 <HAL_GPIO_Init+0x300>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4013      	ands	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bf6:	4a2e      	ldr	r2, [pc, #184]	; (8001cb0 <HAL_GPIO_Init+0x300>)
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001bfc:	4b2c      	ldr	r3, [pc, #176]	; (8001cb0 <HAL_GPIO_Init+0x300>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d003      	beq.n	8001c20 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c20:	4a23      	ldr	r2, [pc, #140]	; (8001cb0 <HAL_GPIO_Init+0x300>)
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c26:	4b22      	ldr	r3, [pc, #136]	; (8001cb0 <HAL_GPIO_Init+0x300>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	43db      	mvns	r3, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4013      	ands	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c4a:	4a19      	ldr	r2, [pc, #100]	; (8001cb0 <HAL_GPIO_Init+0x300>)
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c50:	4b17      	ldr	r3, [pc, #92]	; (8001cb0 <HAL_GPIO_Init+0x300>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d003      	beq.n	8001c74 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c74:	4a0e      	ldr	r2, [pc, #56]	; (8001cb0 <HAL_GPIO_Init+0x300>)
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	3301      	adds	r3, #1
 8001c7e:	61fb      	str	r3, [r7, #28]
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	2b0f      	cmp	r3, #15
 8001c84:	f67f aea2 	bls.w	80019cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c88:	bf00      	nop
 8001c8a:	3724      	adds	r7, #36	; 0x24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	40023800 	.word	0x40023800
 8001c98:	40013800 	.word	0x40013800
 8001c9c:	40020000 	.word	0x40020000
 8001ca0:	40020400 	.word	0x40020400
 8001ca4:	40020800 	.word	0x40020800
 8001ca8:	40020c00 	.word	0x40020c00
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	40013c00 	.word	0x40013c00

08001cb4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b088      	sub	sp, #32
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e128      	b.n	8001f18 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d109      	bne.n	8001ce6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a90      	ldr	r2, [pc, #576]	; (8001f20 <HAL_I2S_Init+0x26c>)
 8001cde:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f7fe fe3f 	bl	8000964 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2202      	movs	r2, #2
 8001cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	69db      	ldr	r3, [r3, #28]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001cfc:	f023 030f 	bic.w	r3, r3, #15
 8001d00:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2202      	movs	r2, #2
 8001d08:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d060      	beq.n	8001dd4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d102      	bne.n	8001d20 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001d1a:	2310      	movs	r3, #16
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	e001      	b.n	8001d24 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001d20:	2320      	movs	r3, #32
 8001d22:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	2b20      	cmp	r3, #32
 8001d2a:	d802      	bhi.n	8001d32 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001d32:	2001      	movs	r0, #1
 8001d34:	f001 fa46 	bl	80031c4 <HAL_RCCEx_GetPeriphCLKFreq>
 8001d38:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d42:	d125      	bne.n	8001d90 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d010      	beq.n	8001d6e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d56:	4613      	mov	r3, r2
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	461a      	mov	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d68:	3305      	adds	r3, #5
 8001d6a:	613b      	str	r3, [r7, #16]
 8001d6c:	e01f      	b.n	8001dae <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d78:	4613      	mov	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4413      	add	r3, r2
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	461a      	mov	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d8a:	3305      	adds	r3, #5
 8001d8c:	613b      	str	r3, [r7, #16]
 8001d8e:	e00e      	b.n	8001dae <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d98:	4613      	mov	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	461a      	mov	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	695b      	ldr	r3, [r3, #20]
 8001da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001daa:	3305      	adds	r3, #5
 8001dac:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	4a5c      	ldr	r2, [pc, #368]	; (8001f24 <HAL_I2S_Init+0x270>)
 8001db2:	fba2 2303 	umull	r2, r3, r2, r3
 8001db6:	08db      	lsrs	r3, r3, #3
 8001db8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	085b      	lsrs	r3, r3, #1
 8001dca:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	021b      	lsls	r3, r3, #8
 8001dd0:	61bb      	str	r3, [r7, #24]
 8001dd2:	e003      	b.n	8001ddc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d902      	bls.n	8001de8 <HAL_I2S_Init+0x134>
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	2bff      	cmp	r3, #255	; 0xff
 8001de6:	d907      	bls.n	8001df8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dec:	f043 0210 	orr.w	r2, r3, #16
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e08f      	b.n	8001f18 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691a      	ldr	r2, [r3, #16]
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	ea42 0103 	orr.w	r1, r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	69fa      	ldr	r2, [r7, #28]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001e16:	f023 030f 	bic.w	r3, r3, #15
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	6851      	ldr	r1, [r2, #4]
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6892      	ldr	r2, [r2, #8]
 8001e22:	4311      	orrs	r1, r2
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	68d2      	ldr	r2, [r2, #12]
 8001e28:	4311      	orrs	r1, r2
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6992      	ldr	r2, [r2, #24]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	431a      	orrs	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e3a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d161      	bne.n	8001f08 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a38      	ldr	r2, [pc, #224]	; (8001f28 <HAL_I2S_Init+0x274>)
 8001e48:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a37      	ldr	r2, [pc, #220]	; (8001f2c <HAL_I2S_Init+0x278>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d101      	bne.n	8001e58 <HAL_I2S_Init+0x1a4>
 8001e54:	4b36      	ldr	r3, [pc, #216]	; (8001f30 <HAL_I2S_Init+0x27c>)
 8001e56:	e001      	b.n	8001e5c <HAL_I2S_Init+0x1a8>
 8001e58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	6812      	ldr	r2, [r2, #0]
 8001e62:	4932      	ldr	r1, [pc, #200]	; (8001f2c <HAL_I2S_Init+0x278>)
 8001e64:	428a      	cmp	r2, r1
 8001e66:	d101      	bne.n	8001e6c <HAL_I2S_Init+0x1b8>
 8001e68:	4a31      	ldr	r2, [pc, #196]	; (8001f30 <HAL_I2S_Init+0x27c>)
 8001e6a:	e001      	b.n	8001e70 <HAL_I2S_Init+0x1bc>
 8001e6c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001e70:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001e74:	f023 030f 	bic.w	r3, r3, #15
 8001e78:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a2b      	ldr	r2, [pc, #172]	; (8001f2c <HAL_I2S_Init+0x278>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d101      	bne.n	8001e88 <HAL_I2S_Init+0x1d4>
 8001e84:	4b2a      	ldr	r3, [pc, #168]	; (8001f30 <HAL_I2S_Init+0x27c>)
 8001e86:	e001      	b.n	8001e8c <HAL_I2S_Init+0x1d8>
 8001e88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a25      	ldr	r2, [pc, #148]	; (8001f2c <HAL_I2S_Init+0x278>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d101      	bne.n	8001e9e <HAL_I2S_Init+0x1ea>
 8001e9a:	4b25      	ldr	r3, [pc, #148]	; (8001f30 <HAL_I2S_Init+0x27c>)
 8001e9c:	e001      	b.n	8001ea2 <HAL_I2S_Init+0x1ee>
 8001e9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ea2:	69db      	ldr	r3, [r3, #28]
 8001ea4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001eae:	d003      	beq.n	8001eb8 <HAL_I2S_Init+0x204>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d103      	bne.n	8001ec0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001eb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	e001      	b.n	8001ec4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	b299      	uxth	r1, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001eda:	4303      	orrs	r3, r0
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	430b      	orrs	r3, r1
 8001ee0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	897b      	ldrh	r3, [r7, #10]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ef0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a0d      	ldr	r2, [pc, #52]	; (8001f2c <HAL_I2S_Init+0x278>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d101      	bne.n	8001f00 <HAL_I2S_Init+0x24c>
 8001efc:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <HAL_I2S_Init+0x27c>)
 8001efe:	e001      	b.n	8001f04 <HAL_I2S_Init+0x250>
 8001f00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f04:	897a      	ldrh	r2, [r7, #10]
 8001f06:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3720      	adds	r7, #32
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	08002211 	.word	0x08002211
 8001f24:	cccccccd 	.word	0xcccccccd
 8001f28:	08002325 	.word	0x08002325
 8001f2c:	40003800 	.word	0x40003800
 8001f30:	40003400 	.word	0x40003400

08001f34 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d002      	beq.n	8001f4e <HAL_I2S_Transmit_DMA+0x1a>
 8001f48:	88fb      	ldrh	r3, [r7, #6]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e08e      	b.n	8002070 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d101      	bne.n	8001f62 <HAL_I2S_Transmit_DMA+0x2e>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e086      	b.n	8002070 <HAL_I2S_Transmit_DMA+0x13c>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d005      	beq.n	8001f82 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	e076      	b.n	8002070 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2203      	movs	r2, #3
 8001f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	2b03      	cmp	r3, #3
 8001fa6:	d002      	beq.n	8001fae <HAL_I2S_Transmit_DMA+0x7a>
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	2b05      	cmp	r3, #5
 8001fac:	d10a      	bne.n	8001fc4 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8001fae:	88fb      	ldrh	r3, [r7, #6]
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	b29a      	uxth	r2, r3
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8001fb8:	88fb      	ldrh	r3, [r7, #6]
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001fc2:	e005      	b.n	8001fd0 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	88fa      	ldrh	r2, [r7, #6]
 8001fc8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	88fa      	ldrh	r2, [r7, #6]
 8001fce:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd4:	4a28      	ldr	r2, [pc, #160]	; (8002078 <HAL_I2S_Transmit_DMA+0x144>)
 8001fd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fdc:	4a27      	ldr	r2, [pc, #156]	; (800207c <HAL_I2S_Transmit_DMA+0x148>)
 8001fde:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fe4:	4a26      	ldr	r2, [pc, #152]	; (8002080 <HAL_I2S_Transmit_DMA+0x14c>)
 8001fe6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8001ff0:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8001ff8:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ffe:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002000:	f7ff fa16 	bl	8001430 <HAL_DMA_Start_IT>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00f      	beq.n	800202a <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200e:	f043 0208 	orr.w	r2, r3, #8
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e022      	b.n	8002070 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	69db      	ldr	r3, [r3, #28]
 8002030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002034:	2b00      	cmp	r3, #0
 8002036:	d107      	bne.n	8002048 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	69da      	ldr	r2, [r3, #28]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002046:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d107      	bne.n	8002066 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f042 0202 	orr.w	r2, r2, #2
 8002064:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	080020ef 	.word	0x080020ef
 800207c:	080020ad 	.word	0x080020ad
 8002080:	0800210b 	.word	0x0800210b

08002084 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b8:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10e      	bne.n	80020e0 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f022 0202 	bic.w	r2, r2, #2
 80020d0:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2201      	movs	r2, #1
 80020dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f7fe fe02 	bl	8000cea <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80020e6:	bf00      	nop
 80020e8:	3710      	adds	r7, #16
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b084      	sub	sp, #16
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fa:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	f7fe fde9 	bl	8000cd4 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002102:	bf00      	nop
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b084      	sub	sp, #16
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002116:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 0203 	bic.w	r2, r2, #3
 8002126:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2200      	movs	r2, #0
 8002132:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002140:	f043 0208 	orr.w	r2, r3, #8
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f7ff ffa5 	bl	8002098 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800214e:	bf00      	nop
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002162:	881a      	ldrh	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216e:	1c9a      	adds	r2, r3, #2
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002178:	b29b      	uxth	r3, r3
 800217a:	3b01      	subs	r3, #1
 800217c:	b29a      	uxth	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002186:	b29b      	uxth	r3, r3
 8002188:	2b00      	cmp	r3, #0
 800218a:	d10e      	bne.n	80021aa <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800219a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f7fe fda0 	bl	8000cea <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68da      	ldr	r2, [r3, #12]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c4:	b292      	uxth	r2, r2
 80021c6:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021cc:	1c9a      	adds	r2, r3, #2
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	3b01      	subs	r3, #1
 80021da:	b29a      	uxth	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10e      	bne.n	8002208 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80021f8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7ff ff3e 	bl	8002084 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002208:	bf00      	nop
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b04      	cmp	r3, #4
 800222a:	d13a      	bne.n	80022a2 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f003 0301 	and.w	r3, r3, #1
 8002232:	2b01      	cmp	r3, #1
 8002234:	d109      	bne.n	800224a <I2S_IRQHandler+0x3a>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002240:	2b40      	cmp	r3, #64	; 0x40
 8002242:	d102      	bne.n	800224a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7ff ffb4 	bl	80021b2 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002250:	2b40      	cmp	r3, #64	; 0x40
 8002252:	d126      	bne.n	80022a2 <I2S_IRQHandler+0x92>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f003 0320 	and.w	r3, r3, #32
 800225e:	2b20      	cmp	r3, #32
 8002260:	d11f      	bne.n	80022a2 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002270:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	613b      	str	r3, [r7, #16]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	613b      	str	r3, [r7, #16]
 8002286:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002294:	f043 0202 	orr.w	r2, r3, #2
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7ff fefb 	bl	8002098 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b03      	cmp	r3, #3
 80022ac:	d136      	bne.n	800231c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d109      	bne.n	80022cc <I2S_IRQHandler+0xbc>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c2:	2b80      	cmp	r3, #128	; 0x80
 80022c4:	d102      	bne.n	80022cc <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7ff ff45 	bl	8002156 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	d122      	bne.n	800231c <I2S_IRQHandler+0x10c>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	f003 0320 	and.w	r3, r3, #32
 80022e0:	2b20      	cmp	r3, #32
 80022e2:	d11b      	bne.n	800231c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80022f2:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80022f4:	2300      	movs	r3, #0
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230e:	f043 0204 	orr.w	r2, r3, #4
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7ff febe 	bl	8002098 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800231c:	bf00      	nop
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4aa2      	ldr	r2, [pc, #648]	; (80025c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d101      	bne.n	8002342 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800233e:	4ba2      	ldr	r3, [pc, #648]	; (80025c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002340:	e001      	b.n	8002346 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002342:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a9b      	ldr	r2, [pc, #620]	; (80025c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d101      	bne.n	8002360 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800235c:	4b9a      	ldr	r3, [pc, #616]	; (80025c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800235e:	e001      	b.n	8002364 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002360:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002370:	d004      	beq.n	800237c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	f040 8099 	bne.w	80024ae <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b02      	cmp	r3, #2
 8002384:	d107      	bne.n	8002396 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800238c:	2b00      	cmp	r3, #0
 800238e:	d002      	beq.n	8002396 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 f925 	bl	80025e0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	2b01      	cmp	r3, #1
 800239e:	d107      	bne.n	80023b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d002      	beq.n	80023b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 f9c8 	bl	8002740 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b6:	2b40      	cmp	r3, #64	; 0x40
 80023b8:	d13a      	bne.n	8002430 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	f003 0320 	and.w	r3, r3, #32
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d035      	beq.n	8002430 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a7e      	ldr	r2, [pc, #504]	; (80025c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d101      	bne.n	80023d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80023ce:	4b7e      	ldr	r3, [pc, #504]	; (80025c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80023d0:	e001      	b.n	80023d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80023d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4979      	ldr	r1, [pc, #484]	; (80025c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80023de:	428b      	cmp	r3, r1
 80023e0:	d101      	bne.n	80023e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80023e2:	4b79      	ldr	r3, [pc, #484]	; (80025c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80023e4:	e001      	b.n	80023ea <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80023e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80023ee:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80023fe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002400:	2300      	movs	r3, #0
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	f043 0202 	orr.w	r2, r3, #2
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff fe34 	bl	8002098 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	2b08      	cmp	r3, #8
 8002438:	f040 80be 	bne.w	80025b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	f003 0320 	and.w	r3, r3, #32
 8002442:	2b00      	cmp	r3, #0
 8002444:	f000 80b8 	beq.w	80025b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002456:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a59      	ldr	r2, [pc, #356]	; (80025c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d101      	bne.n	8002466 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002462:	4b59      	ldr	r3, [pc, #356]	; (80025c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002464:	e001      	b.n	800246a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002466:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4954      	ldr	r1, [pc, #336]	; (80025c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002472:	428b      	cmp	r3, r1
 8002474:	d101      	bne.n	800247a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002476:	4b54      	ldr	r3, [pc, #336]	; (80025c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002478:	e001      	b.n	800247e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800247a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800247e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002482:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002484:	2300      	movs	r3, #0
 8002486:	60bb      	str	r3, [r7, #8]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	60bb      	str	r3, [r7, #8]
 8002490:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249e:	f043 0204 	orr.w	r2, r3, #4
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff fdf6 	bl	8002098 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80024ac:	e084      	b.n	80025b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d107      	bne.n	80024c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d002      	beq.n	80024c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f8be 	bl	8002644 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d107      	bne.n	80024e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d002      	beq.n	80024e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 f8fd 	bl	80026dc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e8:	2b40      	cmp	r3, #64	; 0x40
 80024ea:	d12f      	bne.n	800254c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	f003 0320 	and.w	r3, r3, #32
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d02a      	beq.n	800254c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002504:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a2e      	ldr	r2, [pc, #184]	; (80025c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d101      	bne.n	8002514 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002510:	4b2d      	ldr	r3, [pc, #180]	; (80025c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002512:	e001      	b.n	8002518 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002514:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4929      	ldr	r1, [pc, #164]	; (80025c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002520:	428b      	cmp	r3, r1
 8002522:	d101      	bne.n	8002528 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002524:	4b28      	ldr	r3, [pc, #160]	; (80025c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002526:	e001      	b.n	800252c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002528:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800252c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002530:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253e:	f043 0202 	orr.w	r2, r3, #2
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7ff fda6 	bl	8002098 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b08      	cmp	r3, #8
 8002554:	d131      	bne.n	80025ba <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	f003 0320 	and.w	r3, r3, #32
 800255c:	2b00      	cmp	r3, #0
 800255e:	d02c      	beq.n	80025ba <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a17      	ldr	r2, [pc, #92]	; (80025c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d101      	bne.n	800256e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800256a:	4b17      	ldr	r3, [pc, #92]	; (80025c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800256c:	e001      	b.n	8002572 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800256e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4912      	ldr	r1, [pc, #72]	; (80025c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800257a:	428b      	cmp	r3, r1
 800257c:	d101      	bne.n	8002582 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800257e:	4b12      	ldr	r3, [pc, #72]	; (80025c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002580:	e001      	b.n	8002586 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002582:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002586:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800258a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800259a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a8:	f043 0204 	orr.w	r2, r3, #4
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f7ff fd71 	bl	8002098 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80025b6:	e000      	b.n	80025ba <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80025b8:	bf00      	nop
}
 80025ba:	bf00      	nop
 80025bc:	3720      	adds	r7, #32
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40003800 	.word	0x40003800
 80025c8:	40003400 	.word	0x40003400

080025cc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	1c99      	adds	r1, r3, #2
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6251      	str	r1, [r2, #36]	; 0x24
 80025f2:	881a      	ldrh	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025fe:	b29b      	uxth	r3, r3
 8002600:	3b01      	subs	r3, #1
 8002602:	b29a      	uxth	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260c:	b29b      	uxth	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d113      	bne.n	800263a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002620:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002626:	b29b      	uxth	r3, r3
 8002628:	2b00      	cmp	r3, #0
 800262a:	d106      	bne.n	800263a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f7ff ffc9 	bl	80025cc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800263a:	bf00      	nop
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
	...

08002644 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	1c99      	adds	r1, r3, #2
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6251      	str	r1, [r2, #36]	; 0x24
 8002656:	8819      	ldrh	r1, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a1d      	ldr	r2, [pc, #116]	; (80026d4 <I2SEx_TxISR_I2SExt+0x90>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d101      	bne.n	8002666 <I2SEx_TxISR_I2SExt+0x22>
 8002662:	4b1d      	ldr	r3, [pc, #116]	; (80026d8 <I2SEx_TxISR_I2SExt+0x94>)
 8002664:	e001      	b.n	800266a <I2SEx_TxISR_I2SExt+0x26>
 8002666:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800266a:	460a      	mov	r2, r1
 800266c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002672:	b29b      	uxth	r3, r3
 8002674:	3b01      	subs	r3, #1
 8002676:	b29a      	uxth	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002680:	b29b      	uxth	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d121      	bne.n	80026ca <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a12      	ldr	r2, [pc, #72]	; (80026d4 <I2SEx_TxISR_I2SExt+0x90>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d101      	bne.n	8002694 <I2SEx_TxISR_I2SExt+0x50>
 8002690:	4b11      	ldr	r3, [pc, #68]	; (80026d8 <I2SEx_TxISR_I2SExt+0x94>)
 8002692:	e001      	b.n	8002698 <I2SEx_TxISR_I2SExt+0x54>
 8002694:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	490d      	ldr	r1, [pc, #52]	; (80026d4 <I2SEx_TxISR_I2SExt+0x90>)
 80026a0:	428b      	cmp	r3, r1
 80026a2:	d101      	bne.n	80026a8 <I2SEx_TxISR_I2SExt+0x64>
 80026a4:	4b0c      	ldr	r3, [pc, #48]	; (80026d8 <I2SEx_TxISR_I2SExt+0x94>)
 80026a6:	e001      	b.n	80026ac <I2SEx_TxISR_I2SExt+0x68>
 80026a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80026b0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d106      	bne.n	80026ca <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f7ff ff81 	bl	80025cc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80026ca:	bf00      	nop
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40003800 	.word	0x40003800
 80026d8:	40003400 	.word	0x40003400

080026dc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68d8      	ldr	r0, [r3, #12]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ee:	1c99      	adds	r1, r3, #2
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80026f4:	b282      	uxth	r2, r0
 80026f6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	3b01      	subs	r3, #1
 8002700:	b29a      	uxth	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800270a:	b29b      	uxth	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	d113      	bne.n	8002738 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800271e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002724:	b29b      	uxth	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d106      	bne.n	8002738 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7ff ff4a 	bl	80025cc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002738:	bf00      	nop
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a20      	ldr	r2, [pc, #128]	; (80027d0 <I2SEx_RxISR_I2SExt+0x90>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d101      	bne.n	8002756 <I2SEx_RxISR_I2SExt+0x16>
 8002752:	4b20      	ldr	r3, [pc, #128]	; (80027d4 <I2SEx_RxISR_I2SExt+0x94>)
 8002754:	e001      	b.n	800275a <I2SEx_RxISR_I2SExt+0x1a>
 8002756:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800275a:	68d8      	ldr	r0, [r3, #12]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002760:	1c99      	adds	r1, r3, #2
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002766:	b282      	uxth	r2, r0
 8002768:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800276e:	b29b      	uxth	r3, r3
 8002770:	3b01      	subs	r3, #1
 8002772:	b29a      	uxth	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800277c:	b29b      	uxth	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d121      	bne.n	80027c6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a12      	ldr	r2, [pc, #72]	; (80027d0 <I2SEx_RxISR_I2SExt+0x90>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d101      	bne.n	8002790 <I2SEx_RxISR_I2SExt+0x50>
 800278c:	4b11      	ldr	r3, [pc, #68]	; (80027d4 <I2SEx_RxISR_I2SExt+0x94>)
 800278e:	e001      	b.n	8002794 <I2SEx_RxISR_I2SExt+0x54>
 8002790:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	490d      	ldr	r1, [pc, #52]	; (80027d0 <I2SEx_RxISR_I2SExt+0x90>)
 800279c:	428b      	cmp	r3, r1
 800279e:	d101      	bne.n	80027a4 <I2SEx_RxISR_I2SExt+0x64>
 80027a0:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <I2SEx_RxISR_I2SExt+0x94>)
 80027a2:	e001      	b.n	80027a8 <I2SEx_RxISR_I2SExt+0x68>
 80027a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027a8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80027ac:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d106      	bne.n	80027c6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7ff ff03 	bl	80025cc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40003800 	.word	0x40003800
 80027d4:	40003400 	.word	0x40003400

080027d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e25b      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d075      	beq.n	80028e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027f6:	4ba3      	ldr	r3, [pc, #652]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 030c 	and.w	r3, r3, #12
 80027fe:	2b04      	cmp	r3, #4
 8002800:	d00c      	beq.n	800281c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002802:	4ba0      	ldr	r3, [pc, #640]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800280a:	2b08      	cmp	r3, #8
 800280c:	d112      	bne.n	8002834 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800280e:	4b9d      	ldr	r3, [pc, #628]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002816:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800281a:	d10b      	bne.n	8002834 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800281c:	4b99      	ldr	r3, [pc, #612]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d05b      	beq.n	80028e0 <HAL_RCC_OscConfig+0x108>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d157      	bne.n	80028e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e236      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800283c:	d106      	bne.n	800284c <HAL_RCC_OscConfig+0x74>
 800283e:	4b91      	ldr	r3, [pc, #580]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a90      	ldr	r2, [pc, #576]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	e01d      	b.n	8002888 <HAL_RCC_OscConfig+0xb0>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002854:	d10c      	bne.n	8002870 <HAL_RCC_OscConfig+0x98>
 8002856:	4b8b      	ldr	r3, [pc, #556]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a8a      	ldr	r2, [pc, #552]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 800285c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	4b88      	ldr	r3, [pc, #544]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a87      	ldr	r2, [pc, #540]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	e00b      	b.n	8002888 <HAL_RCC_OscConfig+0xb0>
 8002870:	4b84      	ldr	r3, [pc, #528]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a83      	ldr	r2, [pc, #524]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800287a:	6013      	str	r3, [r2, #0]
 800287c:	4b81      	ldr	r3, [pc, #516]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a80      	ldr	r2, [pc, #512]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d013      	beq.n	80028b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002890:	f7fe fc02 	bl	8001098 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002898:	f7fe fbfe 	bl	8001098 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b64      	cmp	r3, #100	; 0x64
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e1fb      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028aa:	4b76      	ldr	r3, [pc, #472]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0f0      	beq.n	8002898 <HAL_RCC_OscConfig+0xc0>
 80028b6:	e014      	b.n	80028e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b8:	f7fe fbee 	bl	8001098 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028c0:	f7fe fbea 	bl	8001098 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b64      	cmp	r3, #100	; 0x64
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e1e7      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028d2:	4b6c      	ldr	r3, [pc, #432]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f0      	bne.n	80028c0 <HAL_RCC_OscConfig+0xe8>
 80028de:	e000      	b.n	80028e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d063      	beq.n	80029b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028ee:	4b65      	ldr	r3, [pc, #404]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 030c 	and.w	r3, r3, #12
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00b      	beq.n	8002912 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028fa:	4b62      	ldr	r3, [pc, #392]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002902:	2b08      	cmp	r3, #8
 8002904:	d11c      	bne.n	8002940 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002906:	4b5f      	ldr	r3, [pc, #380]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d116      	bne.n	8002940 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002912:	4b5c      	ldr	r3, [pc, #368]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d005      	beq.n	800292a <HAL_RCC_OscConfig+0x152>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d001      	beq.n	800292a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e1bb      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800292a:	4b56      	ldr	r3, [pc, #344]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	4952      	ldr	r1, [pc, #328]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 800293a:	4313      	orrs	r3, r2
 800293c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800293e:	e03a      	b.n	80029b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d020      	beq.n	800298a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002948:	4b4f      	ldr	r3, [pc, #316]	; (8002a88 <HAL_RCC_OscConfig+0x2b0>)
 800294a:	2201      	movs	r2, #1
 800294c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294e:	f7fe fba3 	bl	8001098 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002956:	f7fe fb9f 	bl	8001098 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e19c      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002968:	4b46      	ldr	r3, [pc, #280]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0f0      	beq.n	8002956 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002974:	4b43      	ldr	r3, [pc, #268]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	4940      	ldr	r1, [pc, #256]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002984:	4313      	orrs	r3, r2
 8002986:	600b      	str	r3, [r1, #0]
 8002988:	e015      	b.n	80029b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800298a:	4b3f      	ldr	r3, [pc, #252]	; (8002a88 <HAL_RCC_OscConfig+0x2b0>)
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002990:	f7fe fb82 	bl	8001098 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002998:	f7fe fb7e 	bl	8001098 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e17b      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029aa:	4b36      	ldr	r3, [pc, #216]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1f0      	bne.n	8002998 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0308 	and.w	r3, r3, #8
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d030      	beq.n	8002a24 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d016      	beq.n	80029f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ca:	4b30      	ldr	r3, [pc, #192]	; (8002a8c <HAL_RCC_OscConfig+0x2b4>)
 80029cc:	2201      	movs	r2, #1
 80029ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d0:	f7fe fb62 	bl	8001098 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029d8:	f7fe fb5e 	bl	8001098 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e15b      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ea:	4b26      	ldr	r3, [pc, #152]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 80029ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0f0      	beq.n	80029d8 <HAL_RCC_OscConfig+0x200>
 80029f6:	e015      	b.n	8002a24 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029f8:	4b24      	ldr	r3, [pc, #144]	; (8002a8c <HAL_RCC_OscConfig+0x2b4>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029fe:	f7fe fb4b 	bl	8001098 <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a06:	f7fe fb47 	bl	8001098 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e144      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a18:	4b1a      	ldr	r3, [pc, #104]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1f0      	bne.n	8002a06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 80a0 	beq.w	8002b72 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a32:	2300      	movs	r3, #0
 8002a34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a36:	4b13      	ldr	r3, [pc, #76]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10f      	bne.n	8002a62 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a42:	2300      	movs	r3, #0
 8002a44:	60bb      	str	r3, [r7, #8]
 8002a46:	4b0f      	ldr	r3, [pc, #60]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	4a0e      	ldr	r2, [pc, #56]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a50:	6413      	str	r3, [r2, #64]	; 0x40
 8002a52:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <HAL_RCC_OscConfig+0x2ac>)
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a5a:	60bb      	str	r3, [r7, #8]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a62:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <HAL_RCC_OscConfig+0x2b8>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d121      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a6e:	4b08      	ldr	r3, [pc, #32]	; (8002a90 <HAL_RCC_OscConfig+0x2b8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a07      	ldr	r2, [pc, #28]	; (8002a90 <HAL_RCC_OscConfig+0x2b8>)
 8002a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a7a:	f7fe fb0d 	bl	8001098 <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a80:	e011      	b.n	8002aa6 <HAL_RCC_OscConfig+0x2ce>
 8002a82:	bf00      	nop
 8002a84:	40023800 	.word	0x40023800
 8002a88:	42470000 	.word	0x42470000
 8002a8c:	42470e80 	.word	0x42470e80
 8002a90:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a94:	f7fe fb00 	bl	8001098 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e0fd      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa6:	4b81      	ldr	r3, [pc, #516]	; (8002cac <HAL_RCC_OscConfig+0x4d4>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d0f0      	beq.n	8002a94 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d106      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x2f0>
 8002aba:	4b7d      	ldr	r3, [pc, #500]	; (8002cb0 <HAL_RCC_OscConfig+0x4d8>)
 8002abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002abe:	4a7c      	ldr	r2, [pc, #496]	; (8002cb0 <HAL_RCC_OscConfig+0x4d8>)
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ac6:	e01c      	b.n	8002b02 <HAL_RCC_OscConfig+0x32a>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	2b05      	cmp	r3, #5
 8002ace:	d10c      	bne.n	8002aea <HAL_RCC_OscConfig+0x312>
 8002ad0:	4b77      	ldr	r3, [pc, #476]	; (8002cb0 <HAL_RCC_OscConfig+0x4d8>)
 8002ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad4:	4a76      	ldr	r2, [pc, #472]	; (8002cb0 <HAL_RCC_OscConfig+0x4d8>)
 8002ad6:	f043 0304 	orr.w	r3, r3, #4
 8002ada:	6713      	str	r3, [r2, #112]	; 0x70
 8002adc:	4b74      	ldr	r3, [pc, #464]	; (8002cb0 <HAL_RCC_OscConfig+0x4d8>)
 8002ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae0:	4a73      	ldr	r2, [pc, #460]	; (8002cb0 <HAL_RCC_OscConfig+0x4d8>)
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae8:	e00b      	b.n	8002b02 <HAL_RCC_OscConfig+0x32a>
 8002aea:	4b71      	ldr	r3, [pc, #452]	; (8002cb0 <HAL_RCC_OscConfig+0x4d8>)
 8002aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aee:	4a70      	ldr	r2, [pc, #448]	; (8002cb0 <HAL_RCC_OscConfig+0x4d8>)
 8002af0:	f023 0301 	bic.w	r3, r3, #1
 8002af4:	6713      	str	r3, [r2, #112]	; 0x70
 8002af6:	4b6e      	ldr	r3, [pc, #440]	; (8002cb0 <HAL_RCC_OscConfig+0x4d8>)
 8002af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002afa:	4a6d      	ldr	r2, [pc, #436]	; (8002cb0 <HAL_RCC_OscConfig+0x4d8>)
 8002afc:	f023 0304 	bic.w	r3, r3, #4
 8002b00:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d015      	beq.n	8002b36 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b0a:	f7fe fac5 	bl	8001098 <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b10:	e00a      	b.n	8002b28 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b12:	f7fe fac1 	bl	8001098 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e0bc      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b28:	4b61      	ldr	r3, [pc, #388]	; (8002cb0 <HAL_RCC_OscConfig+0x4d8>)
 8002b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d0ee      	beq.n	8002b12 <HAL_RCC_OscConfig+0x33a>
 8002b34:	e014      	b.n	8002b60 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b36:	f7fe faaf 	bl	8001098 <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b3c:	e00a      	b.n	8002b54 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b3e:	f7fe faab 	bl	8001098 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d901      	bls.n	8002b54 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e0a6      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b54:	4b56      	ldr	r3, [pc, #344]	; (8002cb0 <HAL_RCC_OscConfig+0x4d8>)
 8002b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1ee      	bne.n	8002b3e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b60:	7dfb      	ldrb	r3, [r7, #23]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d105      	bne.n	8002b72 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b66:	4b52      	ldr	r3, [pc, #328]	; (8002cb0 <HAL_RCC_OscConfig+0x4d8>)
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	4a51      	ldr	r2, [pc, #324]	; (8002cb0 <HAL_RCC_OscConfig+0x4d8>)
 8002b6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b70:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 8092 	beq.w	8002ca0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b7c:	4b4c      	ldr	r3, [pc, #304]	; (8002cb0 <HAL_RCC_OscConfig+0x4d8>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 030c 	and.w	r3, r3, #12
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	d05c      	beq.n	8002c42 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d141      	bne.n	8002c14 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b90:	4b48      	ldr	r3, [pc, #288]	; (8002cb4 <HAL_RCC_OscConfig+0x4dc>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b96:	f7fe fa7f 	bl	8001098 <HAL_GetTick>
 8002b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b9c:	e008      	b.n	8002bb0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b9e:	f7fe fa7b 	bl	8001098 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e078      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb0:	4b3f      	ldr	r3, [pc, #252]	; (8002cb0 <HAL_RCC_OscConfig+0x4d8>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1f0      	bne.n	8002b9e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	69da      	ldr	r2, [r3, #28]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a1b      	ldr	r3, [r3, #32]
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bca:	019b      	lsls	r3, r3, #6
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd2:	085b      	lsrs	r3, r3, #1
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	041b      	lsls	r3, r3, #16
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bde:	061b      	lsls	r3, r3, #24
 8002be0:	4933      	ldr	r1, [pc, #204]	; (8002cb0 <HAL_RCC_OscConfig+0x4d8>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002be6:	4b33      	ldr	r3, [pc, #204]	; (8002cb4 <HAL_RCC_OscConfig+0x4dc>)
 8002be8:	2201      	movs	r2, #1
 8002bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bec:	f7fe fa54 	bl	8001098 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bf4:	f7fe fa50 	bl	8001098 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e04d      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c06:	4b2a      	ldr	r3, [pc, #168]	; (8002cb0 <HAL_RCC_OscConfig+0x4d8>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0f0      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x41c>
 8002c12:	e045      	b.n	8002ca0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c14:	4b27      	ldr	r3, [pc, #156]	; (8002cb4 <HAL_RCC_OscConfig+0x4dc>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c1a:	f7fe fa3d 	bl	8001098 <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c22:	f7fe fa39 	bl	8001098 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e036      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c34:	4b1e      	ldr	r3, [pc, #120]	; (8002cb0 <HAL_RCC_OscConfig+0x4d8>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1f0      	bne.n	8002c22 <HAL_RCC_OscConfig+0x44a>
 8002c40:	e02e      	b.n	8002ca0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	699b      	ldr	r3, [r3, #24]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d101      	bne.n	8002c4e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e029      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c4e:	4b18      	ldr	r3, [pc, #96]	; (8002cb0 <HAL_RCC_OscConfig+0x4d8>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	69db      	ldr	r3, [r3, #28]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d11c      	bne.n	8002c9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d115      	bne.n	8002c9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c76:	4013      	ands	r3, r2
 8002c78:	687a      	ldr	r2, [r7, #4]
 8002c7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d10d      	bne.n	8002c9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d106      	bne.n	8002c9c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d001      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e000      	b.n	8002ca2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3718      	adds	r7, #24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40007000 	.word	0x40007000
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	42470060 	.word	0x42470060

08002cb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e0cc      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ccc:	4b68      	ldr	r3, [pc, #416]	; (8002e70 <HAL_RCC_ClockConfig+0x1b8>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 030f 	and.w	r3, r3, #15
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d90c      	bls.n	8002cf4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cda:	4b65      	ldr	r3, [pc, #404]	; (8002e70 <HAL_RCC_ClockConfig+0x1b8>)
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	b2d2      	uxtb	r2, r2
 8002ce0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce2:	4b63      	ldr	r3, [pc, #396]	; (8002e70 <HAL_RCC_ClockConfig+0x1b8>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 030f 	and.w	r3, r3, #15
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d001      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e0b8      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d020      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d005      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d0c:	4b59      	ldr	r3, [pc, #356]	; (8002e74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	4a58      	ldr	r2, [pc, #352]	; (8002e74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0308 	and.w	r3, r3, #8
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d005      	beq.n	8002d30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d24:	4b53      	ldr	r3, [pc, #332]	; (8002e74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	4a52      	ldr	r2, [pc, #328]	; (8002e74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d30:	4b50      	ldr	r3, [pc, #320]	; (8002e74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	494d      	ldr	r1, [pc, #308]	; (8002e74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d044      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d107      	bne.n	8002d66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d56:	4b47      	ldr	r3, [pc, #284]	; (8002e74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d119      	bne.n	8002d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e07f      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d003      	beq.n	8002d76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d72:	2b03      	cmp	r3, #3
 8002d74:	d107      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d76:	4b3f      	ldr	r3, [pc, #252]	; (8002e74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d109      	bne.n	8002d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e06f      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d86:	4b3b      	ldr	r3, [pc, #236]	; (8002e74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e067      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d96:	4b37      	ldr	r3, [pc, #220]	; (8002e74 <HAL_RCC_ClockConfig+0x1bc>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	f023 0203 	bic.w	r2, r3, #3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	4934      	ldr	r1, [pc, #208]	; (8002e74 <HAL_RCC_ClockConfig+0x1bc>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002da8:	f7fe f976 	bl	8001098 <HAL_GetTick>
 8002dac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dae:	e00a      	b.n	8002dc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002db0:	f7fe f972 	bl	8001098 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e04f      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc6:	4b2b      	ldr	r3, [pc, #172]	; (8002e74 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 020c 	and.w	r2, r3, #12
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d1eb      	bne.n	8002db0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dd8:	4b25      	ldr	r3, [pc, #148]	; (8002e70 <HAL_RCC_ClockConfig+0x1b8>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 030f 	and.w	r3, r3, #15
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d20c      	bcs.n	8002e00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002de6:	4b22      	ldr	r3, [pc, #136]	; (8002e70 <HAL_RCC_ClockConfig+0x1b8>)
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	b2d2      	uxtb	r2, r2
 8002dec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dee:	4b20      	ldr	r3, [pc, #128]	; (8002e70 <HAL_RCC_ClockConfig+0x1b8>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	683a      	ldr	r2, [r7, #0]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d001      	beq.n	8002e00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e032      	b.n	8002e66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d008      	beq.n	8002e1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e0c:	4b19      	ldr	r3, [pc, #100]	; (8002e74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	4916      	ldr	r1, [pc, #88]	; (8002e74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 0308 	and.w	r3, r3, #8
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d009      	beq.n	8002e3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e2a:	4b12      	ldr	r3, [pc, #72]	; (8002e74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	490e      	ldr	r1, [pc, #56]	; (8002e74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e3e:	f000 f821 	bl	8002e84 <HAL_RCC_GetSysClockFreq>
 8002e42:	4601      	mov	r1, r0
 8002e44:	4b0b      	ldr	r3, [pc, #44]	; (8002e74 <HAL_RCC_ClockConfig+0x1bc>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	091b      	lsrs	r3, r3, #4
 8002e4a:	f003 030f 	and.w	r3, r3, #15
 8002e4e:	4a0a      	ldr	r2, [pc, #40]	; (8002e78 <HAL_RCC_ClockConfig+0x1c0>)
 8002e50:	5cd3      	ldrb	r3, [r2, r3]
 8002e52:	fa21 f303 	lsr.w	r3, r1, r3
 8002e56:	4a09      	ldr	r2, [pc, #36]	; (8002e7c <HAL_RCC_ClockConfig+0x1c4>)
 8002e58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e5a:	4b09      	ldr	r3, [pc, #36]	; (8002e80 <HAL_RCC_ClockConfig+0x1c8>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7fe f8d6 	bl	8001010 <HAL_InitTick>

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	40023c00 	.word	0x40023c00
 8002e74:	40023800 	.word	0x40023800
 8002e78:	08003934 	.word	0x08003934
 8002e7c:	20000000 	.word	0x20000000
 8002e80:	20000004 	.word	0x20000004

08002e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	607b      	str	r3, [r7, #4]
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	2300      	movs	r3, #0
 8002e94:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002e96:	2300      	movs	r3, #0
 8002e98:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e9a:	4b50      	ldr	r3, [pc, #320]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x158>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d007      	beq.n	8002eb6 <HAL_RCC_GetSysClockFreq+0x32>
 8002ea6:	2b08      	cmp	r3, #8
 8002ea8:	d008      	beq.n	8002ebc <HAL_RCC_GetSysClockFreq+0x38>
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	f040 808d 	bne.w	8002fca <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002eb0:	4b4b      	ldr	r3, [pc, #300]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002eb2:	60bb      	str	r3, [r7, #8]
       break;
 8002eb4:	e08c      	b.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eb6:	4b4b      	ldr	r3, [pc, #300]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002eb8:	60bb      	str	r3, [r7, #8]
      break;
 8002eba:	e089      	b.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ebc:	4b47      	ldr	r3, [pc, #284]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x158>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ec4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ec6:	4b45      	ldr	r3, [pc, #276]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x158>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d023      	beq.n	8002f1a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ed2:	4b42      	ldr	r3, [pc, #264]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x158>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	099b      	lsrs	r3, r3, #6
 8002ed8:	f04f 0400 	mov.w	r4, #0
 8002edc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ee0:	f04f 0200 	mov.w	r2, #0
 8002ee4:	ea03 0501 	and.w	r5, r3, r1
 8002ee8:	ea04 0602 	and.w	r6, r4, r2
 8002eec:	4a3d      	ldr	r2, [pc, #244]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002eee:	fb02 f106 	mul.w	r1, r2, r6
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	fb02 f205 	mul.w	r2, r2, r5
 8002ef8:	440a      	add	r2, r1
 8002efa:	493a      	ldr	r1, [pc, #232]	; (8002fe4 <HAL_RCC_GetSysClockFreq+0x160>)
 8002efc:	fba5 0101 	umull	r0, r1, r5, r1
 8002f00:	1853      	adds	r3, r2, r1
 8002f02:	4619      	mov	r1, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f04f 0400 	mov.w	r4, #0
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	4623      	mov	r3, r4
 8002f0e:	f7fd f961 	bl	80001d4 <__aeabi_uldivmod>
 8002f12:	4603      	mov	r3, r0
 8002f14:	460c      	mov	r4, r1
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	e049      	b.n	8002fae <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f1a:	4b30      	ldr	r3, [pc, #192]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x158>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	099b      	lsrs	r3, r3, #6
 8002f20:	f04f 0400 	mov.w	r4, #0
 8002f24:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	ea03 0501 	and.w	r5, r3, r1
 8002f30:	ea04 0602 	and.w	r6, r4, r2
 8002f34:	4629      	mov	r1, r5
 8002f36:	4632      	mov	r2, r6
 8002f38:	f04f 0300 	mov.w	r3, #0
 8002f3c:	f04f 0400 	mov.w	r4, #0
 8002f40:	0154      	lsls	r4, r2, #5
 8002f42:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f46:	014b      	lsls	r3, r1, #5
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4622      	mov	r2, r4
 8002f4c:	1b49      	subs	r1, r1, r5
 8002f4e:	eb62 0206 	sbc.w	r2, r2, r6
 8002f52:	f04f 0300 	mov.w	r3, #0
 8002f56:	f04f 0400 	mov.w	r4, #0
 8002f5a:	0194      	lsls	r4, r2, #6
 8002f5c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002f60:	018b      	lsls	r3, r1, #6
 8002f62:	1a5b      	subs	r3, r3, r1
 8002f64:	eb64 0402 	sbc.w	r4, r4, r2
 8002f68:	f04f 0100 	mov.w	r1, #0
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	00e2      	lsls	r2, r4, #3
 8002f72:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002f76:	00d9      	lsls	r1, r3, #3
 8002f78:	460b      	mov	r3, r1
 8002f7a:	4614      	mov	r4, r2
 8002f7c:	195b      	adds	r3, r3, r5
 8002f7e:	eb44 0406 	adc.w	r4, r4, r6
 8002f82:	f04f 0100 	mov.w	r1, #0
 8002f86:	f04f 0200 	mov.w	r2, #0
 8002f8a:	02a2      	lsls	r2, r4, #10
 8002f8c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002f90:	0299      	lsls	r1, r3, #10
 8002f92:	460b      	mov	r3, r1
 8002f94:	4614      	mov	r4, r2
 8002f96:	4618      	mov	r0, r3
 8002f98:	4621      	mov	r1, r4
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f04f 0400 	mov.w	r4, #0
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4623      	mov	r3, r4
 8002fa4:	f7fd f916 	bl	80001d4 <__aeabi_uldivmod>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	460c      	mov	r4, r1
 8002fac:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002fae:	4b0b      	ldr	r3, [pc, #44]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x158>)
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	0c1b      	lsrs	r3, r3, #16
 8002fb4:	f003 0303 	and.w	r3, r3, #3
 8002fb8:	3301      	adds	r3, #1
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fc6:	60bb      	str	r3, [r7, #8]
      break;
 8002fc8:	e002      	b.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002fca:	4b05      	ldr	r3, [pc, #20]	; (8002fe0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002fcc:	60bb      	str	r3, [r7, #8]
      break;
 8002fce:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002fd0:	68bb      	ldr	r3, [r7, #8]
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3714      	adds	r7, #20
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	00f42400 	.word	0x00f42400
 8002fe4:	017d7840 	.word	0x017d7840

08002fe8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	2b00      	cmp	r3, #0
 8003002:	d105      	bne.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800300c:	2b00      	cmp	r3, #0
 800300e:	d035      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003010:	4b67      	ldr	r3, [pc, #412]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003012:	2200      	movs	r2, #0
 8003014:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003016:	f7fe f83f 	bl	8001098 <HAL_GetTick>
 800301a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800301c:	e008      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800301e:	f7fe f83b 	bl	8001098 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d901      	bls.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e0ba      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003030:	4b60      	ldr	r3, [pc, #384]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1f0      	bne.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	019a      	lsls	r2, r3, #6
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	071b      	lsls	r3, r3, #28
 8003048:	495a      	ldr	r1, [pc, #360]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800304a:	4313      	orrs	r3, r2
 800304c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003050:	4b57      	ldr	r3, [pc, #348]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003052:	2201      	movs	r2, #1
 8003054:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003056:	f7fe f81f 	bl	8001098 <HAL_GetTick>
 800305a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800305c:	e008      	b.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800305e:	f7fe f81b 	bl	8001098 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d901      	bls.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e09a      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003070:	4b50      	ldr	r3, [pc, #320]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d0f0      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 8083 	beq.w	8003190 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800308a:	2300      	movs	r3, #0
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	4b49      	ldr	r3, [pc, #292]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	4a48      	ldr	r2, [pc, #288]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003098:	6413      	str	r3, [r2, #64]	; 0x40
 800309a:	4b46      	ldr	r3, [pc, #280]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80030a6:	4b44      	ldr	r3, [pc, #272]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a43      	ldr	r2, [pc, #268]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030b0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80030b2:	f7fd fff1 	bl	8001098 <HAL_GetTick>
 80030b6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80030b8:	e008      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80030ba:	f7fd ffed 	bl	8001098 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e06c      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80030cc:	4b3a      	ldr	r3, [pc, #232]	; (80031b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0f0      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030d8:	4b36      	ldr	r3, [pc, #216]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80030da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030e0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d02f      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d028      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030f6:	4b2f      	ldr	r3, [pc, #188]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80030f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030fe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003100:	4b2e      	ldr	r3, [pc, #184]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003102:	2201      	movs	r2, #1
 8003104:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003106:	4b2d      	ldr	r3, [pc, #180]	; (80031bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003108:	2200      	movs	r2, #0
 800310a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800310c:	4a29      	ldr	r2, [pc, #164]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003112:	4b28      	ldr	r3, [pc, #160]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b01      	cmp	r3, #1
 800311c:	d114      	bne.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800311e:	f7fd ffbb 	bl	8001098 <HAL_GetTick>
 8003122:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003124:	e00a      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003126:	f7fd ffb7 	bl	8001098 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	f241 3288 	movw	r2, #5000	; 0x1388
 8003134:	4293      	cmp	r3, r2
 8003136:	d901      	bls.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003138:	2303      	movs	r3, #3
 800313a:	e034      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800313c:	4b1d      	ldr	r3, [pc, #116]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800313e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0ee      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003150:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003154:	d10d      	bne.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003156:	4b17      	ldr	r3, [pc, #92]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003166:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800316a:	4912      	ldr	r1, [pc, #72]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800316c:	4313      	orrs	r3, r2
 800316e:	608b      	str	r3, [r1, #8]
 8003170:	e005      	b.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003172:	4b10      	ldr	r3, [pc, #64]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	4a0f      	ldr	r2, [pc, #60]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003178:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800317c:	6093      	str	r3, [r2, #8]
 800317e:	4b0d      	ldr	r3, [pc, #52]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003180:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800318a:	490a      	ldr	r1, [pc, #40]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800318c:	4313      	orrs	r3, r2
 800318e:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0308 	and.w	r3, r3, #8
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	7c1a      	ldrb	r2, [r3, #16]
 80031a0:	4b07      	ldr	r3, [pc, #28]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80031a2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3718      	adds	r7, #24
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}
 80031ae:	bf00      	nop
 80031b0:	42470068 	.word	0x42470068
 80031b4:	40023800 	.word	0x40023800
 80031b8:	40007000 	.word	0x40007000
 80031bc:	42470e40 	.word	0x42470e40
 80031c0:	424711e0 	.word	0x424711e0

080031c4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b087      	sub	sp, #28
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80031cc:	2300      	movs	r3, #0
 80031ce:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80031d0:	2300      	movs	r3, #0
 80031d2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80031d8:	2300      	movs	r3, #0
 80031da:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d13d      	bne.n	800325e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80031e2:	4b22      	ldr	r3, [pc, #136]	; (800326c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031ea:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d004      	beq.n	80031fc <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d12f      	bne.n	8003256 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80031f6:	4b1e      	ldr	r3, [pc, #120]	; (8003270 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80031f8:	617b      	str	r3, [r7, #20]
          break;
 80031fa:	e02f      	b.n	800325c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80031fc:	4b1b      	ldr	r3, [pc, #108]	; (800326c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003204:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003208:	d108      	bne.n	800321c <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800320a:	4b18      	ldr	r3, [pc, #96]	; (800326c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003212:	4a18      	ldr	r2, [pc, #96]	; (8003274 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003214:	fbb2 f3f3 	udiv	r3, r2, r3
 8003218:	613b      	str	r3, [r7, #16]
 800321a:	e007      	b.n	800322c <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800321c:	4b13      	ldr	r3, [pc, #76]	; (800326c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003224:	4a14      	ldr	r2, [pc, #80]	; (8003278 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003226:	fbb2 f3f3 	udiv	r3, r2, r3
 800322a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800322c:	4b0f      	ldr	r3, [pc, #60]	; (800326c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800322e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003232:	099b      	lsrs	r3, r3, #6
 8003234:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	fb02 f303 	mul.w	r3, r2, r3
 800323e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003240:	4b0a      	ldr	r3, [pc, #40]	; (800326c <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003242:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003246:	0f1b      	lsrs	r3, r3, #28
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	68ba      	ldr	r2, [r7, #8]
 800324e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003252:	617b      	str	r3, [r7, #20]
          break;
 8003254:	e002      	b.n	800325c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003256:	2300      	movs	r3, #0
 8003258:	617b      	str	r3, [r7, #20]
          break;
 800325a:	bf00      	nop
        }
      }
      break;
 800325c:	bf00      	nop
    }
  }
  return frequency;
 800325e:	697b      	ldr	r3, [r7, #20]
}
 8003260:	4618      	mov	r0, r3
 8003262:	371c      	adds	r7, #28
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	40023800 	.word	0x40023800
 8003270:	00bb8000 	.word	0x00bb8000
 8003274:	017d7840 	.word	0x017d7840
 8003278:	00f42400 	.word	0x00f42400

0800327c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e01d      	b.n	80032ca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d106      	bne.n	80032a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7fd fe40 	bl	8000f28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2202      	movs	r2, #2
 80032ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3304      	adds	r3, #4
 80032b8:	4619      	mov	r1, r3
 80032ba:	4610      	mov	r0, r2
 80032bc:	f000 f95e 	bl	800357c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b085      	sub	sp, #20
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	68da      	ldr	r2, [r3, #12]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f042 0201 	orr.w	r2, r2, #1
 80032e8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2b06      	cmp	r3, #6
 80032fa:	d007      	beq.n	800330c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0201 	orr.w	r2, r2, #1
 800330a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	b082      	sub	sp, #8
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b02      	cmp	r3, #2
 800332e:	d122      	bne.n	8003376 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	f003 0302 	and.w	r3, r3, #2
 800333a:	2b02      	cmp	r3, #2
 800333c:	d11b      	bne.n	8003376 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f06f 0202 	mvn.w	r2, #2
 8003346:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2201      	movs	r2, #1
 800334c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	f003 0303 	and.w	r3, r3, #3
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 f8ee 	bl	800353e <HAL_TIM_IC_CaptureCallback>
 8003362:	e005      	b.n	8003370 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 f8e0 	bl	800352a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f8f1 	bl	8003552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	f003 0304 	and.w	r3, r3, #4
 8003380:	2b04      	cmp	r3, #4
 8003382:	d122      	bne.n	80033ca <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f003 0304 	and.w	r3, r3, #4
 800338e:	2b04      	cmp	r3, #4
 8003390:	d11b      	bne.n	80033ca <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f06f 0204 	mvn.w	r2, #4
 800339a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2202      	movs	r2, #2
 80033a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d003      	beq.n	80033b8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 f8c4 	bl	800353e <HAL_TIM_IC_CaptureCallback>
 80033b6:	e005      	b.n	80033c4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 f8b6 	bl	800352a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f8c7 	bl	8003552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	f003 0308 	and.w	r3, r3, #8
 80033d4:	2b08      	cmp	r3, #8
 80033d6:	d122      	bne.n	800341e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	f003 0308 	and.w	r3, r3, #8
 80033e2:	2b08      	cmp	r3, #8
 80033e4:	d11b      	bne.n	800341e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f06f 0208 	mvn.w	r2, #8
 80033ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2204      	movs	r2, #4
 80033f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	69db      	ldr	r3, [r3, #28]
 80033fc:	f003 0303 	and.w	r3, r3, #3
 8003400:	2b00      	cmp	r3, #0
 8003402:	d003      	beq.n	800340c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f89a 	bl	800353e <HAL_TIM_IC_CaptureCallback>
 800340a:	e005      	b.n	8003418 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 f88c 	bl	800352a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f89d 	bl	8003552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	f003 0310 	and.w	r3, r3, #16
 8003428:	2b10      	cmp	r3, #16
 800342a:	d122      	bne.n	8003472 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f003 0310 	and.w	r3, r3, #16
 8003436:	2b10      	cmp	r3, #16
 8003438:	d11b      	bne.n	8003472 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f06f 0210 	mvn.w	r2, #16
 8003442:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2208      	movs	r2, #8
 8003448:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	69db      	ldr	r3, [r3, #28]
 8003450:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003454:	2b00      	cmp	r3, #0
 8003456:	d003      	beq.n	8003460 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 f870 	bl	800353e <HAL_TIM_IC_CaptureCallback>
 800345e:	e005      	b.n	800346c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 f862 	bl	800352a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f873 	bl	8003552 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	f003 0301 	and.w	r3, r3, #1
 800347c:	2b01      	cmp	r3, #1
 800347e:	d10e      	bne.n	800349e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b01      	cmp	r3, #1
 800348c:	d107      	bne.n	800349e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f06f 0201 	mvn.w	r2, #1
 8003496:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003498:	6878      	ldr	r0, [r7, #4]
 800349a:	f7fd fc01 	bl	8000ca0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034a8:	2b80      	cmp	r3, #128	; 0x80
 80034aa:	d10e      	bne.n	80034ca <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b6:	2b80      	cmp	r3, #128	; 0x80
 80034b8:	d107      	bne.n	80034ca <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	f000 f8e3 	bl	8003690 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034d4:	2b40      	cmp	r3, #64	; 0x40
 80034d6:	d10e      	bne.n	80034f6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e2:	2b40      	cmp	r3, #64	; 0x40
 80034e4:	d107      	bne.n	80034f6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 f838 	bl	8003566 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	f003 0320 	and.w	r3, r3, #32
 8003500:	2b20      	cmp	r3, #32
 8003502:	d10e      	bne.n	8003522 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	f003 0320 	and.w	r3, r3, #32
 800350e:	2b20      	cmp	r3, #32
 8003510:	d107      	bne.n	8003522 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f06f 0220 	mvn.w	r2, #32
 800351a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 f8ad 	bl	800367c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003522:	bf00      	nop
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800352a:	b480      	push	{r7}
 800352c:	b083      	sub	sp, #12
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr

0800353e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800353e:	b480      	push	{r7}
 8003540:	b083      	sub	sp, #12
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr

08003552 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003552:	b480      	push	{r7}
 8003554:	b083      	sub	sp, #12
 8003556:	af00      	add	r7, sp, #0
 8003558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800356e:	bf00      	nop
 8003570:	370c      	adds	r7, #12
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
	...

0800357c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a34      	ldr	r2, [pc, #208]	; (8003660 <TIM_Base_SetConfig+0xe4>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d00f      	beq.n	80035b4 <TIM_Base_SetConfig+0x38>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800359a:	d00b      	beq.n	80035b4 <TIM_Base_SetConfig+0x38>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a31      	ldr	r2, [pc, #196]	; (8003664 <TIM_Base_SetConfig+0xe8>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d007      	beq.n	80035b4 <TIM_Base_SetConfig+0x38>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	4a30      	ldr	r2, [pc, #192]	; (8003668 <TIM_Base_SetConfig+0xec>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d003      	beq.n	80035b4 <TIM_Base_SetConfig+0x38>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	4a2f      	ldr	r2, [pc, #188]	; (800366c <TIM_Base_SetConfig+0xf0>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d108      	bne.n	80035c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a25      	ldr	r2, [pc, #148]	; (8003660 <TIM_Base_SetConfig+0xe4>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d01b      	beq.n	8003606 <TIM_Base_SetConfig+0x8a>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d4:	d017      	beq.n	8003606 <TIM_Base_SetConfig+0x8a>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a22      	ldr	r2, [pc, #136]	; (8003664 <TIM_Base_SetConfig+0xe8>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d013      	beq.n	8003606 <TIM_Base_SetConfig+0x8a>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a21      	ldr	r2, [pc, #132]	; (8003668 <TIM_Base_SetConfig+0xec>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d00f      	beq.n	8003606 <TIM_Base_SetConfig+0x8a>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a20      	ldr	r2, [pc, #128]	; (800366c <TIM_Base_SetConfig+0xf0>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d00b      	beq.n	8003606 <TIM_Base_SetConfig+0x8a>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a1f      	ldr	r2, [pc, #124]	; (8003670 <TIM_Base_SetConfig+0xf4>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d007      	beq.n	8003606 <TIM_Base_SetConfig+0x8a>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a1e      	ldr	r2, [pc, #120]	; (8003674 <TIM_Base_SetConfig+0xf8>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d003      	beq.n	8003606 <TIM_Base_SetConfig+0x8a>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a1d      	ldr	r2, [pc, #116]	; (8003678 <TIM_Base_SetConfig+0xfc>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d108      	bne.n	8003618 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800360c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	4313      	orrs	r3, r2
 8003616:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	4313      	orrs	r3, r2
 8003624:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68fa      	ldr	r2, [r7, #12]
 800362a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a08      	ldr	r2, [pc, #32]	; (8003660 <TIM_Base_SetConfig+0xe4>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d103      	bne.n	800364c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	691a      	ldr	r2, [r3, #16]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	615a      	str	r2, [r3, #20]
}
 8003652:	bf00      	nop
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	40010000 	.word	0x40010000
 8003664:	40000400 	.word	0x40000400
 8003668:	40000800 	.word	0x40000800
 800366c:	40000c00 	.word	0x40000c00
 8003670:	40014000 	.word	0x40014000
 8003674:	40014400 	.word	0x40014400
 8003678:	40014800 	.word	0x40014800

0800367c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <_ZdlPvj>:
 80036a4:	f000 b800 	b.w	80036a8 <_ZdlPv>

080036a8 <_ZdlPv>:
 80036a8:	f000 b832 	b.w	8003710 <free>

080036ac <__errno>:
 80036ac:	4b01      	ldr	r3, [pc, #4]	; (80036b4 <__errno+0x8>)
 80036ae:	6818      	ldr	r0, [r3, #0]
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	2000000c 	.word	0x2000000c

080036b8 <__libc_init_array>:
 80036b8:	b570      	push	{r4, r5, r6, lr}
 80036ba:	4e0d      	ldr	r6, [pc, #52]	; (80036f0 <__libc_init_array+0x38>)
 80036bc:	4c0d      	ldr	r4, [pc, #52]	; (80036f4 <__libc_init_array+0x3c>)
 80036be:	1ba4      	subs	r4, r4, r6
 80036c0:	10a4      	asrs	r4, r4, #2
 80036c2:	2500      	movs	r5, #0
 80036c4:	42a5      	cmp	r5, r4
 80036c6:	d109      	bne.n	80036dc <__libc_init_array+0x24>
 80036c8:	4e0b      	ldr	r6, [pc, #44]	; (80036f8 <__libc_init_array+0x40>)
 80036ca:	4c0c      	ldr	r4, [pc, #48]	; (80036fc <__libc_init_array+0x44>)
 80036cc:	f000 f91e 	bl	800390c <_init>
 80036d0:	1ba4      	subs	r4, r4, r6
 80036d2:	10a4      	asrs	r4, r4, #2
 80036d4:	2500      	movs	r5, #0
 80036d6:	42a5      	cmp	r5, r4
 80036d8:	d105      	bne.n	80036e6 <__libc_init_array+0x2e>
 80036da:	bd70      	pop	{r4, r5, r6, pc}
 80036dc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036e0:	4798      	blx	r3
 80036e2:	3501      	adds	r5, #1
 80036e4:	e7ee      	b.n	80036c4 <__libc_init_array+0xc>
 80036e6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036ea:	4798      	blx	r3
 80036ec:	3501      	adds	r5, #1
 80036ee:	e7f2      	b.n	80036d6 <__libc_init_array+0x1e>
 80036f0:	08003954 	.word	0x08003954
 80036f4:	08003954 	.word	0x08003954
 80036f8:	08003954 	.word	0x08003954
 80036fc:	0800395c 	.word	0x0800395c

08003700 <malloc>:
 8003700:	4b02      	ldr	r3, [pc, #8]	; (800370c <malloc+0xc>)
 8003702:	4601      	mov	r1, r0
 8003704:	6818      	ldr	r0, [r3, #0]
 8003706:	f000 b861 	b.w	80037cc <_malloc_r>
 800370a:	bf00      	nop
 800370c:	2000000c 	.word	0x2000000c

08003710 <free>:
 8003710:	4b02      	ldr	r3, [pc, #8]	; (800371c <free+0xc>)
 8003712:	4601      	mov	r1, r0
 8003714:	6818      	ldr	r0, [r3, #0]
 8003716:	f000 b80b 	b.w	8003730 <_free_r>
 800371a:	bf00      	nop
 800371c:	2000000c 	.word	0x2000000c

08003720 <memset>:
 8003720:	4402      	add	r2, r0
 8003722:	4603      	mov	r3, r0
 8003724:	4293      	cmp	r3, r2
 8003726:	d100      	bne.n	800372a <memset+0xa>
 8003728:	4770      	bx	lr
 800372a:	f803 1b01 	strb.w	r1, [r3], #1
 800372e:	e7f9      	b.n	8003724 <memset+0x4>

08003730 <_free_r>:
 8003730:	b538      	push	{r3, r4, r5, lr}
 8003732:	4605      	mov	r5, r0
 8003734:	2900      	cmp	r1, #0
 8003736:	d045      	beq.n	80037c4 <_free_r+0x94>
 8003738:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800373c:	1f0c      	subs	r4, r1, #4
 800373e:	2b00      	cmp	r3, #0
 8003740:	bfb8      	it	lt
 8003742:	18e4      	addlt	r4, r4, r3
 8003744:	f000 f8e0 	bl	8003908 <__malloc_lock>
 8003748:	4a1f      	ldr	r2, [pc, #124]	; (80037c8 <_free_r+0x98>)
 800374a:	6813      	ldr	r3, [r2, #0]
 800374c:	4610      	mov	r0, r2
 800374e:	b933      	cbnz	r3, 800375e <_free_r+0x2e>
 8003750:	6063      	str	r3, [r4, #4]
 8003752:	6014      	str	r4, [r2, #0]
 8003754:	4628      	mov	r0, r5
 8003756:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800375a:	f000 b8d6 	b.w	800390a <__malloc_unlock>
 800375e:	42a3      	cmp	r3, r4
 8003760:	d90c      	bls.n	800377c <_free_r+0x4c>
 8003762:	6821      	ldr	r1, [r4, #0]
 8003764:	1862      	adds	r2, r4, r1
 8003766:	4293      	cmp	r3, r2
 8003768:	bf04      	itt	eq
 800376a:	681a      	ldreq	r2, [r3, #0]
 800376c:	685b      	ldreq	r3, [r3, #4]
 800376e:	6063      	str	r3, [r4, #4]
 8003770:	bf04      	itt	eq
 8003772:	1852      	addeq	r2, r2, r1
 8003774:	6022      	streq	r2, [r4, #0]
 8003776:	6004      	str	r4, [r0, #0]
 8003778:	e7ec      	b.n	8003754 <_free_r+0x24>
 800377a:	4613      	mov	r3, r2
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	b10a      	cbz	r2, 8003784 <_free_r+0x54>
 8003780:	42a2      	cmp	r2, r4
 8003782:	d9fa      	bls.n	800377a <_free_r+0x4a>
 8003784:	6819      	ldr	r1, [r3, #0]
 8003786:	1858      	adds	r0, r3, r1
 8003788:	42a0      	cmp	r0, r4
 800378a:	d10b      	bne.n	80037a4 <_free_r+0x74>
 800378c:	6820      	ldr	r0, [r4, #0]
 800378e:	4401      	add	r1, r0
 8003790:	1858      	adds	r0, r3, r1
 8003792:	4282      	cmp	r2, r0
 8003794:	6019      	str	r1, [r3, #0]
 8003796:	d1dd      	bne.n	8003754 <_free_r+0x24>
 8003798:	6810      	ldr	r0, [r2, #0]
 800379a:	6852      	ldr	r2, [r2, #4]
 800379c:	605a      	str	r2, [r3, #4]
 800379e:	4401      	add	r1, r0
 80037a0:	6019      	str	r1, [r3, #0]
 80037a2:	e7d7      	b.n	8003754 <_free_r+0x24>
 80037a4:	d902      	bls.n	80037ac <_free_r+0x7c>
 80037a6:	230c      	movs	r3, #12
 80037a8:	602b      	str	r3, [r5, #0]
 80037aa:	e7d3      	b.n	8003754 <_free_r+0x24>
 80037ac:	6820      	ldr	r0, [r4, #0]
 80037ae:	1821      	adds	r1, r4, r0
 80037b0:	428a      	cmp	r2, r1
 80037b2:	bf04      	itt	eq
 80037b4:	6811      	ldreq	r1, [r2, #0]
 80037b6:	6852      	ldreq	r2, [r2, #4]
 80037b8:	6062      	str	r2, [r4, #4]
 80037ba:	bf04      	itt	eq
 80037bc:	1809      	addeq	r1, r1, r0
 80037be:	6021      	streq	r1, [r4, #0]
 80037c0:	605c      	str	r4, [r3, #4]
 80037c2:	e7c7      	b.n	8003754 <_free_r+0x24>
 80037c4:	bd38      	pop	{r3, r4, r5, pc}
 80037c6:	bf00      	nop
 80037c8:	200018dc 	.word	0x200018dc

080037cc <_malloc_r>:
 80037cc:	b570      	push	{r4, r5, r6, lr}
 80037ce:	1ccd      	adds	r5, r1, #3
 80037d0:	f025 0503 	bic.w	r5, r5, #3
 80037d4:	3508      	adds	r5, #8
 80037d6:	2d0c      	cmp	r5, #12
 80037d8:	bf38      	it	cc
 80037da:	250c      	movcc	r5, #12
 80037dc:	2d00      	cmp	r5, #0
 80037de:	4606      	mov	r6, r0
 80037e0:	db01      	blt.n	80037e6 <_malloc_r+0x1a>
 80037e2:	42a9      	cmp	r1, r5
 80037e4:	d903      	bls.n	80037ee <_malloc_r+0x22>
 80037e6:	230c      	movs	r3, #12
 80037e8:	6033      	str	r3, [r6, #0]
 80037ea:	2000      	movs	r0, #0
 80037ec:	bd70      	pop	{r4, r5, r6, pc}
 80037ee:	f000 f88b 	bl	8003908 <__malloc_lock>
 80037f2:	4a21      	ldr	r2, [pc, #132]	; (8003878 <_malloc_r+0xac>)
 80037f4:	6814      	ldr	r4, [r2, #0]
 80037f6:	4621      	mov	r1, r4
 80037f8:	b991      	cbnz	r1, 8003820 <_malloc_r+0x54>
 80037fa:	4c20      	ldr	r4, [pc, #128]	; (800387c <_malloc_r+0xb0>)
 80037fc:	6823      	ldr	r3, [r4, #0]
 80037fe:	b91b      	cbnz	r3, 8003808 <_malloc_r+0x3c>
 8003800:	4630      	mov	r0, r6
 8003802:	f000 f871 	bl	80038e8 <_sbrk_r>
 8003806:	6020      	str	r0, [r4, #0]
 8003808:	4629      	mov	r1, r5
 800380a:	4630      	mov	r0, r6
 800380c:	f000 f86c 	bl	80038e8 <_sbrk_r>
 8003810:	1c43      	adds	r3, r0, #1
 8003812:	d124      	bne.n	800385e <_malloc_r+0x92>
 8003814:	230c      	movs	r3, #12
 8003816:	6033      	str	r3, [r6, #0]
 8003818:	4630      	mov	r0, r6
 800381a:	f000 f876 	bl	800390a <__malloc_unlock>
 800381e:	e7e4      	b.n	80037ea <_malloc_r+0x1e>
 8003820:	680b      	ldr	r3, [r1, #0]
 8003822:	1b5b      	subs	r3, r3, r5
 8003824:	d418      	bmi.n	8003858 <_malloc_r+0x8c>
 8003826:	2b0b      	cmp	r3, #11
 8003828:	d90f      	bls.n	800384a <_malloc_r+0x7e>
 800382a:	600b      	str	r3, [r1, #0]
 800382c:	50cd      	str	r5, [r1, r3]
 800382e:	18cc      	adds	r4, r1, r3
 8003830:	4630      	mov	r0, r6
 8003832:	f000 f86a 	bl	800390a <__malloc_unlock>
 8003836:	f104 000b 	add.w	r0, r4, #11
 800383a:	1d23      	adds	r3, r4, #4
 800383c:	f020 0007 	bic.w	r0, r0, #7
 8003840:	1ac3      	subs	r3, r0, r3
 8003842:	d0d3      	beq.n	80037ec <_malloc_r+0x20>
 8003844:	425a      	negs	r2, r3
 8003846:	50e2      	str	r2, [r4, r3]
 8003848:	e7d0      	b.n	80037ec <_malloc_r+0x20>
 800384a:	428c      	cmp	r4, r1
 800384c:	684b      	ldr	r3, [r1, #4]
 800384e:	bf16      	itet	ne
 8003850:	6063      	strne	r3, [r4, #4]
 8003852:	6013      	streq	r3, [r2, #0]
 8003854:	460c      	movne	r4, r1
 8003856:	e7eb      	b.n	8003830 <_malloc_r+0x64>
 8003858:	460c      	mov	r4, r1
 800385a:	6849      	ldr	r1, [r1, #4]
 800385c:	e7cc      	b.n	80037f8 <_malloc_r+0x2c>
 800385e:	1cc4      	adds	r4, r0, #3
 8003860:	f024 0403 	bic.w	r4, r4, #3
 8003864:	42a0      	cmp	r0, r4
 8003866:	d005      	beq.n	8003874 <_malloc_r+0xa8>
 8003868:	1a21      	subs	r1, r4, r0
 800386a:	4630      	mov	r0, r6
 800386c:	f000 f83c 	bl	80038e8 <_sbrk_r>
 8003870:	3001      	adds	r0, #1
 8003872:	d0cf      	beq.n	8003814 <_malloc_r+0x48>
 8003874:	6025      	str	r5, [r4, #0]
 8003876:	e7db      	b.n	8003830 <_malloc_r+0x64>
 8003878:	200018dc 	.word	0x200018dc
 800387c:	200018e0 	.word	0x200018e0

08003880 <rand>:
 8003880:	b538      	push	{r3, r4, r5, lr}
 8003882:	4b13      	ldr	r3, [pc, #76]	; (80038d0 <rand+0x50>)
 8003884:	681c      	ldr	r4, [r3, #0]
 8003886:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003888:	b97b      	cbnz	r3, 80038aa <rand+0x2a>
 800388a:	2018      	movs	r0, #24
 800388c:	f7ff ff38 	bl	8003700 <malloc>
 8003890:	4a10      	ldr	r2, [pc, #64]	; (80038d4 <rand+0x54>)
 8003892:	4b11      	ldr	r3, [pc, #68]	; (80038d8 <rand+0x58>)
 8003894:	63a0      	str	r0, [r4, #56]	; 0x38
 8003896:	e9c0 2300 	strd	r2, r3, [r0]
 800389a:	4b10      	ldr	r3, [pc, #64]	; (80038dc <rand+0x5c>)
 800389c:	6083      	str	r3, [r0, #8]
 800389e:	230b      	movs	r3, #11
 80038a0:	8183      	strh	r3, [r0, #12]
 80038a2:	2201      	movs	r2, #1
 80038a4:	2300      	movs	r3, #0
 80038a6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80038aa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80038ac:	480c      	ldr	r0, [pc, #48]	; (80038e0 <rand+0x60>)
 80038ae:	690a      	ldr	r2, [r1, #16]
 80038b0:	694b      	ldr	r3, [r1, #20]
 80038b2:	4c0c      	ldr	r4, [pc, #48]	; (80038e4 <rand+0x64>)
 80038b4:	4350      	muls	r0, r2
 80038b6:	fb04 0003 	mla	r0, r4, r3, r0
 80038ba:	fba2 2304 	umull	r2, r3, r2, r4
 80038be:	4403      	add	r3, r0
 80038c0:	1c54      	adds	r4, r2, #1
 80038c2:	f143 0500 	adc.w	r5, r3, #0
 80038c6:	e9c1 4504 	strd	r4, r5, [r1, #16]
 80038ca:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 80038ce:	bd38      	pop	{r3, r4, r5, pc}
 80038d0:	2000000c 	.word	0x2000000c
 80038d4:	abcd330e 	.word	0xabcd330e
 80038d8:	e66d1234 	.word	0xe66d1234
 80038dc:	0005deec 	.word	0x0005deec
 80038e0:	5851f42d 	.word	0x5851f42d
 80038e4:	4c957f2d 	.word	0x4c957f2d

080038e8 <_sbrk_r>:
 80038e8:	b538      	push	{r3, r4, r5, lr}
 80038ea:	4c06      	ldr	r4, [pc, #24]	; (8003904 <_sbrk_r+0x1c>)
 80038ec:	2300      	movs	r3, #0
 80038ee:	4605      	mov	r5, r0
 80038f0:	4608      	mov	r0, r1
 80038f2:	6023      	str	r3, [r4, #0]
 80038f4:	f7fd faa8 	bl	8000e48 <_sbrk>
 80038f8:	1c43      	adds	r3, r0, #1
 80038fa:	d102      	bne.n	8003902 <_sbrk_r+0x1a>
 80038fc:	6823      	ldr	r3, [r4, #0]
 80038fe:	b103      	cbz	r3, 8003902 <_sbrk_r+0x1a>
 8003900:	602b      	str	r3, [r5, #0]
 8003902:	bd38      	pop	{r3, r4, r5, pc}
 8003904:	200019d0 	.word	0x200019d0

08003908 <__malloc_lock>:
 8003908:	4770      	bx	lr

0800390a <__malloc_unlock>:
 800390a:	4770      	bx	lr

0800390c <_init>:
 800390c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390e:	bf00      	nop
 8003910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003912:	bc08      	pop	{r3}
 8003914:	469e      	mov	lr, r3
 8003916:	4770      	bx	lr

08003918 <_fini>:
 8003918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800391a:	bf00      	nop
 800391c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800391e:	bc08      	pop	{r3}
 8003920:	469e      	mov	lr, r3
 8003922:	4770      	bx	lr
