
pcm5102.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ab8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003c4c  08003c4c  00013c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c84  08003c84  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003c84  08003c84  00013c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c8c  08003c8c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003c8c  08003c8c  00013c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08003c94  08003c94  00013c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003c9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b5cc  20000070  08003d0c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000b63c  08003d0c  0002b63c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef48  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002982  00000000  00000000  0002efe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ce0  00000000  00000000  00031970  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b88  00000000  00000000  00032650  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019c9d  00000000  00000000  000331d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cb91  00000000  00000000  0004ce75  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e181  00000000  00000000  00059a06  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e7b87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000351c  00000000  00000000  000e7c04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000070 	.word	0x20000070
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003c34 	.word	0x08003c34

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000074 	.word	0x20000074
 80001d0:	08003c34 	.word	0x08003c34

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <_ZN5DelayC1Ev>:
 *      Author: michalb
 */

#include "Delay.h"

Delay::Delay() {
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	4a1e      	ldr	r2, [pc, #120]	; (8000558 <_ZN5DelayC1Ev+0x84>)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4a1b      	ldr	r2, [pc, #108]	; (800055c <_ZN5DelayC1Ev+0x88>)
 80004ee:	609a      	str	r2, [r3, #8]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	f644 6220 	movw	r2, #20000	; 0x4e20
 80004f6:	819a      	strh	r2, [r3, #12]
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 80004fe:	3350      	adds	r3, #80	; 0x50
 8000500:	f04f 0200 	mov.w	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 800050c:	3354      	adds	r3, #84	; 0x54
 800050e:	f04f 0200 	mov.w	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 800051a:	3358      	adds	r3, #88	; 0x58
 800051c:	f04f 0200 	mov.w	r2, #0
 8000520:	601a      	str	r2, [r3, #0]
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000528:	335c      	adds	r3, #92	; 0x5c
 800052a:	f04f 0200 	mov.w	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000536:	3360      	adds	r3, #96	; 0x60
 8000538:	f04f 0200 	mov.w	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000544:	3364      	adds	r3, #100	; 0x64
 8000546:	2200      	movs	r2, #0
 8000548:	801a      	strh	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	4618      	mov	r0, r3
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	08003c54 	.word	0x08003c54
 800055c:	3f19999a 	.word	0x3f19999a

08000560 <_ZN5DelayD1Ev>:

Delay::~Delay() {
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	4a04      	ldr	r2, [pc, #16]	; (800057c <_ZN5DelayD1Ev+0x1c>)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4618      	mov	r0, r3
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	08003c54 	.word	0x08003c54

08000580 <_ZN5DelayD0Ev>:
Delay::~Delay() {
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
}
 8000588:	6878      	ldr	r0, [r7, #4]
 800058a:	f7ff ffe9 	bl	8000560 <_ZN5DelayD1Ev>
 800058e:	f649 4168 	movw	r1, #40040	; 0x9c68
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f003 fa1a 	bl	80039cc <_ZdlPvj>
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	4618      	mov	r0, r3
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
	...

080005a4 <_ZN5Delay7processEt>:

void Delay::process(uint16_t x) {
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	460b      	mov	r3, r1
 80005ae:	807b      	strh	r3, [r7, #2]
	x = (float)x;
 80005b0:	887b      	ldrh	r3, [r7, #2]
 80005b2:	ee07 3a90 	vmov	s15, r3
 80005b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80005ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005be:	ee17 3a90 	vmov	r3, s15
 80005c2:	807b      	strh	r3, [r7, #2]
	if (cursor >= size)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 80005ca:	3350      	adds	r3, #80	; 0x50
 80005cc:	ed93 7a00 	vldr	s14, [r3]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	899b      	ldrh	r3, [r3, #12]
 80005d4:	ee07 3a90 	vmov	s15, r3
 80005d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80005e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005e4:	db13      	blt.n	800060e <_ZN5Delay7processEt+0x6a>
		cursor -= size;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 80005ec:	3350      	adds	r3, #80	; 0x50
 80005ee:	ed93 7a00 	vldr	s14, [r3]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	899b      	ldrh	r3, [r3, #12]
 80005f6:	ee07 3a90 	vmov	s15, r3
 80005fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000608:	3350      	adds	r3, #80	; 0x50
 800060a:	edc3 7a00 	vstr	s15, [r3]
	y = (float)buffer[(uint16_t)cursor];
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000614:	3350      	adds	r3, #80	; 0x50
 8000616:	edd3 7a00 	vldr	s15, [r3]
 800061a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800061e:	ee17 3a90 	vmov	r3, s15
 8000622:	b29b      	uxth	r3, r3
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	3304      	adds	r3, #4
 8000628:	005b      	lsls	r3, r3, #1
 800062a:	4413      	add	r3, r2
 800062c:	88db      	ldrh	r3, [r3, #6]
 800062e:	ee07 3a90 	vmov	s15, r3
 8000632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 800063c:	3360      	adds	r3, #96	; 0x60
 800063e:	edc3 7a00 	vstr	s15, [r3]

	y = 0.13f*y + 0.87f*lastout1;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000648:	3360      	adds	r3, #96	; 0x60
 800064a:	edd3 7a00 	vldr	s15, [r3]
 800064e:	ed9f 7a63 	vldr	s14, [pc, #396]	; 80007dc <_ZN5Delay7processEt+0x238>
 8000652:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 800065c:	3354      	adds	r3, #84	; 0x54
 800065e:	edd3 7a00 	vldr	s15, [r3]
 8000662:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80007e0 <_ZN5Delay7processEt+0x23c>
 8000666:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800066a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000674:	3360      	adds	r3, #96	; 0x60
 8000676:	edc3 7a00 	vstr	s15, [r3]
    lastout1 = y;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000680:	3360      	adds	r3, #96	; 0x60
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 800068a:	3354      	adds	r3, #84	; 0x54
 800068c:	601a      	str	r2, [r3, #0]
	y = 0.13f*y + 0.87f*lastout2;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000694:	3360      	adds	r3, #96	; 0x60
 8000696:	edd3 7a00 	vldr	s15, [r3]
 800069a:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80007dc <_ZN5Delay7processEt+0x238>
 800069e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 80006a8:	3358      	adds	r3, #88	; 0x58
 80006aa:	edd3 7a00 	vldr	s15, [r3]
 80006ae:	eddf 6a4c 	vldr	s13, [pc, #304]	; 80007e0 <_ZN5Delay7processEt+0x23c>
 80006b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80006b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 80006c0:	3360      	adds	r3, #96	; 0x60
 80006c2:	edc3 7a00 	vstr	s15, [r3]
    lastout2 = y;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 80006cc:	3360      	adds	r3, #96	; 0x60
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 80006d6:	3358      	adds	r3, #88	; 0x58
 80006d8:	601a      	str	r2, [r3, #0]
	y = 0.13f*y + 0.87f*lastout3;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 80006e0:	3360      	adds	r3, #96	; 0x60
 80006e2:	edd3 7a00 	vldr	s15, [r3]
 80006e6:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80007dc <_ZN5Delay7processEt+0x238>
 80006ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 80006f4:	335c      	adds	r3, #92	; 0x5c
 80006f6:	edd3 7a00 	vldr	s15, [r3]
 80006fa:	eddf 6a39 	vldr	s13, [pc, #228]	; 80007e0 <_ZN5Delay7processEt+0x23c>
 80006fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000702:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 800070c:	3360      	adds	r3, #96	; 0x60
 800070e:	edc3 7a00 	vstr	s15, [r3]
	lastout3 = y;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000718:	3360      	adds	r3, #96	; 0x60
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000722:	335c      	adds	r3, #92	; 0x5c
 8000724:	601a      	str	r2, [r3, #0]

	buffer[(uint16_t)cursor] = (uint16_t)(x + y * feedback);
 8000726:	887b      	ldrh	r3, [r7, #2]
 8000728:	ee07 3a90 	vmov	s15, r3
 800072c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000736:	3360      	adds	r3, #96	; 0x60
 8000738:	edd3 6a00 	vldr	s13, [r3]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000742:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000746:	ee77 7a27 	vadd.f32	s15, s14, s15
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000750:	3350      	adds	r3, #80	; 0x50
 8000752:	ed93 7a00 	vldr	s14, [r3]
 8000756:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800075a:	ee17 3a10 	vmov	r3, s14
 800075e:	b29b      	uxth	r3, r3
 8000760:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000764:	ee17 2a90 	vmov	r2, s15
 8000768:	b291      	uxth	r1, r2
 800076a:	687a      	ldr	r2, [r7, #4]
 800076c:	3304      	adds	r3, #4
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	4413      	add	r3, r2
 8000772:	460a      	mov	r2, r1
 8000774:	80da      	strh	r2, [r3, #6]

	cursor += delta;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 800077c:	3350      	adds	r3, #80	; 0x50
 800077e:	ed93 7a00 	vldr	s14, [r3]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	edd3 7a01 	vldr	s15, [r3, #4]
 8000788:	ee77 7a27 	vadd.f32	s15, s14, s15
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000792:	3350      	adds	r3, #80	; 0x50
 8000794:	edc3 7a00 	vstr	s15, [r3]

	out = (uint16_t)(x + y * 1.2f);
 8000798:	887b      	ldrh	r3, [r7, #2]
 800079a:	ee07 3a90 	vmov	s15, r3
 800079e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 80007a8:	3360      	adds	r3, #96	; 0x60
 80007aa:	edd3 7a00 	vldr	s15, [r3]
 80007ae:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80007e4 <_ZN5Delay7processEt+0x240>
 80007b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80007b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80007ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007be:	ee17 3a90 	vmov	r3, s15
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 80007ca:	3364      	adds	r3, #100	; 0x64
 80007cc:	801a      	strh	r2, [r3, #0]
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	3e051eb8 	.word	0x3e051eb8
 80007e0:	3f5eb852 	.word	0x3f5eb852
 80007e4:	3f99999a 	.word	0x3f99999a

080007e8 <_ZN7KarplusC1Ev>:

#include "Karplus.h"

#include "wavetable.h"

Karplus::Karplus() {
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	4a40      	ldr	r2, [pc, #256]	; (80008f4 <_ZN7KarplusC1Ev+0x10c>)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2200      	movs	r2, #0
 80007fa:	711a      	strb	r2, [r3, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	f04f 0200 	mov.w	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f04f 0200 	mov.w	r2, #0
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f04f 0200 	mov.w	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800081a:	3314      	adds	r3, #20
 800081c:	2200      	movs	r2, #0
 800081e:	801a      	strh	r2, [r3, #0]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000826:	3316      	adds	r3, #22
 8000828:	2200      	movs	r2, #0
 800082a:	801a      	strh	r2, [r3, #0]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000832:	3318      	adds	r3, #24
 8000834:	2200      	movs	r2, #0
 8000836:	801a      	strh	r2, [r3, #0]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800083e:	331a      	adds	r3, #26
 8000840:	2200      	movs	r2, #0
 8000842:	801a      	strh	r2, [r3, #0]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800084a:	331c      	adds	r3, #28
 800084c:	2200      	movs	r2, #0
 800084e:	801a      	strh	r2, [r3, #0]
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8000856:	f04f 0200 	mov.w	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8000862:	3304      	adds	r3, #4
 8000864:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8000870:	3308      	adds	r3, #8
 8000872:	f04f 0200 	mov.w	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800087e:	330c      	adds	r3, #12
 8000880:	2200      	movs	r2, #0
 8000882:	801a      	strh	r2, [r3, #0]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800088a:	3310      	adds	r3, #16
 800088c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8000898:	3314      	adds	r3, #20
 800089a:	4a17      	ldr	r2, [pc, #92]	; (80008f8 <_ZN7KarplusC1Ev+0x110>)
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80008a4:	3318      	adds	r3, #24
 80008a6:	f04f 0200 	mov.w	r2, #0
 80008aa:	601a      	str	r2, [r3, #0]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80008b2:	331c      	adds	r3, #28
 80008b4:	f04f 0200 	mov.w	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80008c0:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80008c4:	601a      	str	r2, [r3, #0]

	// one pole filter
	float out = 0.0f;
	float last_out = 0.0f;
	float a0 = 0.5f;
	float b1 = 1.0f - a0;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80008cc:	edd3 7a00 	vldr	s15, [r3]
 80008d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80008d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 80008de:	3304      	adds	r3, #4
 80008e0:	edc3 7a00 	vstr	s15, [r3]
	// TODO Auto-generated constructor stub

}
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	4618      	mov	r0, r3
 80008e8:	370c      	adds	r7, #12
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	08003c64 	.word	0x08003c64
 80008f8:	347f8cf0 	.word	0x347f8cf0

080008fc <_ZN7KarplusD1Ev>:

Karplus::~Karplus() {
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	4a04      	ldr	r2, [pc, #16]	; (8000918 <_ZN7KarplusD1Ev+0x1c>)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4618      	mov	r0, r3
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr
 8000918:	08003c64 	.word	0x08003c64

0800091c <_ZN7KarplusD0Ev>:
Karplus::~Karplus() {
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
}
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f7ff ffe9 	bl	80008fc <_ZN7KarplusD1Ev>
 800092a:	f241 0148 	movw	r1, #4168	; 0x1048
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	f003 f84c 	bl	80039cc <_ZdlPvj>
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4618      	mov	r0, r3
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <_ZN7Karplus12restore_freqEt>:
	last = 0.0f;
	curr = 0.0f;
	last_out = 0.0f;
}

void Karplus::restore_freq(uint16_t freqq) {
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	460b      	mov	r3, r1
 800094a:	807b      	strh	r3, [r7, #2]
	freq = freqq;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000952:	3316      	adds	r3, #22
 8000954:	887a      	ldrh	r2, [r7, #2]
 8000956:	801a      	strh	r2, [r3, #0]
	bound = (uint16_t)(42000.0f / (float)freq);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800095e:	3316      	adds	r3, #22
 8000960:	881b      	ldrh	r3, [r3, #0]
 8000962:	ee07 3a90 	vmov	s15, r3
 8000966:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800096a:	eddf 6a1c 	vldr	s13, [pc, #112]	; 80009dc <_ZN7Karplus12restore_freqEt+0x9c>
 800096e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000972:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000976:	ee17 3a90 	vmov	r3, s15
 800097a:	b29a      	uxth	r2, r3
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000982:	331a      	adds	r3, #26
 8000984:	801a      	strh	r2, [r3, #0]
	restore_noise();
 8000986:	6878      	ldr	r0, [r7, #4]
 8000988:	f000 f82a 	bl	80009e0 <_ZN7Karplus13restore_noiseEv>
	locat = 0;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000992:	3314      	adds	r3, #20
 8000994:	2200      	movs	r2, #0
 8000996:	801a      	strh	r2, [r3, #0]
	out = 0.0f;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800099e:	3318      	adds	r3, #24
 80009a0:	f04f 0200 	mov.w	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
	last = 0.0f;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	f04f 0200 	mov.w	r2, #0
 80009ac:	60da      	str	r2, [r3, #12]
	curr = 0.0f;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	f04f 0200 	mov.w	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
	last_out = 0.0f;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80009bc:	331c      	adds	r3, #28
 80009be:	f04f 0200 	mov.w	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
	decay = 1.0f;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80009ca:	3310      	adds	r3, #16
 80009cc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80009d0:	601a      	str	r2, [r3, #0]
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	47241000 	.word	0x47241000

080009e0 <_ZN7Karplus13restore_noiseEv>:

void Karplus::restore_noise() {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < KARPLUS_DELAY_SIZE; i++) {
 80009e8:	2300      	movs	r3, #0
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009f2:	da37      	bge.n	8000a64 <_ZN7Karplus13restore_noiseEv+0x84>
    	float rnd = static_cast <float> (rand()) / static_cast <float> (RAND_MAX);
 80009f4:	f003 f8d8 	bl	8003ba8 <rand>
 80009f8:	ee07 0a90 	vmov	s15, r0
 80009fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a00:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8000a6c <_ZN7Karplus13restore_noiseEv+0x8c>
 8000a04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a08:	edc7 7a02 	vstr	s15, [r7, #8]
      accum = accum - (lowpass * (accum - rnd));
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8000a12:	ed93 7a00 	vldr	s14, [r3]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8000a1c:	3304      	adds	r3, #4
 8000a1e:	edd3 6a00 	vldr	s13, [r3]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8000a28:	ed93 6a00 	vldr	s12, [r3]
 8000a2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a30:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000a34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8000a42:	edc3 7a00 	vstr	s15, [r3]
      delay_mem[i] = accum;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	6879      	ldr	r1, [r7, #4]
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	3304      	adds	r3, #4
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	440b      	add	r3, r1
 8000a58:	3304      	adds	r3, #4
 8000a5a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < KARPLUS_DELAY_SIZE; i++) {
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	e7c3      	b.n	80009ec <_ZN7Karplus13restore_noiseEv+0xc>
    }
}
 8000a64:	bf00      	nop
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	4f000000 	.word	0x4f000000

08000a70 <_ZN7Karplus11get_karplusEf>:
void Karplus::get_karplus(float adsr_output) {
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	ed87 0a00 	vstr	s0, [r7]
	delay_mem[locat++] = out;
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a82:	3314      	adds	r3, #20
 8000a84:	881a      	ldrh	r2, [r3, #0]
 8000a86:	1c53      	adds	r3, r2, #1
 8000a88:	b299      	uxth	r1, r3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000a90:	3314      	adds	r3, #20
 8000a92:	8019      	strh	r1, [r3, #0]
 8000a94:	4610      	mov	r0, r2
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8000a9c:	3318      	adds	r3, #24
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	6879      	ldr	r1, [r7, #4]
 8000aa2:	1d03      	adds	r3, r0, #4
 8000aa4:	009b      	lsls	r3, r3, #2
 8000aa6:	440b      	add	r3, r1
 8000aa8:	3304      	adds	r3, #4
 8000aaa:	601a      	str	r2, [r3, #0]
    if (locat >= bound) locat = 0;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ab2:	3314      	adds	r3, #20
 8000ab4:	881a      	ldrh	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000abc:	331a      	adds	r3, #26
 8000abe:	881b      	ldrh	r3, [r3, #0]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d305      	bcc.n	8000ad0 <_ZN7Karplus11get_karplusEf+0x60>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000aca:	3314      	adds	r3, #20
 8000acc:	2200      	movs	r2, #0
 8000ace:	801a      	strh	r2, [r3, #0]
    curr = delay_mem[locat];
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ad6:	3314      	adds	r3, #20
 8000ad8:	881b      	ldrh	r3, [r3, #0]
 8000ada:	687a      	ldr	r2, [r7, #4]
 8000adc:	3304      	adds	r3, #4
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	4413      	add	r3, r2
 8000ae2:	3304      	adds	r3, #4
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	611a      	str	r2, [r3, #16]
//    val = adsr_output * 0.5 * (last + curr);
    val =  0.5 * (last + curr);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	ed93 7a03 	vldr	s14, [r3, #12]
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	edd3 7a04 	vldr	s15, [r3, #16]
 8000af6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000afa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000afe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	edc3 7a02 	vstr	s15, [r3, #8]
    out = last_out + a0 * (val - last_out);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8000b0e:	331c      	adds	r3, #28
 8000b10:	ed93 7a00 	vldr	s14, [r3]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f503 5382 	add.w	r3, r3, #4160	; 0x1040
 8000b1a:	edd3 6a00 	vldr	s13, [r3]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	ed93 6a02 	vldr	s12, [r3, #8]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8000b2a:	331c      	adds	r3, #28
 8000b2c:	edd3 7a00 	vldr	s15, [r3]
 8000b30:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000b34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8000b42:	3318      	adds	r3, #24
 8000b44:	edc3 7a00 	vstr	s15, [r3]
    last = curr;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	691a      	ldr	r2, [r3, #16]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	60da      	str	r2, [r3, #12]
    last_out = out;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8000b56:	3318      	adds	r3, #24
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8000b60:	331c      	adds	r3, #28
 8000b62:	601a      	str	r2, [r3, #0]

}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <MX_DMA_Init+0x3c>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a0b      	ldr	r2, [pc, #44]	; (8000bac <MX_DMA_Init+0x3c>)
 8000b80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <MX_DMA_Init+0x3c>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000b92:	2200      	movs	r2, #0
 8000b94:	2100      	movs	r1, #0
 8000b96:	200f      	movs	r0, #15
 8000b98:	f000 fcf9 	bl	800158e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000b9c:	200f      	movs	r0, #15
 8000b9e:	f000 fd12 	bl	80015c6 <HAL_NVIC_EnableIRQ>

}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40023800 	.word	0x40023800

08000bb0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b085      	sub	sp, #20
 8000bb4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	60fb      	str	r3, [r7, #12]
 8000bba:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <MX_GPIO_Init+0x68>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a16      	ldr	r2, [pc, #88]	; (8000c18 <MX_GPIO_Init+0x68>)
 8000bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <MX_GPIO_Init+0x68>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <MX_GPIO_Init+0x68>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a0f      	ldr	r2, [pc, #60]	; (8000c18 <MX_GPIO_Init+0x68>)
 8000bdc:	f043 0302 	orr.w	r3, r3, #2
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b0d      	ldr	r3, [pc, #52]	; (8000c18 <MX_GPIO_Init+0x68>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0302 	and.w	r3, r3, #2
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <MX_GPIO_Init+0x68>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a08      	ldr	r2, [pc, #32]	; (8000c18 <MX_GPIO_Init+0x68>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <MX_GPIO_Init+0x68>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]

}
 8000c0a:	bf00      	nop
 8000c0c:	3714      	adds	r7, #20
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	40023800 	.word	0x40023800

08000c1c <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_tx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0

  hi2s2.Instance = SPI2;
 8000c20:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <MX_I2S2_Init+0x54>)
 8000c22:	4a14      	ldr	r2, [pc, #80]	; (8000c74 <MX_I2S2_Init+0x58>)
 8000c24:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000c26:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <MX_I2S2_Init+0x54>)
 8000c28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c2c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000c2e:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <MX_I2S2_Init+0x54>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000c34:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <MX_I2S2_Init+0x54>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000c3a:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <MX_I2S2_Init+0x54>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000c40:	4b0b      	ldr	r3, [pc, #44]	; (8000c70 <MX_I2S2_Init+0x54>)
 8000c42:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000c46:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000c48:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <MX_I2S2_Init+0x54>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000c4e:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <MX_I2S2_Init+0x54>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <MX_I2S2_Init+0x54>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000c5a:	4805      	ldr	r0, [pc, #20]	; (8000c70 <MX_I2S2_Init+0x54>)
 8000c5c:	f001 f9be 	bl	8001fdc <HAL_I2S_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 8000c66:	f000 f9d8 	bl	800101a <Error_Handler>
  }

}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	2000b5ac 	.word	0x2000b5ac
 8000c74:	40003800 	.word	0x40003800

08000c78 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	; 0x28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a31      	ldr	r2, [pc, #196]	; (8000d5c <HAL_I2S_MspInit+0xe4>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d15c      	bne.n	8000d54 <HAL_I2S_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	4b30      	ldr	r3, [pc, #192]	; (8000d60 <HAL_I2S_MspInit+0xe8>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	4a2f      	ldr	r2, [pc, #188]	; (8000d60 <HAL_I2S_MspInit+0xe8>)
 8000ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8000caa:	4b2d      	ldr	r3, [pc, #180]	; (8000d60 <HAL_I2S_MspInit+0xe8>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	4b29      	ldr	r3, [pc, #164]	; (8000d60 <HAL_I2S_MspInit+0xe8>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a28      	ldr	r2, [pc, #160]	; (8000d60 <HAL_I2S_MspInit+0xe8>)
 8000cc0:	f043 0302 	orr.w	r3, r3, #2
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b26      	ldr	r3, [pc, #152]	; (8000d60 <HAL_I2S_MspInit+0xe8>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0302 	and.w	r3, r3, #2
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000cd2:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ce4:	2305      	movs	r3, #5
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	4619      	mov	r1, r3
 8000cee:	481d      	ldr	r0, [pc, #116]	; (8000d64 <HAL_I2S_MspInit+0xec>)
 8000cf0:	f000 fff2 	bl	8001cd8 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000cf4:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <HAL_I2S_MspInit+0xf0>)
 8000cf6:	4a1d      	ldr	r2, [pc, #116]	; (8000d6c <HAL_I2S_MspInit+0xf4>)
 8000cf8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000cfa:	4b1b      	ldr	r3, [pc, #108]	; (8000d68 <HAL_I2S_MspInit+0xf0>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d00:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <HAL_I2S_MspInit+0xf0>)
 8000d02:	2240      	movs	r2, #64	; 0x40
 8000d04:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d06:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <HAL_I2S_MspInit+0xf0>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d0c:	4b16      	ldr	r3, [pc, #88]	; (8000d68 <HAL_I2S_MspInit+0xf0>)
 8000d0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d12:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d14:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <HAL_I2S_MspInit+0xf0>)
 8000d16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d1a:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <HAL_I2S_MspInit+0xf0>)
 8000d1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d22:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000d24:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <HAL_I2S_MspInit+0xf0>)
 8000d26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d2a:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d2c:	4b0e      	ldr	r3, [pc, #56]	; (8000d68 <HAL_I2S_MspInit+0xf0>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d32:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <HAL_I2S_MspInit+0xf0>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000d38:	480b      	ldr	r0, [pc, #44]	; (8000d68 <HAL_I2S_MspInit+0xf0>)
 8000d3a:	f000 fc5f 	bl	80015fc <HAL_DMA_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <HAL_I2S_MspInit+0xd0>
    {
      Error_Handler();
 8000d44:	f000 f969 	bl	800101a <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmatx,hdma_spi2_tx);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4a07      	ldr	r2, [pc, #28]	; (8000d68 <HAL_I2S_MspInit+0xf0>)
 8000d4c:	639a      	str	r2, [r3, #56]	; 0x38
 8000d4e:	4a06      	ldr	r2, [pc, #24]	; (8000d68 <HAL_I2S_MspInit+0xf0>)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000d54:	bf00      	nop
 8000d56:	3728      	adds	r7, #40	; 0x28
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40003800 	.word	0x40003800
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40020400 	.word	0x40020400
 8000d68:	2000b54c 	.word	0x2000b54c
 8000d6c:	40026070 	.word	0x40026070

08000d70 <_Z10make_soundt>:

uint16_t audiobuff[BUFF_LEN];

uint16_t once = 1;

void make_sound(uint16_t index) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	80fb      	strh	r3, [r7, #6]
	uint16_t threshold = index + BUFF_LEN_DIV2;
 8000d7a:	88fb      	ldrh	r3, [r7, #6]
 8000d7c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000d80:	81fb      	strh	r3, [r7, #14]

	while(index <= threshold ) {
 8000d82:	88fa      	ldrh	r2, [r7, #6]
 8000d84:	89fb      	ldrh	r3, [r7, #14]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d82f      	bhi.n	8000dea <_Z10make_soundt+0x7a>
		karplus.get_karplus(0.5f);
 8000d8a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8000d8e:	4819      	ldr	r0, [pc, #100]	; (8000df4 <_Z10make_soundt+0x84>)
 8000d90:	f7ff fe6e 	bl	8000a70 <_ZN7Karplus11get_karplusEf>
		uint16_t val = (uint16_t)(karplus.out * 30000.0f);
 8000d94:	4b17      	ldr	r3, [pc, #92]	; (8000df4 <_Z10make_soundt+0x84>)
 8000d96:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8000d9a:	3318      	adds	r3, #24
 8000d9c:	edd3 7a00 	vldr	s15, [r3]
 8000da0:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000df8 <_Z10make_soundt+0x88>
 8000da4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000da8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dac:	ee17 3a90 	vmov	r3, s15
 8000db0:	81bb      	strh	r3, [r7, #12]
		delay.process(val);
 8000db2:	89bb      	ldrh	r3, [r7, #12]
 8000db4:	4619      	mov	r1, r3
 8000db6:	4811      	ldr	r0, [pc, #68]	; (8000dfc <_Z10make_soundt+0x8c>)
 8000db8:	f7ff fbf4 	bl	80005a4 <_ZN5Delay7processEt>
		audiobuff[index] = (uint16_t)(delay.out);
 8000dbc:	88fa      	ldrh	r2, [r7, #6]
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <_Z10make_soundt+0x8c>)
 8000dc0:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000dc4:	3364      	adds	r3, #100	; 0x64
 8000dc6:	8819      	ldrh	r1, [r3, #0]
 8000dc8:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <_Z10make_soundt+0x90>)
 8000dca:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		audiobuff[index+1] = (uint16_t)(delay.out);
 8000dce:	88fb      	ldrh	r3, [r7, #6]
 8000dd0:	1c5a      	adds	r2, r3, #1
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <_Z10make_soundt+0x8c>)
 8000dd4:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8000dd8:	3364      	adds	r3, #100	; 0x64
 8000dda:	8819      	ldrh	r1, [r3, #0]
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <_Z10make_soundt+0x90>)
 8000dde:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		index += 2;
 8000de2:	88fb      	ldrh	r3, [r7, #6]
 8000de4:	3302      	adds	r3, #2
 8000de6:	80fb      	strh	r3, [r7, #6]
	while(index <= threshold ) {
 8000de8:	e7cb      	b.n	8000d82 <_Z10make_soundt+0x12>
	}
}
 8000dea:	bf00      	nop
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	2000008c 	.word	0x2000008c
 8000df8:	46ea6000 	.word	0x46ea6000
 8000dfc:	200010d4 	.word	0x200010d4
 8000e00:	2000ad40 	.word	0x2000ad40

08000e04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e08:	f000 fa74 	bl	80012f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e0c:	f000 f842 	bl	8000e94 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e10:	f7ff fece 	bl	8000bb0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e14:	f7ff feac 	bl	8000b70 <MX_DMA_Init>
  MX_I2S2_Init();
 8000e18:	f7ff ff00 	bl	8000c1c <MX_I2S2_Init>
  MX_TIM10_Init();
 8000e1c:	f000 f9f4 	bl	8001208 <MX_TIM10_Init>
//  MX_TIM10_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim10);
 8000e20:	4816      	ldr	r0, [pc, #88]	; (8000e7c <main+0x78>)
 8000e22:	f002 fbea 	bl	80035fa <HAL_TIM_Base_Start_IT>
  HAL_I2S_Transmit_DMA(&hi2s2, (uint16_t *)audiobuff, BUFF_LEN);
 8000e26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e2a:	4915      	ldr	r1, [pc, #84]	; (8000e80 <main+0x7c>)
 8000e2c:	4815      	ldr	r0, [pc, #84]	; (8000e84 <main+0x80>)
 8000e2e:	f001 fa15 	bl	800225c <HAL_I2S_Transmit_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(ms_cnt > 20000) {
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <main+0x84>)
 8000e34:	881b      	ldrh	r3, [r3, #0]
 8000e36:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d9f9      	bls.n	8000e32 <main+0x2e>
		  ms_cnt = 0;
 8000e3e:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <main+0x84>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	801a      	strh	r2, [r3, #0]
		  karplus.restore_freq((float)(rand() % 100 + 50));
 8000e44:	f002 feb0 	bl	8003ba8 <rand>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <main+0x88>)
 8000e4c:	fb83 1302 	smull	r1, r3, r3, r2
 8000e50:	1159      	asrs	r1, r3, #5
 8000e52:	17d3      	asrs	r3, r2, #31
 8000e54:	1acb      	subs	r3, r1, r3
 8000e56:	2164      	movs	r1, #100	; 0x64
 8000e58:	fb01 f303 	mul.w	r3, r1, r3
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	3332      	adds	r3, #50	; 0x32
 8000e60:	ee07 3a90 	vmov	s15, r3
 8000e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e6c:	ee17 3a90 	vmov	r3, s15
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	4619      	mov	r1, r3
 8000e74:	4806      	ldr	r0, [pc, #24]	; (8000e90 <main+0x8c>)
 8000e76:	f7ff fd63 	bl	8000940 <_ZN7Karplus12restore_freqEt>
	  if(ms_cnt > 20000) {
 8000e7a:	e7da      	b.n	8000e32 <main+0x2e>
 8000e7c:	2000b5f4 	.word	0x2000b5f4
 8000e80:	2000ad40 	.word	0x2000ad40
 8000e84:	2000b5ac 	.word	0x2000b5ac
 8000e88:	2000ad3c 	.word	0x2000ad3c
 8000e8c:	51eb851f 	.word	0x51eb851f
 8000e90:	2000008c 	.word	0x2000008c

08000e94 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b098      	sub	sp, #96	; 0x60
 8000e98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e9e:	2230      	movs	r2, #48	; 0x30
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f002 fdd0 	bl	8003a48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea8:	f107 031c 	add.w	r3, r7, #28
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eb8:	f107 0308 	add.w	r3, r7, #8
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec8:	2300      	movs	r3, #0
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	4b38      	ldr	r3, [pc, #224]	; (8000fb0 <_Z18SystemClock_Configv+0x11c>)
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	4a37      	ldr	r2, [pc, #220]	; (8000fb0 <_Z18SystemClock_Configv+0x11c>)
 8000ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ed6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed8:	4b35      	ldr	r3, [pc, #212]	; (8000fb0 <_Z18SystemClock_Configv+0x11c>)
 8000eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000edc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee0:	607b      	str	r3, [r7, #4]
 8000ee2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	603b      	str	r3, [r7, #0]
 8000ee8:	4b32      	ldr	r3, [pc, #200]	; (8000fb4 <_Z18SystemClock_Configv+0x120>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ef0:	4a30      	ldr	r2, [pc, #192]	; (8000fb4 <_Z18SystemClock_Configv+0x120>)
 8000ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ef6:	6013      	str	r3, [r2, #0]
 8000ef8:	4b2e      	ldr	r3, [pc, #184]	; (8000fb4 <_Z18SystemClock_Configv+0x120>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f00:	603b      	str	r3, [r7, #0]
 8000f02:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f04:	2301      	movs	r3, #1
 8000f06:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f0c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f16:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000f18:	2319      	movs	r3, #25
 8000f1a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f1c:	23a8      	movs	r3, #168	; 0xa8
 8000f1e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f20:	2302      	movs	r3, #2
 8000f22:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f24:	2304      	movs	r3, #4
 8000f26:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f001 fde7 	bl	8002b00 <HAL_RCC_OscConfig>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	bf14      	ite	ne
 8000f38:	2301      	movne	r3, #1
 8000f3a:	2300      	moveq	r3, #0
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <_Z18SystemClock_Configv+0xb2>
  {
    Error_Handler();
 8000f42:	f000 f86a 	bl	800101a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f46:	230f      	movs	r3, #15
 8000f48:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f56:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f5c:	f107 031c 	add.w	r3, r7, #28
 8000f60:	2102      	movs	r1, #2
 8000f62:	4618      	mov	r0, r3
 8000f64:	f002 f83c 	bl	8002fe0 <HAL_RCC_ClockConfig>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	bf14      	ite	ne
 8000f6e:	2301      	movne	r3, #1
 8000f70:	2300      	moveq	r3, #0
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <_Z18SystemClock_Configv+0xe8>
  {
    Error_Handler();
 8000f78:	f000 f84f 	bl	800101a <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000f80:	23c0      	movs	r3, #192	; 0xc0
 8000f82:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000f84:	2302      	movs	r3, #2
 8000f86:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f88:	f107 0308 	add.w	r3, r7, #8
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f002 f9bf 	bl	8003310 <HAL_RCCEx_PeriphCLKConfig>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	bf14      	ite	ne
 8000f98:	2301      	movne	r3, #1
 8000f9a:	2300      	moveq	r3, #0
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <_Z18SystemClock_Configv+0x112>
  {
    Error_Handler();
 8000fa2:	f000 f83a 	bl	800101a <Error_Handler>
  }
}
 8000fa6:	bf00      	nop
 8000fa8:	3760      	adds	r7, #96	; 0x60
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40007000 	.word	0x40007000

08000fb8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM10){
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a07      	ldr	r2, [pc, #28]	; (8000fe4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d105      	bne.n	8000fd6 <HAL_TIM_PeriodElapsedCallback+0x1e>
		ms_cnt++;
 8000fca:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000fcc:	881b      	ldrh	r3, [r3, #0]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000fd4:	801a      	strh	r2, [r3, #0]

	}
}
 8000fd6:	bf00      	nop
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	40014400 	.word	0x40014400
 8000fe8:	2000ad3c 	.word	0x2000ad3c

08000fec <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  make_sound(0);
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f7ff febb 	bl	8000d70 <_Z10make_soundt>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
  make_sound(BUFF_LEN_DIV2);
 800100a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800100e:	f7ff feaf 	bl	8000d70 <_Z10make_soundt>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <_Z41__static_initialization_and_destruction_0ii>:
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2b01      	cmp	r3, #1
 8001036:	d10a      	bne.n	800104e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800103e:	4293      	cmp	r3, r2
 8001040:	d105      	bne.n	800104e <_Z41__static_initialization_and_destruction_0ii+0x26>
Karplus karplus;
 8001042:	480c      	ldr	r0, [pc, #48]	; (8001074 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001044:	f7ff fbd0 	bl	80007e8 <_ZN7KarplusC1Ev>
Delay delay;
 8001048:	480b      	ldr	r0, [pc, #44]	; (8001078 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800104a:	f7ff fa43 	bl	80004d4 <_ZN5DelayC1Ev>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d10a      	bne.n	800106a <_Z41__static_initialization_and_destruction_0ii+0x42>
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800105a:	4293      	cmp	r3, r2
 800105c:	d105      	bne.n	800106a <_Z41__static_initialization_and_destruction_0ii+0x42>
 800105e:	4806      	ldr	r0, [pc, #24]	; (8001078 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8001060:	f7ff fa7e 	bl	8000560 <_ZN5DelayD1Ev>
Karplus karplus;
 8001064:	4803      	ldr	r0, [pc, #12]	; (8001074 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8001066:	f7ff fc49 	bl	80008fc <_ZN7KarplusD1Ev>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	2000008c 	.word	0x2000008c
 8001078:	200010d4 	.word	0x200010d4

0800107c <_GLOBAL__sub_I_karplus>:
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
 8001080:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001084:	2001      	movs	r0, #1
 8001086:	f7ff ffcf 	bl	8001028 <_Z41__static_initialization_and_destruction_0ii>
 800108a:	bd80      	pop	{r7, pc}

0800108c <_GLOBAL__sub_D_karplus>:
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
 8001090:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001094:	2000      	movs	r0, #0
 8001096:	f7ff ffc7 	bl	8001028 <_Z41__static_initialization_and_destruction_0ii>
 800109a:	bd80      	pop	{r7, pc}

0800109c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <HAL_MspInit+0x4c>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010aa:	4a0f      	ldr	r2, [pc, #60]	; (80010e8 <HAL_MspInit+0x4c>)
 80010ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b0:	6453      	str	r3, [r2, #68]	; 0x44
 80010b2:	4b0d      	ldr	r3, [pc, #52]	; (80010e8 <HAL_MspInit+0x4c>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	603b      	str	r3, [r7, #0]
 80010c2:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <HAL_MspInit+0x4c>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	4a08      	ldr	r2, [pc, #32]	; (80010e8 <HAL_MspInit+0x4c>)
 80010c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010cc:	6413      	str	r3, [r2, #64]	; 0x40
 80010ce:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <HAL_MspInit+0x4c>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d6:	603b      	str	r3, [r7, #0]
 80010d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800

080010ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010fe:	e7fe      	b.n	80010fe <HardFault_Handler+0x4>

08001100 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001104:	e7fe      	b.n	8001104 <MemManage_Handler+0x4>

08001106 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800110a:	e7fe      	b.n	800110a <BusFault_Handler+0x4>

0800110c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001110:	e7fe      	b.n	8001110 <UsageFault_Handler+0x4>

08001112 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001140:	f000 f92a 	bl	8001398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}

08001148 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800114c:	4802      	ldr	r0, [pc, #8]	; (8001158 <DMA1_Stream4_IRQHandler+0x10>)
 800114e:	f000 fb5b 	bl	8001808 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	2000b54c 	.word	0x2000b54c

0800115c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001160:	4802      	ldr	r0, [pc, #8]	; (800116c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001162:	f002 fa6e 	bl	8003642 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	2000b5f4 	.word	0x2000b5f4

08001170 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001178:	4a14      	ldr	r2, [pc, #80]	; (80011cc <_sbrk+0x5c>)
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <_sbrk+0x60>)
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001184:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <_sbrk+0x64>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d102      	bne.n	8001192 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <_sbrk+0x64>)
 800118e:	4a12      	ldr	r2, [pc, #72]	; (80011d8 <_sbrk+0x68>)
 8001190:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <_sbrk+0x64>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	429a      	cmp	r2, r3
 800119e:	d207      	bcs.n	80011b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011a0:	f002 fc18 	bl	80039d4 <__errno>
 80011a4:	4602      	mov	r2, r0
 80011a6:	230c      	movs	r3, #12
 80011a8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80011aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011ae:	e009      	b.n	80011c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <_sbrk+0x64>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011b6:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <_sbrk+0x64>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	4a05      	ldr	r2, [pc, #20]	; (80011d4 <_sbrk+0x64>)
 80011c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011c2:	68fb      	ldr	r3, [r7, #12]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20010000 	.word	0x20010000
 80011d0:	00000400 	.word	0x00000400
 80011d4:	2000b540 	.word	0x2000b540
 80011d8:	2000b640 	.word	0x2000b640

080011dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <SystemInit+0x28>)
 80011e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011e6:	4a07      	ldr	r2, [pc, #28]	; (8001204 <SystemInit+0x28>)
 80011e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011f0:	4b04      	ldr	r3, [pc, #16]	; (8001204 <SystemInit+0x28>)
 80011f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80011f6:	609a      	str	r2, [r3, #8]
#endif
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <MX_TIM10_Init>:

TIM_HandleTypeDef htim10;

/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0

  htim10.Instance = TIM10;
 800120c:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <MX_TIM10_Init+0x40>)
 800120e:	4a0f      	ldr	r2, [pc, #60]	; (800124c <MX_TIM10_Init+0x44>)
 8001210:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001212:	4b0d      	ldr	r3, [pc, #52]	; (8001248 <MX_TIM10_Init+0x40>)
 8001214:	2200      	movs	r2, #0
 8001216:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001218:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <MX_TIM10_Init+0x40>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8400-1;
 800121e:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <MX_TIM10_Init+0x40>)
 8001220:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001224:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <MX_TIM10_Init+0x40>)
 8001228:	2200      	movs	r2, #0
 800122a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <MX_TIM10_Init+0x40>)
 800122e:	2200      	movs	r2, #0
 8001230:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <MX_TIM10_Init+0x40>)
 8001234:	f002 f9b6 	bl	80035a4 <HAL_TIM_Base_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800123e:	f7ff feec 	bl	800101a <Error_Handler>
  }

}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	2000b5f4 	.word	0x2000b5f4
 800124c:	40014400 	.word	0x40014400

08001250 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a0e      	ldr	r2, [pc, #56]	; (8001298 <HAL_TIM_Base_MspInit+0x48>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d115      	bne.n	800128e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60fb      	str	r3, [r7, #12]
 8001266:	4b0d      	ldr	r3, [pc, #52]	; (800129c <HAL_TIM_Base_MspInit+0x4c>)
 8001268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126a:	4a0c      	ldr	r2, [pc, #48]	; (800129c <HAL_TIM_Base_MspInit+0x4c>)
 800126c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001270:	6453      	str	r3, [r2, #68]	; 0x44
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <HAL_TIM_Base_MspInit+0x4c>)
 8001274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]

    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	2100      	movs	r1, #0
 8001282:	2019      	movs	r0, #25
 8001284:	f000 f983 	bl	800158e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001288:	2019      	movs	r0, #25
 800128a:	f000 f99c 	bl	80015c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800128e:	bf00      	nop
 8001290:	3710      	adds	r7, #16
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40014400 	.word	0x40014400
 800129c:	40023800 	.word	0x40023800

080012a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80012a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012a6:	e003      	b.n	80012b0 <LoopCopyDataInit>

080012a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80012aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012ae:	3104      	adds	r1, #4

080012b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012b0:	480b      	ldr	r0, [pc, #44]	; (80012e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80012b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012b8:	d3f6      	bcc.n	80012a8 <CopyDataInit>
  ldr  r2, =_sbss
 80012ba:	4a0b      	ldr	r2, [pc, #44]	; (80012e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80012bc:	e002      	b.n	80012c4 <LoopFillZerobss>

080012be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80012be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012c0:	f842 3b04 	str.w	r3, [r2], #4

080012c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012c4:	4b09      	ldr	r3, [pc, #36]	; (80012ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80012c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012c8:	d3f9      	bcc.n	80012be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012ca:	f7ff ff87 	bl	80011dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ce:	f002 fb87 	bl	80039e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012d2:	f7ff fd97 	bl	8000e04 <main>
  bx  lr    
 80012d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012d8:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 80012dc:	08003c9c 	.word	0x08003c9c
  ldr  r0, =_sdata
 80012e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80012e4:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80012e8:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80012ec:	2000b63c 	.word	0x2000b63c

080012f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012f0:	e7fe      	b.n	80012f0 <ADC_IRQHandler>
	...

080012f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012f8:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <HAL_Init+0x40>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a0d      	ldr	r2, [pc, #52]	; (8001334 <HAL_Init+0x40>)
 80012fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001302:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001304:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <HAL_Init+0x40>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <HAL_Init+0x40>)
 800130a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800130e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <HAL_Init+0x40>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a07      	ldr	r2, [pc, #28]	; (8001334 <HAL_Init+0x40>)
 8001316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800131a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800131c:	2003      	movs	r0, #3
 800131e:	f000 f92b 	bl	8001578 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001322:	2000      	movs	r0, #0
 8001324:	f000 f808 	bl	8001338 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001328:	f7ff feb8 	bl	800109c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40023c00 	.word	0x40023c00

08001338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <HAL_InitTick+0x54>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_InitTick+0x58>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	4619      	mov	r1, r3
 800134a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001352:	fbb2 f3f3 	udiv	r3, r2, r3
 8001356:	4618      	mov	r0, r3
 8001358:	f000 f943 	bl	80015e2 <HAL_SYSTICK_Config>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e00e      	b.n	8001384 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b0f      	cmp	r3, #15
 800136a:	d80a      	bhi.n	8001382 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800136c:	2200      	movs	r2, #0
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001374:	f000 f90b 	bl	800158e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001378:	4a06      	ldr	r2, [pc, #24]	; (8001394 <HAL_InitTick+0x5c>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800137e:	2300      	movs	r3, #0
 8001380:	e000      	b.n	8001384 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000000 	.word	0x20000000
 8001390:	20000008 	.word	0x20000008
 8001394:	20000004 	.word	0x20000004

08001398 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_IncTick+0x20>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_IncTick+0x24>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4413      	add	r3, r2
 80013a8:	4a04      	ldr	r2, [pc, #16]	; (80013bc <HAL_IncTick+0x24>)
 80013aa:	6013      	str	r3, [r2, #0]
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	20000008 	.word	0x20000008
 80013bc:	2000b634 	.word	0x2000b634

080013c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return uwTick;
 80013c4:	4b03      	ldr	r3, [pc, #12]	; (80013d4 <HAL_GetTick+0x14>)
 80013c6:	681b      	ldr	r3, [r3, #0]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	2000b634 	.word	0x2000b634

080013d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d8:	b480      	push	{r7}
 80013da:	b085      	sub	sp, #20
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e8:	4b0c      	ldr	r3, [pc, #48]	; (800141c <__NVIC_SetPriorityGrouping+0x44>)
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ee:	68ba      	ldr	r2, [r7, #8]
 80013f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013f4:	4013      	ands	r3, r2
 80013f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001400:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001408:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800140a:	4a04      	ldr	r2, [pc, #16]	; (800141c <__NVIC_SetPriorityGrouping+0x44>)
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	60d3      	str	r3, [r2, #12]
}
 8001410:	bf00      	nop
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001424:	4b04      	ldr	r3, [pc, #16]	; (8001438 <__NVIC_GetPriorityGrouping+0x18>)
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	0a1b      	lsrs	r3, r3, #8
 800142a:	f003 0307 	and.w	r3, r3, #7
}
 800142e:	4618      	mov	r0, r3
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	2b00      	cmp	r3, #0
 800144c:	db0b      	blt.n	8001466 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	f003 021f 	and.w	r2, r3, #31
 8001454:	4907      	ldr	r1, [pc, #28]	; (8001474 <__NVIC_EnableIRQ+0x38>)
 8001456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800145a:	095b      	lsrs	r3, r3, #5
 800145c:	2001      	movs	r0, #1
 800145e:	fa00 f202 	lsl.w	r2, r0, r2
 8001462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	e000e100 	.word	0xe000e100

08001478 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	6039      	str	r1, [r7, #0]
 8001482:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001488:	2b00      	cmp	r3, #0
 800148a:	db0a      	blt.n	80014a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	b2da      	uxtb	r2, r3
 8001490:	490c      	ldr	r1, [pc, #48]	; (80014c4 <__NVIC_SetPriority+0x4c>)
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	0112      	lsls	r2, r2, #4
 8001498:	b2d2      	uxtb	r2, r2
 800149a:	440b      	add	r3, r1
 800149c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014a0:	e00a      	b.n	80014b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	4908      	ldr	r1, [pc, #32]	; (80014c8 <__NVIC_SetPriority+0x50>)
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	f003 030f 	and.w	r3, r3, #15
 80014ae:	3b04      	subs	r3, #4
 80014b0:	0112      	lsls	r2, r2, #4
 80014b2:	b2d2      	uxtb	r2, r2
 80014b4:	440b      	add	r3, r1
 80014b6:	761a      	strb	r2, [r3, #24]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	e000e100 	.word	0xe000e100
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b089      	sub	sp, #36	; 0x24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	60f8      	str	r0, [r7, #12]
 80014d4:	60b9      	str	r1, [r7, #8]
 80014d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	f1c3 0307 	rsb	r3, r3, #7
 80014e6:	2b04      	cmp	r3, #4
 80014e8:	bf28      	it	cs
 80014ea:	2304      	movcs	r3, #4
 80014ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3304      	adds	r3, #4
 80014f2:	2b06      	cmp	r3, #6
 80014f4:	d902      	bls.n	80014fc <NVIC_EncodePriority+0x30>
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	3b03      	subs	r3, #3
 80014fa:	e000      	b.n	80014fe <NVIC_EncodePriority+0x32>
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001500:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43da      	mvns	r2, r3
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	401a      	ands	r2, r3
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001514:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	fa01 f303 	lsl.w	r3, r1, r3
 800151e:	43d9      	mvns	r1, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001524:	4313      	orrs	r3, r2
         );
}
 8001526:	4618      	mov	r0, r3
 8001528:	3724      	adds	r7, #36	; 0x24
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
	...

08001534 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3b01      	subs	r3, #1
 8001540:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001544:	d301      	bcc.n	800154a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001546:	2301      	movs	r3, #1
 8001548:	e00f      	b.n	800156a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800154a:	4a0a      	ldr	r2, [pc, #40]	; (8001574 <SysTick_Config+0x40>)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3b01      	subs	r3, #1
 8001550:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001552:	210f      	movs	r1, #15
 8001554:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001558:	f7ff ff8e 	bl	8001478 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800155c:	4b05      	ldr	r3, [pc, #20]	; (8001574 <SysTick_Config+0x40>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001562:	4b04      	ldr	r3, [pc, #16]	; (8001574 <SysTick_Config+0x40>)
 8001564:	2207      	movs	r2, #7
 8001566:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	e000e010 	.word	0xe000e010

08001578 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f7ff ff29 	bl	80013d8 <__NVIC_SetPriorityGrouping>
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800158e:	b580      	push	{r7, lr}
 8001590:	b086      	sub	sp, #24
 8001592:	af00      	add	r7, sp, #0
 8001594:	4603      	mov	r3, r0
 8001596:	60b9      	str	r1, [r7, #8]
 8001598:	607a      	str	r2, [r7, #4]
 800159a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015a0:	f7ff ff3e 	bl	8001420 <__NVIC_GetPriorityGrouping>
 80015a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	68b9      	ldr	r1, [r7, #8]
 80015aa:	6978      	ldr	r0, [r7, #20]
 80015ac:	f7ff ff8e 	bl	80014cc <NVIC_EncodePriority>
 80015b0:	4602      	mov	r2, r0
 80015b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015b6:	4611      	mov	r1, r2
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff ff5d 	bl	8001478 <__NVIC_SetPriority>
}
 80015be:	bf00      	nop
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	4603      	mov	r3, r0
 80015ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff ff31 	bl	800143c <__NVIC_EnableIRQ>
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b082      	sub	sp, #8
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff ffa2 	bl	8001534 <SysTick_Config>
 80015f0:	4603      	mov	r3, r0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001604:	2300      	movs	r3, #0
 8001606:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001608:	f7ff feda 	bl	80013c0 <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d101      	bne.n	8001618 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e099      	b.n	800174c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2202      	movs	r2, #2
 8001624:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f022 0201 	bic.w	r2, r2, #1
 8001636:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001638:	e00f      	b.n	800165a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800163a:	f7ff fec1 	bl	80013c0 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b05      	cmp	r3, #5
 8001646:	d908      	bls.n	800165a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2220      	movs	r2, #32
 800164c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2203      	movs	r2, #3
 8001652:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e078      	b.n	800174c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	2b00      	cmp	r3, #0
 8001666:	d1e8      	bne.n	800163a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001670:	697a      	ldr	r2, [r7, #20]
 8001672:	4b38      	ldr	r3, [pc, #224]	; (8001754 <HAL_DMA_Init+0x158>)
 8001674:	4013      	ands	r3, r2
 8001676:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685a      	ldr	r2, [r3, #4]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001686:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001692:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800169e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80016a6:	697a      	ldr	r2, [r7, #20]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b0:	2b04      	cmp	r3, #4
 80016b2:	d107      	bne.n	80016c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016bc:	4313      	orrs	r3, r2
 80016be:	697a      	ldr	r2, [r7, #20]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	697a      	ldr	r2, [r7, #20]
 80016ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	f023 0307 	bic.w	r3, r3, #7
 80016da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e0:	697a      	ldr	r2, [r7, #20]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	d117      	bne.n	800171e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d00e      	beq.n	800171e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f000 fa6f 	bl	8001be4 <DMA_CheckFifoParam>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d008      	beq.n	800171e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2240      	movs	r2, #64	; 0x40
 8001710:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2201      	movs	r2, #1
 8001716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800171a:	2301      	movs	r3, #1
 800171c:	e016      	b.n	800174c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f000 fa26 	bl	8001b78 <DMA_CalcBaseAndBitshift>
 800172c:	4603      	mov	r3, r0
 800172e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001734:	223f      	movs	r2, #63	; 0x3f
 8001736:	409a      	lsls	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2201      	movs	r2, #1
 8001746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800174a:	2300      	movs	r3, #0
}
 800174c:	4618      	mov	r0, r3
 800174e:	3718      	adds	r7, #24
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	f010803f 	.word	0xf010803f

08001758 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
 8001764:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001766:	2300      	movs	r3, #0
 8001768:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001776:	2b01      	cmp	r3, #1
 8001778:	d101      	bne.n	800177e <HAL_DMA_Start_IT+0x26>
 800177a:	2302      	movs	r3, #2
 800177c:	e040      	b.n	8001800 <HAL_DMA_Start_IT+0xa8>
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2201      	movs	r2, #1
 8001782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800178c:	b2db      	uxtb	r3, r3
 800178e:	2b01      	cmp	r3, #1
 8001790:	d12f      	bne.n	80017f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2202      	movs	r2, #2
 8001796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2200      	movs	r2, #0
 800179e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	68b9      	ldr	r1, [r7, #8]
 80017a6:	68f8      	ldr	r0, [r7, #12]
 80017a8:	f000 f9b8 	bl	8001b1c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b0:	223f      	movs	r2, #63	; 0x3f
 80017b2:	409a      	lsls	r2, r3
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f042 0216 	orr.w	r2, r2, #22
 80017c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d007      	beq.n	80017e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f042 0208 	orr.w	r2, r2, #8
 80017de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f042 0201 	orr.w	r2, r2, #1
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	e005      	b.n	80017fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80017fa:	2302      	movs	r3, #2
 80017fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80017fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b086      	sub	sp, #24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001810:	2300      	movs	r3, #0
 8001812:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001814:	4b92      	ldr	r3, [pc, #584]	; (8001a60 <HAL_DMA_IRQHandler+0x258>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a92      	ldr	r2, [pc, #584]	; (8001a64 <HAL_DMA_IRQHandler+0x25c>)
 800181a:	fba2 2303 	umull	r2, r3, r2, r3
 800181e:	0a9b      	lsrs	r3, r3, #10
 8001820:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001826:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001832:	2208      	movs	r2, #8
 8001834:	409a      	lsls	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	4013      	ands	r3, r2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d01a      	beq.n	8001874 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0304 	and.w	r3, r3, #4
 8001848:	2b00      	cmp	r3, #0
 800184a:	d013      	beq.n	8001874 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f022 0204 	bic.w	r2, r2, #4
 800185a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001860:	2208      	movs	r2, #8
 8001862:	409a      	lsls	r2, r3
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800186c:	f043 0201 	orr.w	r2, r3, #1
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001878:	2201      	movs	r2, #1
 800187a:	409a      	lsls	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4013      	ands	r3, r2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d012      	beq.n	80018aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00b      	beq.n	80018aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001896:	2201      	movs	r2, #1
 8001898:	409a      	lsls	r2, r3
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018a2:	f043 0202 	orr.w	r2, r3, #2
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ae:	2204      	movs	r2, #4
 80018b0:	409a      	lsls	r2, r3
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	4013      	ands	r3, r2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d012      	beq.n	80018e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d00b      	beq.n	80018e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018cc:	2204      	movs	r2, #4
 80018ce:	409a      	lsls	r2, r3
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d8:	f043 0204 	orr.w	r2, r3, #4
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e4:	2210      	movs	r2, #16
 80018e6:	409a      	lsls	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4013      	ands	r3, r2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d043      	beq.n	8001978 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d03c      	beq.n	8001978 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001902:	2210      	movs	r2, #16
 8001904:	409a      	lsls	r2, r3
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d018      	beq.n	800194a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d108      	bne.n	8001938 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	2b00      	cmp	r3, #0
 800192c:	d024      	beq.n	8001978 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	4798      	blx	r3
 8001936:	e01f      	b.n	8001978 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800193c:	2b00      	cmp	r3, #0
 800193e:	d01b      	beq.n	8001978 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	4798      	blx	r3
 8001948:	e016      	b.n	8001978 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001954:	2b00      	cmp	r3, #0
 8001956:	d107      	bne.n	8001968 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 0208 	bic.w	r2, r2, #8
 8001966:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196c:	2b00      	cmp	r3, #0
 800196e:	d003      	beq.n	8001978 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800197c:	2220      	movs	r2, #32
 800197e:	409a      	lsls	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4013      	ands	r3, r2
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 808e 	beq.w	8001aa6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0310 	and.w	r3, r3, #16
 8001994:	2b00      	cmp	r3, #0
 8001996:	f000 8086 	beq.w	8001aa6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800199e:	2220      	movs	r2, #32
 80019a0:	409a      	lsls	r2, r3
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b05      	cmp	r3, #5
 80019b0:	d136      	bne.n	8001a20 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f022 0216 	bic.w	r2, r2, #22
 80019c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	695a      	ldr	r2, [r3, #20]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80019d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d103      	bne.n	80019e2 <HAL_DMA_IRQHandler+0x1da>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d007      	beq.n	80019f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f022 0208 	bic.w	r2, r2, #8
 80019f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f6:	223f      	movs	r2, #63	; 0x3f
 80019f8:	409a      	lsls	r2, r3
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d07d      	beq.n	8001b12 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	4798      	blx	r3
        }
        return;
 8001a1e:	e078      	b.n	8001b12 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d01c      	beq.n	8001a68 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d108      	bne.n	8001a4e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d030      	beq.n	8001aa6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	4798      	blx	r3
 8001a4c:	e02b      	b.n	8001aa6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d027      	beq.n	8001aa6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	4798      	blx	r3
 8001a5e:	e022      	b.n	8001aa6 <HAL_DMA_IRQHandler+0x29e>
 8001a60:	20000000 	.word	0x20000000
 8001a64:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10f      	bne.n	8001a96 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f022 0210 	bic.w	r2, r2, #16
 8001a84:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d032      	beq.n	8001b14 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d022      	beq.n	8001b00 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2205      	movs	r2, #5
 8001abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 0201 	bic.w	r2, r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	60bb      	str	r3, [r7, #8]
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d307      	bcc.n	8001aee <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1f2      	bne.n	8001ad2 <HAL_DMA_IRQHandler+0x2ca>
 8001aec:	e000      	b.n	8001af0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001aee:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d005      	beq.n	8001b14 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	4798      	blx	r3
 8001b10:	e000      	b.n	8001b14 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001b12:	bf00      	nop
    }
  }
}
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop

08001b1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b085      	sub	sp, #20
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
 8001b28:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b38:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2b40      	cmp	r3, #64	; 0x40
 8001b48:	d108      	bne.n	8001b5c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001b5a:	e007      	b.n	8001b6c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	68ba      	ldr	r2, [r7, #8]
 8001b62:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	60da      	str	r2, [r3, #12]
}
 8001b6c:	bf00      	nop
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	3b10      	subs	r3, #16
 8001b88:	4a14      	ldr	r2, [pc, #80]	; (8001bdc <DMA_CalcBaseAndBitshift+0x64>)
 8001b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8e:	091b      	lsrs	r3, r3, #4
 8001b90:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b92:	4a13      	ldr	r2, [pc, #76]	; (8001be0 <DMA_CalcBaseAndBitshift+0x68>)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4413      	add	r3, r2
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2b03      	cmp	r3, #3
 8001ba4:	d909      	bls.n	8001bba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bae:	f023 0303 	bic.w	r3, r3, #3
 8001bb2:	1d1a      	adds	r2, r3, #4
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	659a      	str	r2, [r3, #88]	; 0x58
 8001bb8:	e007      	b.n	8001bca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001bc2:	f023 0303 	bic.w	r3, r3, #3
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	aaaaaaab 	.word	0xaaaaaaab
 8001be0:	08003c7c 	.word	0x08003c7c

08001be4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bec:	2300      	movs	r3, #0
 8001bee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	699b      	ldr	r3, [r3, #24]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d11f      	bne.n	8001c3e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	d855      	bhi.n	8001cb0 <DMA_CheckFifoParam+0xcc>
 8001c04:	a201      	add	r2, pc, #4	; (adr r2, 8001c0c <DMA_CheckFifoParam+0x28>)
 8001c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c0a:	bf00      	nop
 8001c0c:	08001c1d 	.word	0x08001c1d
 8001c10:	08001c2f 	.word	0x08001c2f
 8001c14:	08001c1d 	.word	0x08001c1d
 8001c18:	08001cb1 	.word	0x08001cb1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d045      	beq.n	8001cb4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c2c:	e042      	b.n	8001cb4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c32:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c36:	d13f      	bne.n	8001cb8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c3c:	e03c      	b.n	8001cb8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c46:	d121      	bne.n	8001c8c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	d836      	bhi.n	8001cbc <DMA_CheckFifoParam+0xd8>
 8001c4e:	a201      	add	r2, pc, #4	; (adr r2, 8001c54 <DMA_CheckFifoParam+0x70>)
 8001c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c54:	08001c65 	.word	0x08001c65
 8001c58:	08001c6b 	.word	0x08001c6b
 8001c5c:	08001c65 	.word	0x08001c65
 8001c60:	08001c7d 	.word	0x08001c7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	73fb      	strb	r3, [r7, #15]
      break;
 8001c68:	e02f      	b.n	8001cca <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d024      	beq.n	8001cc0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001c7a:	e021      	b.n	8001cc0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c80:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001c84:	d11e      	bne.n	8001cc4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001c8a:	e01b      	b.n	8001cc4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d902      	bls.n	8001c98 <DMA_CheckFifoParam+0xb4>
 8001c92:	2b03      	cmp	r3, #3
 8001c94:	d003      	beq.n	8001c9e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c96:	e018      	b.n	8001cca <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8001c9c:	e015      	b.n	8001cca <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00e      	beq.n	8001cc8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	73fb      	strb	r3, [r7, #15]
      break;
 8001cae:	e00b      	b.n	8001cc8 <DMA_CheckFifoParam+0xe4>
      break;
 8001cb0:	bf00      	nop
 8001cb2:	e00a      	b.n	8001cca <DMA_CheckFifoParam+0xe6>
      break;
 8001cb4:	bf00      	nop
 8001cb6:	e008      	b.n	8001cca <DMA_CheckFifoParam+0xe6>
      break;
 8001cb8:	bf00      	nop
 8001cba:	e006      	b.n	8001cca <DMA_CheckFifoParam+0xe6>
      break;
 8001cbc:	bf00      	nop
 8001cbe:	e004      	b.n	8001cca <DMA_CheckFifoParam+0xe6>
      break;
 8001cc0:	bf00      	nop
 8001cc2:	e002      	b.n	8001cca <DMA_CheckFifoParam+0xe6>
      break;   
 8001cc4:	bf00      	nop
 8001cc6:	e000      	b.n	8001cca <DMA_CheckFifoParam+0xe6>
      break;
 8001cc8:	bf00      	nop
    }
  } 
  
  return status; 
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b089      	sub	sp, #36	; 0x24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
 8001cf2:	e159      	b.n	8001fa8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	4013      	ands	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	f040 8148 	bne.w	8001fa2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d00b      	beq.n	8001d32 <HAL_GPIO_Init+0x5a>
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d007      	beq.n	8001d32 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001d26:	2b11      	cmp	r3, #17
 8001d28:	d003      	beq.n	8001d32 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b12      	cmp	r3, #18
 8001d30:	d130      	bne.n	8001d94 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	2203      	movs	r2, #3
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43db      	mvns	r3, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4013      	ands	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	68da      	ldr	r2, [r3, #12]
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d68:	2201      	movs	r2, #1
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	091b      	lsrs	r3, r3, #4
 8001d7e:	f003 0201 	and.w	r2, r3, #1
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	fa02 f303 	lsl.w	r3, r2, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	2203      	movs	r2, #3
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d003      	beq.n	8001dd4 <HAL_GPIO_Init+0xfc>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b12      	cmp	r3, #18
 8001dd2:	d123      	bne.n	8001e1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	08da      	lsrs	r2, r3, #3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3208      	adds	r2, #8
 8001ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	f003 0307 	and.w	r3, r3, #7
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	220f      	movs	r2, #15
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43db      	mvns	r3, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	691a      	ldr	r2, [r3, #16]
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	08da      	lsrs	r2, r3, #3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3208      	adds	r2, #8
 8001e16:	69b9      	ldr	r1, [r7, #24]
 8001e18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	2203      	movs	r2, #3
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 0203 	and.w	r2, r3, #3
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 80a2 	beq.w	8001fa2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	4b56      	ldr	r3, [pc, #344]	; (8001fbc <HAL_GPIO_Init+0x2e4>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	4a55      	ldr	r2, [pc, #340]	; (8001fbc <HAL_GPIO_Init+0x2e4>)
 8001e68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e6e:	4b53      	ldr	r3, [pc, #332]	; (8001fbc <HAL_GPIO_Init+0x2e4>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e76:	60fb      	str	r3, [r7, #12]
 8001e78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e7a:	4a51      	ldr	r2, [pc, #324]	; (8001fc0 <HAL_GPIO_Init+0x2e8>)
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	089b      	lsrs	r3, r3, #2
 8001e80:	3302      	adds	r3, #2
 8001e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	220f      	movs	r2, #15
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a48      	ldr	r2, [pc, #288]	; (8001fc4 <HAL_GPIO_Init+0x2ec>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d019      	beq.n	8001eda <HAL_GPIO_Init+0x202>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a47      	ldr	r2, [pc, #284]	; (8001fc8 <HAL_GPIO_Init+0x2f0>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d013      	beq.n	8001ed6 <HAL_GPIO_Init+0x1fe>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a46      	ldr	r2, [pc, #280]	; (8001fcc <HAL_GPIO_Init+0x2f4>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d00d      	beq.n	8001ed2 <HAL_GPIO_Init+0x1fa>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a45      	ldr	r2, [pc, #276]	; (8001fd0 <HAL_GPIO_Init+0x2f8>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d007      	beq.n	8001ece <HAL_GPIO_Init+0x1f6>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a44      	ldr	r2, [pc, #272]	; (8001fd4 <HAL_GPIO_Init+0x2fc>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d101      	bne.n	8001eca <HAL_GPIO_Init+0x1f2>
 8001ec6:	2304      	movs	r3, #4
 8001ec8:	e008      	b.n	8001edc <HAL_GPIO_Init+0x204>
 8001eca:	2307      	movs	r3, #7
 8001ecc:	e006      	b.n	8001edc <HAL_GPIO_Init+0x204>
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e004      	b.n	8001edc <HAL_GPIO_Init+0x204>
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	e002      	b.n	8001edc <HAL_GPIO_Init+0x204>
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e000      	b.n	8001edc <HAL_GPIO_Init+0x204>
 8001eda:	2300      	movs	r3, #0
 8001edc:	69fa      	ldr	r2, [r7, #28]
 8001ede:	f002 0203 	and.w	r2, r2, #3
 8001ee2:	0092      	lsls	r2, r2, #2
 8001ee4:	4093      	lsls	r3, r2
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001eec:	4934      	ldr	r1, [pc, #208]	; (8001fc0 <HAL_GPIO_Init+0x2e8>)
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	089b      	lsrs	r3, r3, #2
 8001ef2:	3302      	adds	r3, #2
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001efa:	4b37      	ldr	r3, [pc, #220]	; (8001fd8 <HAL_GPIO_Init+0x300>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	43db      	mvns	r3, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4013      	ands	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f1e:	4a2e      	ldr	r2, [pc, #184]	; (8001fd8 <HAL_GPIO_Init+0x300>)
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f24:	4b2c      	ldr	r3, [pc, #176]	; (8001fd8 <HAL_GPIO_Init+0x300>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4013      	ands	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d003      	beq.n	8001f48 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	4313      	orrs	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f48:	4a23      	ldr	r2, [pc, #140]	; (8001fd8 <HAL_GPIO_Init+0x300>)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f4e:	4b22      	ldr	r3, [pc, #136]	; (8001fd8 <HAL_GPIO_Init+0x300>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	43db      	mvns	r3, r3
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f72:	4a19      	ldr	r2, [pc, #100]	; (8001fd8 <HAL_GPIO_Init+0x300>)
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f78:	4b17      	ldr	r3, [pc, #92]	; (8001fd8 <HAL_GPIO_Init+0x300>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	43db      	mvns	r3, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4013      	ands	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d003      	beq.n	8001f9c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f9c:	4a0e      	ldr	r2, [pc, #56]	; (8001fd8 <HAL_GPIO_Init+0x300>)
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	61fb      	str	r3, [r7, #28]
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	2b0f      	cmp	r3, #15
 8001fac:	f67f aea2 	bls.w	8001cf4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fb0:	bf00      	nop
 8001fb2:	3724      	adds	r7, #36	; 0x24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	40013800 	.word	0x40013800
 8001fc4:	40020000 	.word	0x40020000
 8001fc8:	40020400 	.word	0x40020400
 8001fcc:	40020800 	.word	0x40020800
 8001fd0:	40020c00 	.word	0x40020c00
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	40013c00 	.word	0x40013c00

08001fdc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b088      	sub	sp, #32
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e128      	b.n	8002240 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d109      	bne.n	800200e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a90      	ldr	r2, [pc, #576]	; (8002248 <HAL_I2S_Init+0x26c>)
 8002006:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7fe fe35 	bl	8000c78 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2202      	movs	r2, #2
 8002012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	69db      	ldr	r3, [r3, #28]
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002024:	f023 030f 	bic.w	r3, r3, #15
 8002028:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2202      	movs	r2, #2
 8002030:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	695b      	ldr	r3, [r3, #20]
 8002036:	2b02      	cmp	r3, #2
 8002038:	d060      	beq.n	80020fc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d102      	bne.n	8002048 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002042:	2310      	movs	r3, #16
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	e001      	b.n	800204c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002048:	2320      	movs	r3, #32
 800204a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	2b20      	cmp	r3, #32
 8002052:	d802      	bhi.n	800205a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	005b      	lsls	r3, r3, #1
 8002058:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800205a:	2001      	movs	r0, #1
 800205c:	f001 fa46 	bl	80034ec <HAL_RCCEx_GetPeriphCLKFreq>
 8002060:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800206a:	d125      	bne.n	80020b8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d010      	beq.n	8002096 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	fbb2 f2f3 	udiv	r2, r2, r3
 800207e:	4613      	mov	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	461a      	mov	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	695b      	ldr	r3, [r3, #20]
 800208c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002090:	3305      	adds	r3, #5
 8002092:	613b      	str	r3, [r7, #16]
 8002094:	e01f      	b.n	80020d6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	fbb2 f2f3 	udiv	r2, r2, r3
 80020a0:	4613      	mov	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	461a      	mov	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	695b      	ldr	r3, [r3, #20]
 80020ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b2:	3305      	adds	r3, #5
 80020b4:	613b      	str	r3, [r7, #16]
 80020b6:	e00e      	b.n	80020d6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80020c0:	4613      	mov	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	4413      	add	r3, r2
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	461a      	mov	r2, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d2:	3305      	adds	r3, #5
 80020d4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4a5c      	ldr	r2, [pc, #368]	; (800224c <HAL_I2S_Init+0x270>)
 80020da:	fba2 2303 	umull	r2, r3, r2, r3
 80020de:	08db      	lsrs	r3, r3, #3
 80020e0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	1ad3      	subs	r3, r2, r3
 80020f0:	085b      	lsrs	r3, r3, #1
 80020f2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	021b      	lsls	r3, r3, #8
 80020f8:	61bb      	str	r3, [r7, #24]
 80020fa:	e003      	b.n	8002104 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80020fc:	2302      	movs	r3, #2
 80020fe:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d902      	bls.n	8002110 <HAL_I2S_Init+0x134>
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	2bff      	cmp	r3, #255	; 0xff
 800210e:	d907      	bls.n	8002120 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002114:	f043 0210 	orr.w	r2, r3, #16
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e08f      	b.n	8002240 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	691a      	ldr	r2, [r3, #16]
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	ea42 0103 	orr.w	r1, r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	69fa      	ldr	r2, [r7, #28]
 8002130:	430a      	orrs	r2, r1
 8002132:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800213e:	f023 030f 	bic.w	r3, r3, #15
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	6851      	ldr	r1, [r2, #4]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	6892      	ldr	r2, [r2, #8]
 800214a:	4311      	orrs	r1, r2
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	68d2      	ldr	r2, [r2, #12]
 8002150:	4311      	orrs	r1, r2
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6992      	ldr	r2, [r2, #24]
 8002156:	430a      	orrs	r2, r1
 8002158:	431a      	orrs	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002162:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a1b      	ldr	r3, [r3, #32]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d161      	bne.n	8002230 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a38      	ldr	r2, [pc, #224]	; (8002250 <HAL_I2S_Init+0x274>)
 8002170:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a37      	ldr	r2, [pc, #220]	; (8002254 <HAL_I2S_Init+0x278>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d101      	bne.n	8002180 <HAL_I2S_Init+0x1a4>
 800217c:	4b36      	ldr	r3, [pc, #216]	; (8002258 <HAL_I2S_Init+0x27c>)
 800217e:	e001      	b.n	8002184 <HAL_I2S_Init+0x1a8>
 8002180:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6812      	ldr	r2, [r2, #0]
 800218a:	4932      	ldr	r1, [pc, #200]	; (8002254 <HAL_I2S_Init+0x278>)
 800218c:	428a      	cmp	r2, r1
 800218e:	d101      	bne.n	8002194 <HAL_I2S_Init+0x1b8>
 8002190:	4a31      	ldr	r2, [pc, #196]	; (8002258 <HAL_I2S_Init+0x27c>)
 8002192:	e001      	b.n	8002198 <HAL_I2S_Init+0x1bc>
 8002194:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002198:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800219c:	f023 030f 	bic.w	r3, r3, #15
 80021a0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a2b      	ldr	r2, [pc, #172]	; (8002254 <HAL_I2S_Init+0x278>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d101      	bne.n	80021b0 <HAL_I2S_Init+0x1d4>
 80021ac:	4b2a      	ldr	r3, [pc, #168]	; (8002258 <HAL_I2S_Init+0x27c>)
 80021ae:	e001      	b.n	80021b4 <HAL_I2S_Init+0x1d8>
 80021b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021b4:	2202      	movs	r2, #2
 80021b6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a25      	ldr	r2, [pc, #148]	; (8002254 <HAL_I2S_Init+0x278>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d101      	bne.n	80021c6 <HAL_I2S_Init+0x1ea>
 80021c2:	4b25      	ldr	r3, [pc, #148]	; (8002258 <HAL_I2S_Init+0x27c>)
 80021c4:	e001      	b.n	80021ca <HAL_I2S_Init+0x1ee>
 80021c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021ca:	69db      	ldr	r3, [r3, #28]
 80021cc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021d6:	d003      	beq.n	80021e0 <HAL_I2S_Init+0x204>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d103      	bne.n	80021e8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80021e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021e4:	613b      	str	r3, [r7, #16]
 80021e6:	e001      	b.n	80021ec <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80021e8:	2300      	movs	r3, #0
 80021ea:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	b299      	uxth	r1, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002202:	4303      	orrs	r3, r0
 8002204:	b29b      	uxth	r3, r3
 8002206:	430b      	orrs	r3, r1
 8002208:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800220a:	4313      	orrs	r3, r2
 800220c:	b29a      	uxth	r2, r3
 800220e:	897b      	ldrh	r3, [r7, #10]
 8002210:	4313      	orrs	r3, r2
 8002212:	b29b      	uxth	r3, r3
 8002214:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002218:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a0d      	ldr	r2, [pc, #52]	; (8002254 <HAL_I2S_Init+0x278>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d101      	bne.n	8002228 <HAL_I2S_Init+0x24c>
 8002224:	4b0c      	ldr	r3, [pc, #48]	; (8002258 <HAL_I2S_Init+0x27c>)
 8002226:	e001      	b.n	800222c <HAL_I2S_Init+0x250>
 8002228:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800222c:	897a      	ldrh	r2, [r7, #10]
 800222e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3720      	adds	r7, #32
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	08002539 	.word	0x08002539
 800224c:	cccccccd 	.word	0xcccccccd
 8002250:	0800264d 	.word	0x0800264d
 8002254:	40003800 	.word	0x40003800
 8002258:	40003400 	.word	0x40003400

0800225c <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	4613      	mov	r3, r2
 8002268:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d002      	beq.n	8002276 <HAL_I2S_Transmit_DMA+0x1a>
 8002270:	88fb      	ldrh	r3, [r7, #6]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e08e      	b.n	8002398 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b01      	cmp	r3, #1
 8002284:	d101      	bne.n	800228a <HAL_I2S_Transmit_DMA+0x2e>
 8002286:	2302      	movs	r3, #2
 8002288:	e086      	b.n	8002398 <HAL_I2S_Transmit_DMA+0x13c>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2201      	movs	r2, #1
 800228e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b01      	cmp	r3, #1
 800229c:	d005      	beq.n	80022aa <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80022a6:	2302      	movs	r3, #2
 80022a8:	e076      	b.n	8002398 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2203      	movs	r2, #3
 80022ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	69db      	ldr	r3, [r3, #28]
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	2b03      	cmp	r3, #3
 80022ce:	d002      	beq.n	80022d6 <HAL_I2S_Transmit_DMA+0x7a>
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	2b05      	cmp	r3, #5
 80022d4:	d10a      	bne.n	80022ec <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80022d6:	88fb      	ldrh	r3, [r7, #6]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	b29a      	uxth	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80022e0:	88fb      	ldrh	r3, [r7, #6]
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022ea:	e005      	b.n	80022f8 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	88fa      	ldrh	r2, [r7, #6]
 80022f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	88fa      	ldrh	r2, [r7, #6]
 80022f6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fc:	4a28      	ldr	r2, [pc, #160]	; (80023a0 <HAL_I2S_Transmit_DMA+0x144>)
 80022fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002304:	4a27      	ldr	r2, [pc, #156]	; (80023a4 <HAL_I2S_Transmit_DMA+0x148>)
 8002306:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230c:	4a26      	ldr	r2, [pc, #152]	; (80023a8 <HAL_I2S_Transmit_DMA+0x14c>)
 800230e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002318:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002320:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002326:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002328:	f7ff fa16 	bl	8001758 <HAL_DMA_Start_IT>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d00f      	beq.n	8002352 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002336:	f043 0208 	orr.w	r2, r3, #8
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2201      	movs	r2, #1
 8002342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e022      	b.n	8002398 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800235c:	2b00      	cmp	r3, #0
 800235e:	d107      	bne.n	8002370 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	69da      	ldr	r2, [r3, #28]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800236e:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	d107      	bne.n	800238e <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f042 0202 	orr.w	r2, r2, #2
 800238c:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	08002417 	.word	0x08002417
 80023a4:	080023d5 	.word	0x080023d5
 80023a8:	08002433 	.word	0x08002433

080023ac <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e0:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69db      	ldr	r3, [r3, #28]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10e      	bne.n	8002408 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 0202 	bic.w	r2, r2, #2
 80023f8:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f7fe fdfa 	bl	8001002 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800240e:	bf00      	nop
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b084      	sub	sp, #16
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002422:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f7fe fde1 	bl	8000fec <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800242a:	bf00      	nop
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b084      	sub	sp, #16
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	685a      	ldr	r2, [r3, #4]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f022 0203 	bic.w	r2, r2, #3
 800244e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2200      	movs	r2, #0
 800245a:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002468:	f043 0208 	orr.w	r2, r3, #8
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f7ff ffa5 	bl	80023c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002476:	bf00      	nop
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248a:	881a      	ldrh	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002496:	1c9a      	adds	r2, r3, #2
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	3b01      	subs	r3, #1
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10e      	bne.n	80024d2 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80024c2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f7fe fd98 	bl	8001002 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80024d2:	bf00      	nop
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68da      	ldr	r2, [r3, #12]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ec:	b292      	uxth	r2, r2
 80024ee:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f4:	1c9a      	adds	r2, r3, #2
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80024fe:	b29b      	uxth	r3, r3
 8002500:	3b01      	subs	r3, #1
 8002502:	b29a      	uxth	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800250c:	b29b      	uxth	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10e      	bne.n	8002530 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685a      	ldr	r2, [r3, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002520:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7ff ff3e 	bl	80023ac <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002530:	bf00      	nop
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b04      	cmp	r3, #4
 8002552:	d13a      	bne.n	80025ca <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b01      	cmp	r3, #1
 800255c:	d109      	bne.n	8002572 <I2S_IRQHandler+0x3a>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002568:	2b40      	cmp	r3, #64	; 0x40
 800256a:	d102      	bne.n	8002572 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7ff ffb4 	bl	80024da <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002578:	2b40      	cmp	r3, #64	; 0x40
 800257a:	d126      	bne.n	80025ca <I2S_IRQHandler+0x92>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f003 0320 	and.w	r3, r3, #32
 8002586:	2b20      	cmp	r3, #32
 8002588:	d11f      	bne.n	80025ca <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002598:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800259a:	2300      	movs	r3, #0
 800259c:	613b      	str	r3, [r7, #16]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	613b      	str	r3, [r7, #16]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	613b      	str	r3, [r7, #16]
 80025ae:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025bc:	f043 0202 	orr.w	r2, r3, #2
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80025c4:	6878      	ldr	r0, [r7, #4]
 80025c6:	f7ff fefb 	bl	80023c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	2b03      	cmp	r3, #3
 80025d4:	d136      	bne.n	8002644 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d109      	bne.n	80025f4 <I2S_IRQHandler+0xbc>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ea:	2b80      	cmp	r3, #128	; 0x80
 80025ec:	d102      	bne.n	80025f4 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7ff ff45 	bl	800247e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	2b08      	cmp	r3, #8
 80025fc:	d122      	bne.n	8002644 <I2S_IRQHandler+0x10c>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 0320 	and.w	r3, r3, #32
 8002608:	2b20      	cmp	r3, #32
 800260a:	d11b      	bne.n	8002644 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800261a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800261c:	2300      	movs	r3, #0
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	60fb      	str	r3, [r7, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002636:	f043 0204 	orr.w	r2, r3, #4
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff febe 	bl	80023c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002644:	bf00      	nop
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b088      	sub	sp, #32
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4aa2      	ldr	r2, [pc, #648]	; (80028ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d101      	bne.n	800266a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002666:	4ba2      	ldr	r3, [pc, #648]	; (80028f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002668:	e001      	b.n	800266e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800266a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a9b      	ldr	r2, [pc, #620]	; (80028ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d101      	bne.n	8002688 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002684:	4b9a      	ldr	r3, [pc, #616]	; (80028f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002686:	e001      	b.n	800268c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002688:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002698:	d004      	beq.n	80026a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f040 8099 	bne.w	80027d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d107      	bne.n	80026be <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d002      	beq.n	80026be <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f000 f925 	bl	8002908 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d107      	bne.n	80026d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d002      	beq.n	80026d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f9c8 	bl	8002a68 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026de:	2b40      	cmp	r3, #64	; 0x40
 80026e0:	d13a      	bne.n	8002758 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	f003 0320 	and.w	r3, r3, #32
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d035      	beq.n	8002758 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a7e      	ldr	r2, [pc, #504]	; (80028ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d101      	bne.n	80026fa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80026f6:	4b7e      	ldr	r3, [pc, #504]	; (80028f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80026f8:	e001      	b.n	80026fe <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80026fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4979      	ldr	r1, [pc, #484]	; (80028ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002706:	428b      	cmp	r3, r1
 8002708:	d101      	bne.n	800270e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800270a:	4b79      	ldr	r3, [pc, #484]	; (80028f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800270c:	e001      	b.n	8002712 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800270e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002712:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002716:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	685a      	ldr	r2, [r3, #4]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002726:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002728:	2300      	movs	r3, #0
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800274a:	f043 0202 	orr.w	r2, r3, #2
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f7ff fe34 	bl	80023c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b08      	cmp	r3, #8
 8002760:	f040 80be 	bne.w	80028e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	f003 0320 	and.w	r3, r3, #32
 800276a:	2b00      	cmp	r3, #0
 800276c:	f000 80b8 	beq.w	80028e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800277e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a59      	ldr	r2, [pc, #356]	; (80028ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d101      	bne.n	800278e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800278a:	4b59      	ldr	r3, [pc, #356]	; (80028f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800278c:	e001      	b.n	8002792 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800278e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4954      	ldr	r1, [pc, #336]	; (80028ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800279a:	428b      	cmp	r3, r1
 800279c:	d101      	bne.n	80027a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800279e:	4b54      	ldr	r3, [pc, #336]	; (80028f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80027a0:	e001      	b.n	80027a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80027a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027a6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80027aa:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80027ac:	2300      	movs	r3, #0
 80027ae:	60bb      	str	r3, [r7, #8]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	60bb      	str	r3, [r7, #8]
 80027b8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c6:	f043 0204 	orr.w	r2, r3, #4
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7ff fdf6 	bl	80023c0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80027d4:	e084      	b.n	80028e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d107      	bne.n	80027f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d002      	beq.n	80027f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f8be 	bl	800296c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f003 0301 	and.w	r3, r3, #1
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d107      	bne.n	800280a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002800:	2b00      	cmp	r3, #0
 8002802:	d002      	beq.n	800280a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 f8fd 	bl	8002a04 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002810:	2b40      	cmp	r3, #64	; 0x40
 8002812:	d12f      	bne.n	8002874 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	f003 0320 	and.w	r3, r3, #32
 800281a:	2b00      	cmp	r3, #0
 800281c:	d02a      	beq.n	8002874 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800282c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a2e      	ldr	r2, [pc, #184]	; (80028ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d101      	bne.n	800283c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002838:	4b2d      	ldr	r3, [pc, #180]	; (80028f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800283a:	e001      	b.n	8002840 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800283c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4929      	ldr	r1, [pc, #164]	; (80028ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002848:	428b      	cmp	r3, r1
 800284a:	d101      	bne.n	8002850 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800284c:	4b28      	ldr	r3, [pc, #160]	; (80028f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800284e:	e001      	b.n	8002854 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002850:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002854:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002858:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002866:	f043 0202 	orr.w	r2, r3, #2
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff fda6 	bl	80023c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	f003 0308 	and.w	r3, r3, #8
 800287a:	2b08      	cmp	r3, #8
 800287c:	d131      	bne.n	80028e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	f003 0320 	and.w	r3, r3, #32
 8002884:	2b00      	cmp	r3, #0
 8002886:	d02c      	beq.n	80028e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a17      	ldr	r2, [pc, #92]	; (80028ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d101      	bne.n	8002896 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002892:	4b17      	ldr	r3, [pc, #92]	; (80028f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002894:	e001      	b.n	800289a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002896:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4912      	ldr	r1, [pc, #72]	; (80028ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80028a2:	428b      	cmp	r3, r1
 80028a4:	d101      	bne.n	80028aa <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80028a6:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80028a8:	e001      	b.n	80028ae <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80028aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80028b2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80028c2:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d0:	f043 0204 	orr.w	r2, r3, #4
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	f7ff fd71 	bl	80023c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80028de:	e000      	b.n	80028e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80028e0:	bf00      	nop
}
 80028e2:	bf00      	nop
 80028e4:	3720      	adds	r7, #32
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	40003800 	.word	0x40003800
 80028f0:	40003400 	.word	0x40003400

080028f4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	1c99      	adds	r1, r3, #2
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	6251      	str	r1, [r2, #36]	; 0x24
 800291a:	881a      	ldrh	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002926:	b29b      	uxth	r3, r3
 8002928:	3b01      	subs	r3, #1
 800292a:	b29a      	uxth	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002934:	b29b      	uxth	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d113      	bne.n	8002962 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002948:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800294e:	b29b      	uxth	r3, r3
 8002950:	2b00      	cmp	r3, #0
 8002952:	d106      	bne.n	8002962 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f7ff ffc9 	bl	80028f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002962:	bf00      	nop
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
	...

0800296c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	1c99      	adds	r1, r3, #2
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	6251      	str	r1, [r2, #36]	; 0x24
 800297e:	8819      	ldrh	r1, [r3, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a1d      	ldr	r2, [pc, #116]	; (80029fc <I2SEx_TxISR_I2SExt+0x90>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d101      	bne.n	800298e <I2SEx_TxISR_I2SExt+0x22>
 800298a:	4b1d      	ldr	r3, [pc, #116]	; (8002a00 <I2SEx_TxISR_I2SExt+0x94>)
 800298c:	e001      	b.n	8002992 <I2SEx_TxISR_I2SExt+0x26>
 800298e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002992:	460a      	mov	r2, r1
 8002994:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800299a:	b29b      	uxth	r3, r3
 800299c:	3b01      	subs	r3, #1
 800299e:	b29a      	uxth	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d121      	bne.n	80029f2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a12      	ldr	r2, [pc, #72]	; (80029fc <I2SEx_TxISR_I2SExt+0x90>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d101      	bne.n	80029bc <I2SEx_TxISR_I2SExt+0x50>
 80029b8:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <I2SEx_TxISR_I2SExt+0x94>)
 80029ba:	e001      	b.n	80029c0 <I2SEx_TxISR_I2SExt+0x54>
 80029bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029c0:	685a      	ldr	r2, [r3, #4]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	490d      	ldr	r1, [pc, #52]	; (80029fc <I2SEx_TxISR_I2SExt+0x90>)
 80029c8:	428b      	cmp	r3, r1
 80029ca:	d101      	bne.n	80029d0 <I2SEx_TxISR_I2SExt+0x64>
 80029cc:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <I2SEx_TxISR_I2SExt+0x94>)
 80029ce:	e001      	b.n	80029d4 <I2SEx_TxISR_I2SExt+0x68>
 80029d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80029d8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80029de:	b29b      	uxth	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d106      	bne.n	80029f2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7ff ff81 	bl	80028f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80029f2:	bf00      	nop
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40003800 	.word	0x40003800
 8002a00:	40003400 	.word	0x40003400

08002a04 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68d8      	ldr	r0, [r3, #12]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a16:	1c99      	adds	r1, r3, #2
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002a1c:	b282      	uxth	r2, r0
 8002a1e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	3b01      	subs	r3, #1
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d113      	bne.n	8002a60 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a46:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d106      	bne.n	8002a60 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7ff ff4a 	bl	80028f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002a60:	bf00      	nop
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a20      	ldr	r2, [pc, #128]	; (8002af8 <I2SEx_RxISR_I2SExt+0x90>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d101      	bne.n	8002a7e <I2SEx_RxISR_I2SExt+0x16>
 8002a7a:	4b20      	ldr	r3, [pc, #128]	; (8002afc <I2SEx_RxISR_I2SExt+0x94>)
 8002a7c:	e001      	b.n	8002a82 <I2SEx_RxISR_I2SExt+0x1a>
 8002a7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a82:	68d8      	ldr	r0, [r3, #12]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a88:	1c99      	adds	r1, r3, #2
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002a8e:	b282      	uxth	r2, r0
 8002a90:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	3b01      	subs	r3, #1
 8002a9a:	b29a      	uxth	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d121      	bne.n	8002aee <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a12      	ldr	r2, [pc, #72]	; (8002af8 <I2SEx_RxISR_I2SExt+0x90>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d101      	bne.n	8002ab8 <I2SEx_RxISR_I2SExt+0x50>
 8002ab4:	4b11      	ldr	r3, [pc, #68]	; (8002afc <I2SEx_RxISR_I2SExt+0x94>)
 8002ab6:	e001      	b.n	8002abc <I2SEx_RxISR_I2SExt+0x54>
 8002ab8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	490d      	ldr	r1, [pc, #52]	; (8002af8 <I2SEx_RxISR_I2SExt+0x90>)
 8002ac4:	428b      	cmp	r3, r1
 8002ac6:	d101      	bne.n	8002acc <I2SEx_RxISR_I2SExt+0x64>
 8002ac8:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <I2SEx_RxISR_I2SExt+0x94>)
 8002aca:	e001      	b.n	8002ad0 <I2SEx_RxISR_I2SExt+0x68>
 8002acc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ad0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ad4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d106      	bne.n	8002aee <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f7ff ff03 	bl	80028f4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40003800 	.word	0x40003800
 8002afc:	40003400 	.word	0x40003400

08002b00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e25b      	b.n	8002fca <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d075      	beq.n	8002c0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b1e:	4ba3      	ldr	r3, [pc, #652]	; (8002dac <HAL_RCC_OscConfig+0x2ac>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 030c 	and.w	r3, r3, #12
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	d00c      	beq.n	8002b44 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b2a:	4ba0      	ldr	r3, [pc, #640]	; (8002dac <HAL_RCC_OscConfig+0x2ac>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b32:	2b08      	cmp	r3, #8
 8002b34:	d112      	bne.n	8002b5c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b36:	4b9d      	ldr	r3, [pc, #628]	; (8002dac <HAL_RCC_OscConfig+0x2ac>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b42:	d10b      	bne.n	8002b5c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b44:	4b99      	ldr	r3, [pc, #612]	; (8002dac <HAL_RCC_OscConfig+0x2ac>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d05b      	beq.n	8002c08 <HAL_RCC_OscConfig+0x108>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d157      	bne.n	8002c08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e236      	b.n	8002fca <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b64:	d106      	bne.n	8002b74 <HAL_RCC_OscConfig+0x74>
 8002b66:	4b91      	ldr	r3, [pc, #580]	; (8002dac <HAL_RCC_OscConfig+0x2ac>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a90      	ldr	r2, [pc, #576]	; (8002dac <HAL_RCC_OscConfig+0x2ac>)
 8002b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b70:	6013      	str	r3, [r2, #0]
 8002b72:	e01d      	b.n	8002bb0 <HAL_RCC_OscConfig+0xb0>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b7c:	d10c      	bne.n	8002b98 <HAL_RCC_OscConfig+0x98>
 8002b7e:	4b8b      	ldr	r3, [pc, #556]	; (8002dac <HAL_RCC_OscConfig+0x2ac>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a8a      	ldr	r2, [pc, #552]	; (8002dac <HAL_RCC_OscConfig+0x2ac>)
 8002b84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	4b88      	ldr	r3, [pc, #544]	; (8002dac <HAL_RCC_OscConfig+0x2ac>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a87      	ldr	r2, [pc, #540]	; (8002dac <HAL_RCC_OscConfig+0x2ac>)
 8002b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	e00b      	b.n	8002bb0 <HAL_RCC_OscConfig+0xb0>
 8002b98:	4b84      	ldr	r3, [pc, #528]	; (8002dac <HAL_RCC_OscConfig+0x2ac>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a83      	ldr	r2, [pc, #524]	; (8002dac <HAL_RCC_OscConfig+0x2ac>)
 8002b9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ba2:	6013      	str	r3, [r2, #0]
 8002ba4:	4b81      	ldr	r3, [pc, #516]	; (8002dac <HAL_RCC_OscConfig+0x2ac>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a80      	ldr	r2, [pc, #512]	; (8002dac <HAL_RCC_OscConfig+0x2ac>)
 8002baa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d013      	beq.n	8002be0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb8:	f7fe fc02 	bl	80013c0 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bc0:	f7fe fbfe 	bl	80013c0 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b64      	cmp	r3, #100	; 0x64
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e1fb      	b.n	8002fca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd2:	4b76      	ldr	r3, [pc, #472]	; (8002dac <HAL_RCC_OscConfig+0x2ac>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0f0      	beq.n	8002bc0 <HAL_RCC_OscConfig+0xc0>
 8002bde:	e014      	b.n	8002c0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be0:	f7fe fbee 	bl	80013c0 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002be8:	f7fe fbea 	bl	80013c0 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b64      	cmp	r3, #100	; 0x64
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e1e7      	b.n	8002fca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bfa:	4b6c      	ldr	r3, [pc, #432]	; (8002dac <HAL_RCC_OscConfig+0x2ac>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f0      	bne.n	8002be8 <HAL_RCC_OscConfig+0xe8>
 8002c06:	e000      	b.n	8002c0a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d063      	beq.n	8002cde <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c16:	4b65      	ldr	r3, [pc, #404]	; (8002dac <HAL_RCC_OscConfig+0x2ac>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 030c 	and.w	r3, r3, #12
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00b      	beq.n	8002c3a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c22:	4b62      	ldr	r3, [pc, #392]	; (8002dac <HAL_RCC_OscConfig+0x2ac>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c2a:	2b08      	cmp	r3, #8
 8002c2c:	d11c      	bne.n	8002c68 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c2e:	4b5f      	ldr	r3, [pc, #380]	; (8002dac <HAL_RCC_OscConfig+0x2ac>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d116      	bne.n	8002c68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c3a:	4b5c      	ldr	r3, [pc, #368]	; (8002dac <HAL_RCC_OscConfig+0x2ac>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d005      	beq.n	8002c52 <HAL_RCC_OscConfig+0x152>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d001      	beq.n	8002c52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e1bb      	b.n	8002fca <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c52:	4b56      	ldr	r3, [pc, #344]	; (8002dac <HAL_RCC_OscConfig+0x2ac>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	4952      	ldr	r1, [pc, #328]	; (8002dac <HAL_RCC_OscConfig+0x2ac>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c66:	e03a      	b.n	8002cde <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d020      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c70:	4b4f      	ldr	r3, [pc, #316]	; (8002db0 <HAL_RCC_OscConfig+0x2b0>)
 8002c72:	2201      	movs	r2, #1
 8002c74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c76:	f7fe fba3 	bl	80013c0 <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c7c:	e008      	b.n	8002c90 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c7e:	f7fe fb9f 	bl	80013c0 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e19c      	b.n	8002fca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c90:	4b46      	ldr	r3, [pc, #280]	; (8002dac <HAL_RCC_OscConfig+0x2ac>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0f0      	beq.n	8002c7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c9c:	4b43      	ldr	r3, [pc, #268]	; (8002dac <HAL_RCC_OscConfig+0x2ac>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	00db      	lsls	r3, r3, #3
 8002caa:	4940      	ldr	r1, [pc, #256]	; (8002dac <HAL_RCC_OscConfig+0x2ac>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	600b      	str	r3, [r1, #0]
 8002cb0:	e015      	b.n	8002cde <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cb2:	4b3f      	ldr	r3, [pc, #252]	; (8002db0 <HAL_RCC_OscConfig+0x2b0>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb8:	f7fe fb82 	bl	80013c0 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cbe:	e008      	b.n	8002cd2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cc0:	f7fe fb7e 	bl	80013c0 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e17b      	b.n	8002fca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cd2:	4b36      	ldr	r3, [pc, #216]	; (8002dac <HAL_RCC_OscConfig+0x2ac>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1f0      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0308 	and.w	r3, r3, #8
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d030      	beq.n	8002d4c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d016      	beq.n	8002d20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cf2:	4b30      	ldr	r3, [pc, #192]	; (8002db4 <HAL_RCC_OscConfig+0x2b4>)
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf8:	f7fe fb62 	bl	80013c0 <HAL_GetTick>
 8002cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cfe:	e008      	b.n	8002d12 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d00:	f7fe fb5e 	bl	80013c0 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e15b      	b.n	8002fca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d12:	4b26      	ldr	r3, [pc, #152]	; (8002dac <HAL_RCC_OscConfig+0x2ac>)
 8002d14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0f0      	beq.n	8002d00 <HAL_RCC_OscConfig+0x200>
 8002d1e:	e015      	b.n	8002d4c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d20:	4b24      	ldr	r3, [pc, #144]	; (8002db4 <HAL_RCC_OscConfig+0x2b4>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d26:	f7fe fb4b 	bl	80013c0 <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d2c:	e008      	b.n	8002d40 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d2e:	f7fe fb47 	bl	80013c0 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d901      	bls.n	8002d40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d3c:	2303      	movs	r3, #3
 8002d3e:	e144      	b.n	8002fca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d40:	4b1a      	ldr	r3, [pc, #104]	; (8002dac <HAL_RCC_OscConfig+0x2ac>)
 8002d42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d44:	f003 0302 	and.w	r3, r3, #2
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d1f0      	bne.n	8002d2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 80a0 	beq.w	8002e9a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d5e:	4b13      	ldr	r3, [pc, #76]	; (8002dac <HAL_RCC_OscConfig+0x2ac>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10f      	bne.n	8002d8a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	60bb      	str	r3, [r7, #8]
 8002d6e:	4b0f      	ldr	r3, [pc, #60]	; (8002dac <HAL_RCC_OscConfig+0x2ac>)
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	4a0e      	ldr	r2, [pc, #56]	; (8002dac <HAL_RCC_OscConfig+0x2ac>)
 8002d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d78:	6413      	str	r3, [r2, #64]	; 0x40
 8002d7a:	4b0c      	ldr	r3, [pc, #48]	; (8002dac <HAL_RCC_OscConfig+0x2ac>)
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d82:	60bb      	str	r3, [r7, #8]
 8002d84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d86:	2301      	movs	r3, #1
 8002d88:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8a:	4b0b      	ldr	r3, [pc, #44]	; (8002db8 <HAL_RCC_OscConfig+0x2b8>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d121      	bne.n	8002dda <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d96:	4b08      	ldr	r3, [pc, #32]	; (8002db8 <HAL_RCC_OscConfig+0x2b8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a07      	ldr	r2, [pc, #28]	; (8002db8 <HAL_RCC_OscConfig+0x2b8>)
 8002d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002da2:	f7fe fb0d 	bl	80013c0 <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da8:	e011      	b.n	8002dce <HAL_RCC_OscConfig+0x2ce>
 8002daa:	bf00      	nop
 8002dac:	40023800 	.word	0x40023800
 8002db0:	42470000 	.word	0x42470000
 8002db4:	42470e80 	.word	0x42470e80
 8002db8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dbc:	f7fe fb00 	bl	80013c0 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e0fd      	b.n	8002fca <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dce:	4b81      	ldr	r3, [pc, #516]	; (8002fd4 <HAL_RCC_OscConfig+0x4d4>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d0f0      	beq.n	8002dbc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d106      	bne.n	8002df0 <HAL_RCC_OscConfig+0x2f0>
 8002de2:	4b7d      	ldr	r3, [pc, #500]	; (8002fd8 <HAL_RCC_OscConfig+0x4d8>)
 8002de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de6:	4a7c      	ldr	r2, [pc, #496]	; (8002fd8 <HAL_RCC_OscConfig+0x4d8>)
 8002de8:	f043 0301 	orr.w	r3, r3, #1
 8002dec:	6713      	str	r3, [r2, #112]	; 0x70
 8002dee:	e01c      	b.n	8002e2a <HAL_RCC_OscConfig+0x32a>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	2b05      	cmp	r3, #5
 8002df6:	d10c      	bne.n	8002e12 <HAL_RCC_OscConfig+0x312>
 8002df8:	4b77      	ldr	r3, [pc, #476]	; (8002fd8 <HAL_RCC_OscConfig+0x4d8>)
 8002dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfc:	4a76      	ldr	r2, [pc, #472]	; (8002fd8 <HAL_RCC_OscConfig+0x4d8>)
 8002dfe:	f043 0304 	orr.w	r3, r3, #4
 8002e02:	6713      	str	r3, [r2, #112]	; 0x70
 8002e04:	4b74      	ldr	r3, [pc, #464]	; (8002fd8 <HAL_RCC_OscConfig+0x4d8>)
 8002e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e08:	4a73      	ldr	r2, [pc, #460]	; (8002fd8 <HAL_RCC_OscConfig+0x4d8>)
 8002e0a:	f043 0301 	orr.w	r3, r3, #1
 8002e0e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e10:	e00b      	b.n	8002e2a <HAL_RCC_OscConfig+0x32a>
 8002e12:	4b71      	ldr	r3, [pc, #452]	; (8002fd8 <HAL_RCC_OscConfig+0x4d8>)
 8002e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e16:	4a70      	ldr	r2, [pc, #448]	; (8002fd8 <HAL_RCC_OscConfig+0x4d8>)
 8002e18:	f023 0301 	bic.w	r3, r3, #1
 8002e1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e1e:	4b6e      	ldr	r3, [pc, #440]	; (8002fd8 <HAL_RCC_OscConfig+0x4d8>)
 8002e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e22:	4a6d      	ldr	r2, [pc, #436]	; (8002fd8 <HAL_RCC_OscConfig+0x4d8>)
 8002e24:	f023 0304 	bic.w	r3, r3, #4
 8002e28:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d015      	beq.n	8002e5e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e32:	f7fe fac5 	bl	80013c0 <HAL_GetTick>
 8002e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e38:	e00a      	b.n	8002e50 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e3a:	f7fe fac1 	bl	80013c0 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e0bc      	b.n	8002fca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e50:	4b61      	ldr	r3, [pc, #388]	; (8002fd8 <HAL_RCC_OscConfig+0x4d8>)
 8002e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0ee      	beq.n	8002e3a <HAL_RCC_OscConfig+0x33a>
 8002e5c:	e014      	b.n	8002e88 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e5e:	f7fe faaf 	bl	80013c0 <HAL_GetTick>
 8002e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e64:	e00a      	b.n	8002e7c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e66:	f7fe faab 	bl	80013c0 <HAL_GetTick>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e0a6      	b.n	8002fca <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e7c:	4b56      	ldr	r3, [pc, #344]	; (8002fd8 <HAL_RCC_OscConfig+0x4d8>)
 8002e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1ee      	bne.n	8002e66 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e88:	7dfb      	ldrb	r3, [r7, #23]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d105      	bne.n	8002e9a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e8e:	4b52      	ldr	r3, [pc, #328]	; (8002fd8 <HAL_RCC_OscConfig+0x4d8>)
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	4a51      	ldr	r2, [pc, #324]	; (8002fd8 <HAL_RCC_OscConfig+0x4d8>)
 8002e94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e98:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f000 8092 	beq.w	8002fc8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ea4:	4b4c      	ldr	r3, [pc, #304]	; (8002fd8 <HAL_RCC_OscConfig+0x4d8>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f003 030c 	and.w	r3, r3, #12
 8002eac:	2b08      	cmp	r3, #8
 8002eae:	d05c      	beq.n	8002f6a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d141      	bne.n	8002f3c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eb8:	4b48      	ldr	r3, [pc, #288]	; (8002fdc <HAL_RCC_OscConfig+0x4dc>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ebe:	f7fe fa7f 	bl	80013c0 <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ec4:	e008      	b.n	8002ed8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ec6:	f7fe fa7b 	bl	80013c0 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d901      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002ed4:	2303      	movs	r3, #3
 8002ed6:	e078      	b.n	8002fca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ed8:	4b3f      	ldr	r3, [pc, #252]	; (8002fd8 <HAL_RCC_OscConfig+0x4d8>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1f0      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	69da      	ldr	r2, [r3, #28]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a1b      	ldr	r3, [r3, #32]
 8002eec:	431a      	orrs	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef2:	019b      	lsls	r3, r3, #6
 8002ef4:	431a      	orrs	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efa:	085b      	lsrs	r3, r3, #1
 8002efc:	3b01      	subs	r3, #1
 8002efe:	041b      	lsls	r3, r3, #16
 8002f00:	431a      	orrs	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f06:	061b      	lsls	r3, r3, #24
 8002f08:	4933      	ldr	r1, [pc, #204]	; (8002fd8 <HAL_RCC_OscConfig+0x4d8>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f0e:	4b33      	ldr	r3, [pc, #204]	; (8002fdc <HAL_RCC_OscConfig+0x4dc>)
 8002f10:	2201      	movs	r2, #1
 8002f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f14:	f7fe fa54 	bl	80013c0 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f1c:	f7fe fa50 	bl	80013c0 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e04d      	b.n	8002fca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f2e:	4b2a      	ldr	r3, [pc, #168]	; (8002fd8 <HAL_RCC_OscConfig+0x4d8>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0f0      	beq.n	8002f1c <HAL_RCC_OscConfig+0x41c>
 8002f3a:	e045      	b.n	8002fc8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f3c:	4b27      	ldr	r3, [pc, #156]	; (8002fdc <HAL_RCC_OscConfig+0x4dc>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f42:	f7fe fa3d 	bl	80013c0 <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f48:	e008      	b.n	8002f5c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f4a:	f7fe fa39 	bl	80013c0 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e036      	b.n	8002fca <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f5c:	4b1e      	ldr	r3, [pc, #120]	; (8002fd8 <HAL_RCC_OscConfig+0x4d8>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1f0      	bne.n	8002f4a <HAL_RCC_OscConfig+0x44a>
 8002f68:	e02e      	b.n	8002fc8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d101      	bne.n	8002f76 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e029      	b.n	8002fca <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f76:	4b18      	ldr	r3, [pc, #96]	; (8002fd8 <HAL_RCC_OscConfig+0x4d8>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d11c      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d115      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d10d      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d106      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d001      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e000      	b.n	8002fca <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40007000 	.word	0x40007000
 8002fd8:	40023800 	.word	0x40023800
 8002fdc:	42470060 	.word	0x42470060

08002fe0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e0cc      	b.n	800318e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ff4:	4b68      	ldr	r3, [pc, #416]	; (8003198 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 030f 	and.w	r3, r3, #15
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d90c      	bls.n	800301c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003002:	4b65      	ldr	r3, [pc, #404]	; (8003198 <HAL_RCC_ClockConfig+0x1b8>)
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	b2d2      	uxtb	r2, r2
 8003008:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800300a:	4b63      	ldr	r3, [pc, #396]	; (8003198 <HAL_RCC_ClockConfig+0x1b8>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	429a      	cmp	r2, r3
 8003016:	d001      	beq.n	800301c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e0b8      	b.n	800318e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d020      	beq.n	800306a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b00      	cmp	r3, #0
 8003032:	d005      	beq.n	8003040 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003034:	4b59      	ldr	r3, [pc, #356]	; (800319c <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	4a58      	ldr	r2, [pc, #352]	; (800319c <HAL_RCC_ClockConfig+0x1bc>)
 800303a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800303e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0308 	and.w	r3, r3, #8
 8003048:	2b00      	cmp	r3, #0
 800304a:	d005      	beq.n	8003058 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800304c:	4b53      	ldr	r3, [pc, #332]	; (800319c <HAL_RCC_ClockConfig+0x1bc>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	4a52      	ldr	r2, [pc, #328]	; (800319c <HAL_RCC_ClockConfig+0x1bc>)
 8003052:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003056:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003058:	4b50      	ldr	r3, [pc, #320]	; (800319c <HAL_RCC_ClockConfig+0x1bc>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	494d      	ldr	r1, [pc, #308]	; (800319c <HAL_RCC_ClockConfig+0x1bc>)
 8003066:	4313      	orrs	r3, r2
 8003068:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	d044      	beq.n	8003100 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d107      	bne.n	800308e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800307e:	4b47      	ldr	r3, [pc, #284]	; (800319c <HAL_RCC_ClockConfig+0x1bc>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d119      	bne.n	80030be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e07f      	b.n	800318e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2b02      	cmp	r3, #2
 8003094:	d003      	beq.n	800309e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800309a:	2b03      	cmp	r3, #3
 800309c:	d107      	bne.n	80030ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800309e:	4b3f      	ldr	r3, [pc, #252]	; (800319c <HAL_RCC_ClockConfig+0x1bc>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d109      	bne.n	80030be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e06f      	b.n	800318e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ae:	4b3b      	ldr	r3, [pc, #236]	; (800319c <HAL_RCC_ClockConfig+0x1bc>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d101      	bne.n	80030be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e067      	b.n	800318e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030be:	4b37      	ldr	r3, [pc, #220]	; (800319c <HAL_RCC_ClockConfig+0x1bc>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f023 0203 	bic.w	r2, r3, #3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	4934      	ldr	r1, [pc, #208]	; (800319c <HAL_RCC_ClockConfig+0x1bc>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030d0:	f7fe f976 	bl	80013c0 <HAL_GetTick>
 80030d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d6:	e00a      	b.n	80030ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030d8:	f7fe f972 	bl	80013c0 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d901      	bls.n	80030ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030ea:	2303      	movs	r3, #3
 80030ec:	e04f      	b.n	800318e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ee:	4b2b      	ldr	r3, [pc, #172]	; (800319c <HAL_RCC_ClockConfig+0x1bc>)
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	f003 020c 	and.w	r2, r3, #12
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d1eb      	bne.n	80030d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003100:	4b25      	ldr	r3, [pc, #148]	; (8003198 <HAL_RCC_ClockConfig+0x1b8>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 030f 	and.w	r3, r3, #15
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	429a      	cmp	r2, r3
 800310c:	d20c      	bcs.n	8003128 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800310e:	4b22      	ldr	r3, [pc, #136]	; (8003198 <HAL_RCC_ClockConfig+0x1b8>)
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	b2d2      	uxtb	r2, r2
 8003114:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003116:	4b20      	ldr	r3, [pc, #128]	; (8003198 <HAL_RCC_ClockConfig+0x1b8>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	429a      	cmp	r2, r3
 8003122:	d001      	beq.n	8003128 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e032      	b.n	800318e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	d008      	beq.n	8003146 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003134:	4b19      	ldr	r3, [pc, #100]	; (800319c <HAL_RCC_ClockConfig+0x1bc>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	4916      	ldr	r1, [pc, #88]	; (800319c <HAL_RCC_ClockConfig+0x1bc>)
 8003142:	4313      	orrs	r3, r2
 8003144:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0308 	and.w	r3, r3, #8
 800314e:	2b00      	cmp	r3, #0
 8003150:	d009      	beq.n	8003166 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003152:	4b12      	ldr	r3, [pc, #72]	; (800319c <HAL_RCC_ClockConfig+0x1bc>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	490e      	ldr	r1, [pc, #56]	; (800319c <HAL_RCC_ClockConfig+0x1bc>)
 8003162:	4313      	orrs	r3, r2
 8003164:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003166:	f000 f821 	bl	80031ac <HAL_RCC_GetSysClockFreq>
 800316a:	4601      	mov	r1, r0
 800316c:	4b0b      	ldr	r3, [pc, #44]	; (800319c <HAL_RCC_ClockConfig+0x1bc>)
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	091b      	lsrs	r3, r3, #4
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	4a0a      	ldr	r2, [pc, #40]	; (80031a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003178:	5cd3      	ldrb	r3, [r2, r3]
 800317a:	fa21 f303 	lsr.w	r3, r1, r3
 800317e:	4a09      	ldr	r2, [pc, #36]	; (80031a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003180:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003182:	4b09      	ldr	r3, [pc, #36]	; (80031a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f7fe f8d6 	bl	8001338 <HAL_InitTick>

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40023c00 	.word	0x40023c00
 800319c:	40023800 	.word	0x40023800
 80031a0:	08003c6c 	.word	0x08003c6c
 80031a4:	20000000 	.word	0x20000000
 80031a8:	20000004 	.word	0x20000004

080031ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	607b      	str	r3, [r7, #4]
 80031b6:	2300      	movs	r3, #0
 80031b8:	60fb      	str	r3, [r7, #12]
 80031ba:	2300      	movs	r3, #0
 80031bc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80031be:	2300      	movs	r3, #0
 80031c0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031c2:	4b50      	ldr	r3, [pc, #320]	; (8003304 <HAL_RCC_GetSysClockFreq+0x158>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 030c 	and.w	r3, r3, #12
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d007      	beq.n	80031de <HAL_RCC_GetSysClockFreq+0x32>
 80031ce:	2b08      	cmp	r3, #8
 80031d0:	d008      	beq.n	80031e4 <HAL_RCC_GetSysClockFreq+0x38>
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f040 808d 	bne.w	80032f2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031d8:	4b4b      	ldr	r3, [pc, #300]	; (8003308 <HAL_RCC_GetSysClockFreq+0x15c>)
 80031da:	60bb      	str	r3, [r7, #8]
       break;
 80031dc:	e08c      	b.n	80032f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031de:	4b4b      	ldr	r3, [pc, #300]	; (800330c <HAL_RCC_GetSysClockFreq+0x160>)
 80031e0:	60bb      	str	r3, [r7, #8]
      break;
 80031e2:	e089      	b.n	80032f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031e4:	4b47      	ldr	r3, [pc, #284]	; (8003304 <HAL_RCC_GetSysClockFreq+0x158>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031ec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031ee:	4b45      	ldr	r3, [pc, #276]	; (8003304 <HAL_RCC_GetSysClockFreq+0x158>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d023      	beq.n	8003242 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031fa:	4b42      	ldr	r3, [pc, #264]	; (8003304 <HAL_RCC_GetSysClockFreq+0x158>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	099b      	lsrs	r3, r3, #6
 8003200:	f04f 0400 	mov.w	r4, #0
 8003204:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	ea03 0501 	and.w	r5, r3, r1
 8003210:	ea04 0602 	and.w	r6, r4, r2
 8003214:	4a3d      	ldr	r2, [pc, #244]	; (800330c <HAL_RCC_GetSysClockFreq+0x160>)
 8003216:	fb02 f106 	mul.w	r1, r2, r6
 800321a:	2200      	movs	r2, #0
 800321c:	fb02 f205 	mul.w	r2, r2, r5
 8003220:	440a      	add	r2, r1
 8003222:	493a      	ldr	r1, [pc, #232]	; (800330c <HAL_RCC_GetSysClockFreq+0x160>)
 8003224:	fba5 0101 	umull	r0, r1, r5, r1
 8003228:	1853      	adds	r3, r2, r1
 800322a:	4619      	mov	r1, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f04f 0400 	mov.w	r4, #0
 8003232:	461a      	mov	r2, r3
 8003234:	4623      	mov	r3, r4
 8003236:	f7fc ffcd 	bl	80001d4 <__aeabi_uldivmod>
 800323a:	4603      	mov	r3, r0
 800323c:	460c      	mov	r4, r1
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	e049      	b.n	80032d6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003242:	4b30      	ldr	r3, [pc, #192]	; (8003304 <HAL_RCC_GetSysClockFreq+0x158>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	099b      	lsrs	r3, r3, #6
 8003248:	f04f 0400 	mov.w	r4, #0
 800324c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003250:	f04f 0200 	mov.w	r2, #0
 8003254:	ea03 0501 	and.w	r5, r3, r1
 8003258:	ea04 0602 	and.w	r6, r4, r2
 800325c:	4629      	mov	r1, r5
 800325e:	4632      	mov	r2, r6
 8003260:	f04f 0300 	mov.w	r3, #0
 8003264:	f04f 0400 	mov.w	r4, #0
 8003268:	0154      	lsls	r4, r2, #5
 800326a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800326e:	014b      	lsls	r3, r1, #5
 8003270:	4619      	mov	r1, r3
 8003272:	4622      	mov	r2, r4
 8003274:	1b49      	subs	r1, r1, r5
 8003276:	eb62 0206 	sbc.w	r2, r2, r6
 800327a:	f04f 0300 	mov.w	r3, #0
 800327e:	f04f 0400 	mov.w	r4, #0
 8003282:	0194      	lsls	r4, r2, #6
 8003284:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003288:	018b      	lsls	r3, r1, #6
 800328a:	1a5b      	subs	r3, r3, r1
 800328c:	eb64 0402 	sbc.w	r4, r4, r2
 8003290:	f04f 0100 	mov.w	r1, #0
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	00e2      	lsls	r2, r4, #3
 800329a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800329e:	00d9      	lsls	r1, r3, #3
 80032a0:	460b      	mov	r3, r1
 80032a2:	4614      	mov	r4, r2
 80032a4:	195b      	adds	r3, r3, r5
 80032a6:	eb44 0406 	adc.w	r4, r4, r6
 80032aa:	f04f 0100 	mov.w	r1, #0
 80032ae:	f04f 0200 	mov.w	r2, #0
 80032b2:	02a2      	lsls	r2, r4, #10
 80032b4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80032b8:	0299      	lsls	r1, r3, #10
 80032ba:	460b      	mov	r3, r1
 80032bc:	4614      	mov	r4, r2
 80032be:	4618      	mov	r0, r3
 80032c0:	4621      	mov	r1, r4
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f04f 0400 	mov.w	r4, #0
 80032c8:	461a      	mov	r2, r3
 80032ca:	4623      	mov	r3, r4
 80032cc:	f7fc ff82 	bl	80001d4 <__aeabi_uldivmod>
 80032d0:	4603      	mov	r3, r0
 80032d2:	460c      	mov	r4, r1
 80032d4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032d6:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <HAL_RCC_GetSysClockFreq+0x158>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	0c1b      	lsrs	r3, r3, #16
 80032dc:	f003 0303 	and.w	r3, r3, #3
 80032e0:	3301      	adds	r3, #1
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ee:	60bb      	str	r3, [r7, #8]
      break;
 80032f0:	e002      	b.n	80032f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032f2:	4b05      	ldr	r3, [pc, #20]	; (8003308 <HAL_RCC_GetSysClockFreq+0x15c>)
 80032f4:	60bb      	str	r3, [r7, #8]
      break;
 80032f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032f8:	68bb      	ldr	r3, [r7, #8]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003302:	bf00      	nop
 8003304:	40023800 	.word	0x40023800
 8003308:	00f42400 	.word	0x00f42400
 800330c:	017d7840 	.word	0x017d7840

08003310 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003318:	2300      	movs	r3, #0
 800331a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800331c:	2300      	movs	r3, #0
 800331e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b00      	cmp	r3, #0
 800332a:	d105      	bne.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003334:	2b00      	cmp	r3, #0
 8003336:	d035      	beq.n	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003338:	4b67      	ldr	r3, [pc, #412]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800333a:	2200      	movs	r2, #0
 800333c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800333e:	f7fe f83f 	bl	80013c0 <HAL_GetTick>
 8003342:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003344:	e008      	b.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003346:	f7fe f83b 	bl	80013c0 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d901      	bls.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e0ba      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003358:	4b60      	ldr	r3, [pc, #384]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1f0      	bne.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	019a      	lsls	r2, r3, #6
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	071b      	lsls	r3, r3, #28
 8003370:	495a      	ldr	r1, [pc, #360]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003372:	4313      	orrs	r3, r2
 8003374:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003378:	4b57      	ldr	r3, [pc, #348]	; (80034d8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800337a:	2201      	movs	r2, #1
 800337c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800337e:	f7fe f81f 	bl	80013c0 <HAL_GetTick>
 8003382:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003384:	e008      	b.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003386:	f7fe f81b 	bl	80013c0 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d901      	bls.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e09a      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003398:	4b50      	ldr	r3, [pc, #320]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0f0      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0302 	and.w	r3, r3, #2
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 8083 	beq.w	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80033b2:	2300      	movs	r3, #0
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	4b49      	ldr	r3, [pc, #292]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	4a48      	ldr	r2, [pc, #288]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80033bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c0:	6413      	str	r3, [r2, #64]	; 0x40
 80033c2:	4b46      	ldr	r3, [pc, #280]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ca:	60fb      	str	r3, [r7, #12]
 80033cc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80033ce:	4b44      	ldr	r3, [pc, #272]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a43      	ldr	r2, [pc, #268]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033d8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80033da:	f7fd fff1 	bl	80013c0 <HAL_GetTick>
 80033de:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80033e0:	e008      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80033e2:	f7fd ffed 	bl	80013c0 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d901      	bls.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e06c      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80033f4:	4b3a      	ldr	r3, [pc, #232]	; (80034e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d0f0      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003400:	4b36      	ldr	r3, [pc, #216]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003404:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003408:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d02f      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	429a      	cmp	r2, r3
 800341c:	d028      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800341e:	4b2f      	ldr	r3, [pc, #188]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003426:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003428:	4b2e      	ldr	r3, [pc, #184]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800342a:	2201      	movs	r2, #1
 800342c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800342e:	4b2d      	ldr	r3, [pc, #180]	; (80034e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003434:	4a29      	ldr	r2, [pc, #164]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800343a:	4b28      	ldr	r3, [pc, #160]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800343c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b01      	cmp	r3, #1
 8003444:	d114      	bne.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003446:	f7fd ffbb 	bl	80013c0 <HAL_GetTick>
 800344a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800344c:	e00a      	b.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800344e:	f7fd ffb7 	bl	80013c0 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	f241 3288 	movw	r2, #5000	; 0x1388
 800345c:	4293      	cmp	r3, r2
 800345e:	d901      	bls.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e034      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003464:	4b1d      	ldr	r3, [pc, #116]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b00      	cmp	r3, #0
 800346e:	d0ee      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003478:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800347c:	d10d      	bne.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800347e:	4b17      	ldr	r3, [pc, #92]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800348e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003492:	4912      	ldr	r1, [pc, #72]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003494:	4313      	orrs	r3, r2
 8003496:	608b      	str	r3, [r1, #8]
 8003498:	e005      	b.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800349a:	4b10      	ldr	r3, [pc, #64]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	4a0f      	ldr	r2, [pc, #60]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80034a0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80034a4:	6093      	str	r3, [r2, #8]
 80034a6:	4b0d      	ldr	r3, [pc, #52]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80034a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034b2:	490a      	ldr	r1, [pc, #40]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0308 	and.w	r3, r3, #8
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d003      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	7c1a      	ldrb	r2, [r3, #16]
 80034c8:	4b07      	ldr	r3, [pc, #28]	; (80034e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80034ca:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3718      	adds	r7, #24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	42470068 	.word	0x42470068
 80034dc:	40023800 	.word	0x40023800
 80034e0:	40007000 	.word	0x40007000
 80034e4:	42470e40 	.word	0x42470e40
 80034e8:	424711e0 	.word	0x424711e0

080034ec <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b087      	sub	sp, #28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80034f4:	2300      	movs	r3, #0
 80034f6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003500:	2300      	movs	r3, #0
 8003502:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d13d      	bne.n	8003586 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800350a:	4b22      	ldr	r3, [pc, #136]	; (8003594 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003512:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d004      	beq.n	8003524 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800351a:	2b01      	cmp	r3, #1
 800351c:	d12f      	bne.n	800357e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800351e:	4b1e      	ldr	r3, [pc, #120]	; (8003598 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003520:	617b      	str	r3, [r7, #20]
          break;
 8003522:	e02f      	b.n	8003584 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003524:	4b1b      	ldr	r3, [pc, #108]	; (8003594 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800352c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003530:	d108      	bne.n	8003544 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003532:	4b18      	ldr	r3, [pc, #96]	; (8003594 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800353a:	4a18      	ldr	r2, [pc, #96]	; (800359c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800353c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003540:	613b      	str	r3, [r7, #16]
 8003542:	e007      	b.n	8003554 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003544:	4b13      	ldr	r3, [pc, #76]	; (8003594 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800354c:	4a14      	ldr	r2, [pc, #80]	; (80035a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800354e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003552:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003554:	4b0f      	ldr	r3, [pc, #60]	; (8003594 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003556:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800355a:	099b      	lsrs	r3, r3, #6
 800355c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	fb02 f303 	mul.w	r3, r2, r3
 8003566:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003568:	4b0a      	ldr	r3, [pc, #40]	; (8003594 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800356a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800356e:	0f1b      	lsrs	r3, r3, #28
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	fbb2 f3f3 	udiv	r3, r2, r3
 800357a:	617b      	str	r3, [r7, #20]
          break;
 800357c:	e002      	b.n	8003584 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800357e:	2300      	movs	r3, #0
 8003580:	617b      	str	r3, [r7, #20]
          break;
 8003582:	bf00      	nop
        }
      }
      break;
 8003584:	bf00      	nop
    }
  }
  return frequency;
 8003586:	697b      	ldr	r3, [r7, #20]
}
 8003588:	4618      	mov	r0, r3
 800358a:	371c      	adds	r7, #28
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	40023800 	.word	0x40023800
 8003598:	00bb8000 	.word	0x00bb8000
 800359c:	017d7840 	.word	0x017d7840
 80035a0:	00f42400 	.word	0x00f42400

080035a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e01d      	b.n	80035f2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d106      	bne.n	80035d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7fd fe40 	bl	8001250 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2202      	movs	r2, #2
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3304      	adds	r3, #4
 80035e0:	4619      	mov	r1, r3
 80035e2:	4610      	mov	r0, r2
 80035e4:	f000 f95e 	bl	80038a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b085      	sub	sp, #20
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f042 0201 	orr.w	r2, r2, #1
 8003610:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f003 0307 	and.w	r3, r3, #7
 800361c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2b06      	cmp	r3, #6
 8003622:	d007      	beq.n	8003634 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0201 	orr.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b082      	sub	sp, #8
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	691b      	ldr	r3, [r3, #16]
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b02      	cmp	r3, #2
 8003656:	d122      	bne.n	800369e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b02      	cmp	r3, #2
 8003664:	d11b      	bne.n	800369e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f06f 0202 	mvn.w	r2, #2
 800366e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	f003 0303 	and.w	r3, r3, #3
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 f8ee 	bl	8003866 <HAL_TIM_IC_CaptureCallback>
 800368a:	e005      	b.n	8003698 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f8e0 	bl	8003852 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f8f1 	bl	800387a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b04      	cmp	r3, #4
 80036aa:	d122      	bne.n	80036f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f003 0304 	and.w	r3, r3, #4
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	d11b      	bne.n	80036f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f06f 0204 	mvn.w	r2, #4
 80036c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 f8c4 	bl	8003866 <HAL_TIM_IC_CaptureCallback>
 80036de:	e005      	b.n	80036ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 f8b6 	bl	8003852 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f8c7 	bl	800387a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	f003 0308 	and.w	r3, r3, #8
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d122      	bne.n	8003746 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b08      	cmp	r3, #8
 800370c:	d11b      	bne.n	8003746 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f06f 0208 	mvn.w	r2, #8
 8003716:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2204      	movs	r2, #4
 800371c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	69db      	ldr	r3, [r3, #28]
 8003724:	f003 0303 	and.w	r3, r3, #3
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 f89a 	bl	8003866 <HAL_TIM_IC_CaptureCallback>
 8003732:	e005      	b.n	8003740 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f000 f88c 	bl	8003852 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 f89d 	bl	800387a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	f003 0310 	and.w	r3, r3, #16
 8003750:	2b10      	cmp	r3, #16
 8003752:	d122      	bne.n	800379a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f003 0310 	and.w	r3, r3, #16
 800375e:	2b10      	cmp	r3, #16
 8003760:	d11b      	bne.n	800379a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f06f 0210 	mvn.w	r2, #16
 800376a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2208      	movs	r2, #8
 8003770:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	69db      	ldr	r3, [r3, #28]
 8003778:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 f870 	bl	8003866 <HAL_TIM_IC_CaptureCallback>
 8003786:	e005      	b.n	8003794 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f862 	bl	8003852 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f873 	bl	800387a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d10e      	bne.n	80037c6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d107      	bne.n	80037c6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f06f 0201 	mvn.w	r2, #1
 80037be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f7fd fbf9 	bl	8000fb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d0:	2b80      	cmp	r3, #128	; 0x80
 80037d2:	d10e      	bne.n	80037f2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037de:	2b80      	cmp	r3, #128	; 0x80
 80037e0:	d107      	bne.n	80037f2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f8e3 	bl	80039b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fc:	2b40      	cmp	r3, #64	; 0x40
 80037fe:	d10e      	bne.n	800381e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800380a:	2b40      	cmp	r3, #64	; 0x40
 800380c:	d107      	bne.n	800381e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f000 f838 	bl	800388e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	f003 0320 	and.w	r3, r3, #32
 8003828:	2b20      	cmp	r3, #32
 800382a:	d10e      	bne.n	800384a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	f003 0320 	and.w	r3, r3, #32
 8003836:	2b20      	cmp	r3, #32
 8003838:	d107      	bne.n	800384a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f06f 0220 	mvn.w	r2, #32
 8003842:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f8ad 	bl	80039a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800384a:	bf00      	nop
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr

08003866 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003866:	b480      	push	{r7}
 8003868:	b083      	sub	sp, #12
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800386e:	bf00      	nop
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800388e:	b480      	push	{r7}
 8003890:	b083      	sub	sp, #12
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
	...

080038a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a34      	ldr	r2, [pc, #208]	; (8003988 <TIM_Base_SetConfig+0xe4>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d00f      	beq.n	80038dc <TIM_Base_SetConfig+0x38>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c2:	d00b      	beq.n	80038dc <TIM_Base_SetConfig+0x38>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a31      	ldr	r2, [pc, #196]	; (800398c <TIM_Base_SetConfig+0xe8>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d007      	beq.n	80038dc <TIM_Base_SetConfig+0x38>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a30      	ldr	r2, [pc, #192]	; (8003990 <TIM_Base_SetConfig+0xec>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d003      	beq.n	80038dc <TIM_Base_SetConfig+0x38>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a2f      	ldr	r2, [pc, #188]	; (8003994 <TIM_Base_SetConfig+0xf0>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d108      	bne.n	80038ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a25      	ldr	r2, [pc, #148]	; (8003988 <TIM_Base_SetConfig+0xe4>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d01b      	beq.n	800392e <TIM_Base_SetConfig+0x8a>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038fc:	d017      	beq.n	800392e <TIM_Base_SetConfig+0x8a>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a22      	ldr	r2, [pc, #136]	; (800398c <TIM_Base_SetConfig+0xe8>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d013      	beq.n	800392e <TIM_Base_SetConfig+0x8a>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a21      	ldr	r2, [pc, #132]	; (8003990 <TIM_Base_SetConfig+0xec>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d00f      	beq.n	800392e <TIM_Base_SetConfig+0x8a>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a20      	ldr	r2, [pc, #128]	; (8003994 <TIM_Base_SetConfig+0xf0>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d00b      	beq.n	800392e <TIM_Base_SetConfig+0x8a>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a1f      	ldr	r2, [pc, #124]	; (8003998 <TIM_Base_SetConfig+0xf4>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d007      	beq.n	800392e <TIM_Base_SetConfig+0x8a>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a1e      	ldr	r2, [pc, #120]	; (800399c <TIM_Base_SetConfig+0xf8>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d003      	beq.n	800392e <TIM_Base_SetConfig+0x8a>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a1d      	ldr	r2, [pc, #116]	; (80039a0 <TIM_Base_SetConfig+0xfc>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d108      	bne.n	8003940 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	4313      	orrs	r3, r2
 800393e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	4313      	orrs	r3, r2
 800394c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	689a      	ldr	r2, [r3, #8]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a08      	ldr	r2, [pc, #32]	; (8003988 <TIM_Base_SetConfig+0xe4>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d103      	bne.n	8003974 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	615a      	str	r2, [r3, #20]
}
 800397a:	bf00      	nop
 800397c:	3714      	adds	r7, #20
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	40010000 	.word	0x40010000
 800398c:	40000400 	.word	0x40000400
 8003990:	40000800 	.word	0x40000800
 8003994:	40000c00 	.word	0x40000c00
 8003998:	40014000 	.word	0x40014000
 800399c:	40014400 	.word	0x40014400
 80039a0:	40014800 	.word	0x40014800

080039a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <_ZdlPvj>:
 80039cc:	f000 b800 	b.w	80039d0 <_ZdlPv>

080039d0 <_ZdlPv>:
 80039d0:	f000 b832 	b.w	8003a38 <free>

080039d4 <__errno>:
 80039d4:	4b01      	ldr	r3, [pc, #4]	; (80039dc <__errno+0x8>)
 80039d6:	6818      	ldr	r0, [r3, #0]
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	2000000c 	.word	0x2000000c

080039e0 <__libc_init_array>:
 80039e0:	b570      	push	{r4, r5, r6, lr}
 80039e2:	4e0d      	ldr	r6, [pc, #52]	; (8003a18 <__libc_init_array+0x38>)
 80039e4:	4c0d      	ldr	r4, [pc, #52]	; (8003a1c <__libc_init_array+0x3c>)
 80039e6:	1ba4      	subs	r4, r4, r6
 80039e8:	10a4      	asrs	r4, r4, #2
 80039ea:	2500      	movs	r5, #0
 80039ec:	42a5      	cmp	r5, r4
 80039ee:	d109      	bne.n	8003a04 <__libc_init_array+0x24>
 80039f0:	4e0b      	ldr	r6, [pc, #44]	; (8003a20 <__libc_init_array+0x40>)
 80039f2:	4c0c      	ldr	r4, [pc, #48]	; (8003a24 <__libc_init_array+0x44>)
 80039f4:	f000 f91e 	bl	8003c34 <_init>
 80039f8:	1ba4      	subs	r4, r4, r6
 80039fa:	10a4      	asrs	r4, r4, #2
 80039fc:	2500      	movs	r5, #0
 80039fe:	42a5      	cmp	r5, r4
 8003a00:	d105      	bne.n	8003a0e <__libc_init_array+0x2e>
 8003a02:	bd70      	pop	{r4, r5, r6, pc}
 8003a04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a08:	4798      	blx	r3
 8003a0a:	3501      	adds	r5, #1
 8003a0c:	e7ee      	b.n	80039ec <__libc_init_array+0xc>
 8003a0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a12:	4798      	blx	r3
 8003a14:	3501      	adds	r5, #1
 8003a16:	e7f2      	b.n	80039fe <__libc_init_array+0x1e>
 8003a18:	08003c8c 	.word	0x08003c8c
 8003a1c:	08003c8c 	.word	0x08003c8c
 8003a20:	08003c8c 	.word	0x08003c8c
 8003a24:	08003c94 	.word	0x08003c94

08003a28 <malloc>:
 8003a28:	4b02      	ldr	r3, [pc, #8]	; (8003a34 <malloc+0xc>)
 8003a2a:	4601      	mov	r1, r0
 8003a2c:	6818      	ldr	r0, [r3, #0]
 8003a2e:	f000 b861 	b.w	8003af4 <_malloc_r>
 8003a32:	bf00      	nop
 8003a34:	2000000c 	.word	0x2000000c

08003a38 <free>:
 8003a38:	4b02      	ldr	r3, [pc, #8]	; (8003a44 <free+0xc>)
 8003a3a:	4601      	mov	r1, r0
 8003a3c:	6818      	ldr	r0, [r3, #0]
 8003a3e:	f000 b80b 	b.w	8003a58 <_free_r>
 8003a42:	bf00      	nop
 8003a44:	2000000c 	.word	0x2000000c

08003a48 <memset>:
 8003a48:	4402      	add	r2, r0
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d100      	bne.n	8003a52 <memset+0xa>
 8003a50:	4770      	bx	lr
 8003a52:	f803 1b01 	strb.w	r1, [r3], #1
 8003a56:	e7f9      	b.n	8003a4c <memset+0x4>

08003a58 <_free_r>:
 8003a58:	b538      	push	{r3, r4, r5, lr}
 8003a5a:	4605      	mov	r5, r0
 8003a5c:	2900      	cmp	r1, #0
 8003a5e:	d045      	beq.n	8003aec <_free_r+0x94>
 8003a60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a64:	1f0c      	subs	r4, r1, #4
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	bfb8      	it	lt
 8003a6a:	18e4      	addlt	r4, r4, r3
 8003a6c:	f000 f8e0 	bl	8003c30 <__malloc_lock>
 8003a70:	4a1f      	ldr	r2, [pc, #124]	; (8003af0 <_free_r+0x98>)
 8003a72:	6813      	ldr	r3, [r2, #0]
 8003a74:	4610      	mov	r0, r2
 8003a76:	b933      	cbnz	r3, 8003a86 <_free_r+0x2e>
 8003a78:	6063      	str	r3, [r4, #4]
 8003a7a:	6014      	str	r4, [r2, #0]
 8003a7c:	4628      	mov	r0, r5
 8003a7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a82:	f000 b8d6 	b.w	8003c32 <__malloc_unlock>
 8003a86:	42a3      	cmp	r3, r4
 8003a88:	d90c      	bls.n	8003aa4 <_free_r+0x4c>
 8003a8a:	6821      	ldr	r1, [r4, #0]
 8003a8c:	1862      	adds	r2, r4, r1
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	bf04      	itt	eq
 8003a92:	681a      	ldreq	r2, [r3, #0]
 8003a94:	685b      	ldreq	r3, [r3, #4]
 8003a96:	6063      	str	r3, [r4, #4]
 8003a98:	bf04      	itt	eq
 8003a9a:	1852      	addeq	r2, r2, r1
 8003a9c:	6022      	streq	r2, [r4, #0]
 8003a9e:	6004      	str	r4, [r0, #0]
 8003aa0:	e7ec      	b.n	8003a7c <_free_r+0x24>
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	b10a      	cbz	r2, 8003aac <_free_r+0x54>
 8003aa8:	42a2      	cmp	r2, r4
 8003aaa:	d9fa      	bls.n	8003aa2 <_free_r+0x4a>
 8003aac:	6819      	ldr	r1, [r3, #0]
 8003aae:	1858      	adds	r0, r3, r1
 8003ab0:	42a0      	cmp	r0, r4
 8003ab2:	d10b      	bne.n	8003acc <_free_r+0x74>
 8003ab4:	6820      	ldr	r0, [r4, #0]
 8003ab6:	4401      	add	r1, r0
 8003ab8:	1858      	adds	r0, r3, r1
 8003aba:	4282      	cmp	r2, r0
 8003abc:	6019      	str	r1, [r3, #0]
 8003abe:	d1dd      	bne.n	8003a7c <_free_r+0x24>
 8003ac0:	6810      	ldr	r0, [r2, #0]
 8003ac2:	6852      	ldr	r2, [r2, #4]
 8003ac4:	605a      	str	r2, [r3, #4]
 8003ac6:	4401      	add	r1, r0
 8003ac8:	6019      	str	r1, [r3, #0]
 8003aca:	e7d7      	b.n	8003a7c <_free_r+0x24>
 8003acc:	d902      	bls.n	8003ad4 <_free_r+0x7c>
 8003ace:	230c      	movs	r3, #12
 8003ad0:	602b      	str	r3, [r5, #0]
 8003ad2:	e7d3      	b.n	8003a7c <_free_r+0x24>
 8003ad4:	6820      	ldr	r0, [r4, #0]
 8003ad6:	1821      	adds	r1, r4, r0
 8003ad8:	428a      	cmp	r2, r1
 8003ada:	bf04      	itt	eq
 8003adc:	6811      	ldreq	r1, [r2, #0]
 8003ade:	6852      	ldreq	r2, [r2, #4]
 8003ae0:	6062      	str	r2, [r4, #4]
 8003ae2:	bf04      	itt	eq
 8003ae4:	1809      	addeq	r1, r1, r0
 8003ae6:	6021      	streq	r1, [r4, #0]
 8003ae8:	605c      	str	r4, [r3, #4]
 8003aea:	e7c7      	b.n	8003a7c <_free_r+0x24>
 8003aec:	bd38      	pop	{r3, r4, r5, pc}
 8003aee:	bf00      	nop
 8003af0:	2000b544 	.word	0x2000b544

08003af4 <_malloc_r>:
 8003af4:	b570      	push	{r4, r5, r6, lr}
 8003af6:	1ccd      	adds	r5, r1, #3
 8003af8:	f025 0503 	bic.w	r5, r5, #3
 8003afc:	3508      	adds	r5, #8
 8003afe:	2d0c      	cmp	r5, #12
 8003b00:	bf38      	it	cc
 8003b02:	250c      	movcc	r5, #12
 8003b04:	2d00      	cmp	r5, #0
 8003b06:	4606      	mov	r6, r0
 8003b08:	db01      	blt.n	8003b0e <_malloc_r+0x1a>
 8003b0a:	42a9      	cmp	r1, r5
 8003b0c:	d903      	bls.n	8003b16 <_malloc_r+0x22>
 8003b0e:	230c      	movs	r3, #12
 8003b10:	6033      	str	r3, [r6, #0]
 8003b12:	2000      	movs	r0, #0
 8003b14:	bd70      	pop	{r4, r5, r6, pc}
 8003b16:	f000 f88b 	bl	8003c30 <__malloc_lock>
 8003b1a:	4a21      	ldr	r2, [pc, #132]	; (8003ba0 <_malloc_r+0xac>)
 8003b1c:	6814      	ldr	r4, [r2, #0]
 8003b1e:	4621      	mov	r1, r4
 8003b20:	b991      	cbnz	r1, 8003b48 <_malloc_r+0x54>
 8003b22:	4c20      	ldr	r4, [pc, #128]	; (8003ba4 <_malloc_r+0xb0>)
 8003b24:	6823      	ldr	r3, [r4, #0]
 8003b26:	b91b      	cbnz	r3, 8003b30 <_malloc_r+0x3c>
 8003b28:	4630      	mov	r0, r6
 8003b2a:	f000 f871 	bl	8003c10 <_sbrk_r>
 8003b2e:	6020      	str	r0, [r4, #0]
 8003b30:	4629      	mov	r1, r5
 8003b32:	4630      	mov	r0, r6
 8003b34:	f000 f86c 	bl	8003c10 <_sbrk_r>
 8003b38:	1c43      	adds	r3, r0, #1
 8003b3a:	d124      	bne.n	8003b86 <_malloc_r+0x92>
 8003b3c:	230c      	movs	r3, #12
 8003b3e:	6033      	str	r3, [r6, #0]
 8003b40:	4630      	mov	r0, r6
 8003b42:	f000 f876 	bl	8003c32 <__malloc_unlock>
 8003b46:	e7e4      	b.n	8003b12 <_malloc_r+0x1e>
 8003b48:	680b      	ldr	r3, [r1, #0]
 8003b4a:	1b5b      	subs	r3, r3, r5
 8003b4c:	d418      	bmi.n	8003b80 <_malloc_r+0x8c>
 8003b4e:	2b0b      	cmp	r3, #11
 8003b50:	d90f      	bls.n	8003b72 <_malloc_r+0x7e>
 8003b52:	600b      	str	r3, [r1, #0]
 8003b54:	50cd      	str	r5, [r1, r3]
 8003b56:	18cc      	adds	r4, r1, r3
 8003b58:	4630      	mov	r0, r6
 8003b5a:	f000 f86a 	bl	8003c32 <__malloc_unlock>
 8003b5e:	f104 000b 	add.w	r0, r4, #11
 8003b62:	1d23      	adds	r3, r4, #4
 8003b64:	f020 0007 	bic.w	r0, r0, #7
 8003b68:	1ac3      	subs	r3, r0, r3
 8003b6a:	d0d3      	beq.n	8003b14 <_malloc_r+0x20>
 8003b6c:	425a      	negs	r2, r3
 8003b6e:	50e2      	str	r2, [r4, r3]
 8003b70:	e7d0      	b.n	8003b14 <_malloc_r+0x20>
 8003b72:	428c      	cmp	r4, r1
 8003b74:	684b      	ldr	r3, [r1, #4]
 8003b76:	bf16      	itet	ne
 8003b78:	6063      	strne	r3, [r4, #4]
 8003b7a:	6013      	streq	r3, [r2, #0]
 8003b7c:	460c      	movne	r4, r1
 8003b7e:	e7eb      	b.n	8003b58 <_malloc_r+0x64>
 8003b80:	460c      	mov	r4, r1
 8003b82:	6849      	ldr	r1, [r1, #4]
 8003b84:	e7cc      	b.n	8003b20 <_malloc_r+0x2c>
 8003b86:	1cc4      	adds	r4, r0, #3
 8003b88:	f024 0403 	bic.w	r4, r4, #3
 8003b8c:	42a0      	cmp	r0, r4
 8003b8e:	d005      	beq.n	8003b9c <_malloc_r+0xa8>
 8003b90:	1a21      	subs	r1, r4, r0
 8003b92:	4630      	mov	r0, r6
 8003b94:	f000 f83c 	bl	8003c10 <_sbrk_r>
 8003b98:	3001      	adds	r0, #1
 8003b9a:	d0cf      	beq.n	8003b3c <_malloc_r+0x48>
 8003b9c:	6025      	str	r5, [r4, #0]
 8003b9e:	e7db      	b.n	8003b58 <_malloc_r+0x64>
 8003ba0:	2000b544 	.word	0x2000b544
 8003ba4:	2000b548 	.word	0x2000b548

08003ba8 <rand>:
 8003ba8:	b538      	push	{r3, r4, r5, lr}
 8003baa:	4b13      	ldr	r3, [pc, #76]	; (8003bf8 <rand+0x50>)
 8003bac:	681c      	ldr	r4, [r3, #0]
 8003bae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003bb0:	b97b      	cbnz	r3, 8003bd2 <rand+0x2a>
 8003bb2:	2018      	movs	r0, #24
 8003bb4:	f7ff ff38 	bl	8003a28 <malloc>
 8003bb8:	4a10      	ldr	r2, [pc, #64]	; (8003bfc <rand+0x54>)
 8003bba:	4b11      	ldr	r3, [pc, #68]	; (8003c00 <rand+0x58>)
 8003bbc:	63a0      	str	r0, [r4, #56]	; 0x38
 8003bbe:	e9c0 2300 	strd	r2, r3, [r0]
 8003bc2:	4b10      	ldr	r3, [pc, #64]	; (8003c04 <rand+0x5c>)
 8003bc4:	6083      	str	r3, [r0, #8]
 8003bc6:	230b      	movs	r3, #11
 8003bc8:	8183      	strh	r3, [r0, #12]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	2300      	movs	r3, #0
 8003bce:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8003bd2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003bd4:	480c      	ldr	r0, [pc, #48]	; (8003c08 <rand+0x60>)
 8003bd6:	690a      	ldr	r2, [r1, #16]
 8003bd8:	694b      	ldr	r3, [r1, #20]
 8003bda:	4c0c      	ldr	r4, [pc, #48]	; (8003c0c <rand+0x64>)
 8003bdc:	4350      	muls	r0, r2
 8003bde:	fb04 0003 	mla	r0, r4, r3, r0
 8003be2:	fba2 2304 	umull	r2, r3, r2, r4
 8003be6:	4403      	add	r3, r0
 8003be8:	1c54      	adds	r4, r2, #1
 8003bea:	f143 0500 	adc.w	r5, r3, #0
 8003bee:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8003bf2:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8003bf6:	bd38      	pop	{r3, r4, r5, pc}
 8003bf8:	2000000c 	.word	0x2000000c
 8003bfc:	abcd330e 	.word	0xabcd330e
 8003c00:	e66d1234 	.word	0xe66d1234
 8003c04:	0005deec 	.word	0x0005deec
 8003c08:	5851f42d 	.word	0x5851f42d
 8003c0c:	4c957f2d 	.word	0x4c957f2d

08003c10 <_sbrk_r>:
 8003c10:	b538      	push	{r3, r4, r5, lr}
 8003c12:	4c06      	ldr	r4, [pc, #24]	; (8003c2c <_sbrk_r+0x1c>)
 8003c14:	2300      	movs	r3, #0
 8003c16:	4605      	mov	r5, r0
 8003c18:	4608      	mov	r0, r1
 8003c1a:	6023      	str	r3, [r4, #0]
 8003c1c:	f7fd faa8 	bl	8001170 <_sbrk>
 8003c20:	1c43      	adds	r3, r0, #1
 8003c22:	d102      	bne.n	8003c2a <_sbrk_r+0x1a>
 8003c24:	6823      	ldr	r3, [r4, #0]
 8003c26:	b103      	cbz	r3, 8003c2a <_sbrk_r+0x1a>
 8003c28:	602b      	str	r3, [r5, #0]
 8003c2a:	bd38      	pop	{r3, r4, r5, pc}
 8003c2c:	2000b638 	.word	0x2000b638

08003c30 <__malloc_lock>:
 8003c30:	4770      	bx	lr

08003c32 <__malloc_unlock>:
 8003c32:	4770      	bx	lr

08003c34 <_init>:
 8003c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c36:	bf00      	nop
 8003c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c3a:	bc08      	pop	{r3}
 8003c3c:	469e      	mov	lr, r3
 8003c3e:	4770      	bx	lr

08003c40 <_fini>:
 8003c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c42:	bf00      	nop
 8003c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c46:	bc08      	pop	{r3}
 8003c48:	469e      	mov	lr, r3
 8003c4a:	4770      	bx	lr
